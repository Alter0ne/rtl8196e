.TH hdf_set_valuef 3 "12 July 2007" "ClearSilver" "util/neo_hdf.h"

.de Ss
.sp
.ft CW
.nf
..
.de Se
.fi
.ft P
.sp
..
.SH NAME
hdf_set_valuef  - Set the value of a named node
.SH SYNOPSIS
.Ss
#include <util/neo_hdf.h>
.Se
.Ss
NEOERR* hdf_set_valuef (HDF *hdf, const char *fmt, ...)
                        ATTRIBUTE_PRINTF(2,3);

.Se

.SH ARGUMENTS
hdf -> the pointer to the hdf dataset
.br
fmt -> the name=value printf(3) format string

.SH DESCRIPTION
hdf_set_valuef is a convenience function that wraps
hdf_set_value.  Due to limitations of C, the fmt is in
the format "name=value", where we will first format the
entire string, and then break it at the first (from the
left) equal sign (=) and use the left portion as the
name and the right portion as the value.  This function
is somewhat inefficient in that it first allocates the
full name=value, and then the call to hdf_set_value
duplicates the value portion, and then we free the
name=value.
Currently, we don't strip whitespace from the key or
value.  In the future, this function might work more
like reading a single line of an HDF string or file,
allowing for attributes and symlinks to be specified...
maybe.

.SH "RETURN VALUE"
None

.SH "SEE ALSO"
.BR hdf_set_symlink "(3), "hdf_get_valuef "(3), "compareFunc) "(3), "hdf_dump_str "(3), "hdf_get_int_value "(3), "hdf_read_string_ignore "(3), "hdf_copy "(3), "hdf_get_node "(3), "hdf_set_value "(3), "hdf_obj_child "(3), "hdf_read_string "(3), "hdf_set_buf "(3), "hdf_register_fileload "(3), "hdf_get_obj "(3), "hdf_get_attr "(3), "hdf_obj_top "(3), "hdf_dump_format "(3), "hdf_destroy "(3), "hdf_init "(3), "hdf_obj_value "(3), "hdf_write_string "(3), "hdf_set_valuevf "(3), "hdf_sort_obj "(3), "hdf_write_file_atomic "(3), "hdf_obj_attr "(3), "hdf_set_valuef "(3), "hdf_get_copy "(3), "hdf_write_file "(3), "hdf_get_valuevf "(3), "hdf_set_int_value "(3), "hdf_dump "(3), "hdf_get_value "(3), "hdf_set_copy "(3), "hdf_obj_next "(3), "hdf_search_path "(3), "hdf_obj_name "(3), "hdf_set_attr "(3), "hdf_get_child "(3), "hdf_remove_tree
