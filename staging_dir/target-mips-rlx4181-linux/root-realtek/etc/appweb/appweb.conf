#
#   appweb.conf -- Single file (flat) Appweb Configuration
#   
#   This configuration file controls the operation of the Appweb server. The 
#   order of configuration directives matters as this file is parsed only once.
#   You must put the server root and error log definitions first to ensure 
#   configuration errors are logged.
#
#   This file does not use include directives so simplify setup.
#

#
#   Define the logging configuration first so any errors are logged
#
<if LOG>
    #
    #   Log all Appweb errors and trace to this file. This is the error 
    #   file for the whole server including all virtual hosts. 
    #
    ErrorLog stdout

    #
    #   The log level can be a number between 0 and 9 (most verbose level).
    #
    LogLevel 3

    #
    #   Enable the tracing of request and response requests.
    #   The LogTrace directive defines a level at which to log requests and describes 
    #   whether to trace requests, responses and/or headers and content body data.
    #   The default is to log headers and response headers only at level 3
    #
    #   LogTrace 2 headers,body,request,response

    #   The LogTraceFilter defines a maximum size to log for a file and an optional 
    #   inclusion and exclusion pattern. File extensions matching the inclusion (first) 
    #   pattern are traced. File extensions matching the exclusion (second) pattern are 
    #   excluded.
    #
    #   LogTraceFilter 4096 "*" "gif,jpg,png,ico"
</if>

<if ACCESS_LOG>
    #
    #   Define the log format for the access log.
    #
    #   CustomLog "/var/log/access.log" "%h %l %u %t \"%r\" %>s %b"
</if>

#
#   Server Root directory for Appweb to find necessary files and libraries. 
#   Appweb will change directory to this location when it runs.
#
ServerRoot "/etc/appweb"

#
#   Create a "chroot jail" by changing the system root directory to this directory. 
#   Once changed files outside the jail will be inaccessible.
#
#   Chroot "."

#
#   Bind Appweb to listen for incoming requests on this address. Formats 
#   include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will 
#   listen on all interfaces. If a port is omitted, then port 80 is used.
#   Use [::]:port for IPv6 to bind to all addresses. [::1] is the IPv6 loopback.
#
Listen 8000

#
#   Name of the server to use for redirects and error responses to clients. 
#   Uncomment this line and replace it with the public name of your server. 
#   This host name and port do not get used for listening on sockets. If 
#   unspecified, Appweb will use the IP address for the host name.
#
#   ServerName http://localhost:9997

#
#   Location for documents for the primary server host. Virtual hosts 
#   may define their own DocumentRoot "/www"
#
DocumentRoot "/www"

#
#   Default directory index to serve when a directory is requested.
#
DirectoryIndex index.html

#
#   Location of the mime translation file to map content types to file 
#   extensions. For other types, you can use AddType.  
#   "AddType application/x-appweb-other other"
#
#   TypesConfig mime.types

#
#   Search path for dynamically loadable modules. If modules have been 
#   statically linked into Appweb, this directive and LoadModule directives
#   will be ignored. This directive must be before any LoadModule directives.
#
LoadModulePath "/usr/lib/appweb/modules"

#
#   Notes on the request processing pipeline. The pipeline consists of a set 
#   of stages comprised of a handler, possible filters and one network 
#   connector. 
#
#   The request processing pipeline can be configured at various levels: 
#   globally, virtual hosts and location blocks. At each level, a set of 
#   processing stages can be defined. Inner levels inherit the pipeline from 
#   the outer levels. The pipeline can be reset at a level by using 
#   ResetPipeline. Each stage may be defined for all requests or only for a 
#   specific file extension or location path prefix.
#
#   The pipeline is defined with the network connector first and the handler 
#   last. If you use the AddConnector, AddFilter or AddHandler directives, the 
#   stage is defined for both input and output processing. For filters you can
#   use AddInputFilter AddOutputFilter directives to define for a single 
#   direction.
#
#   Define the network connector first. This must be before all handlers and 
#   filters. The network connector will transparently use the send connector 
#   for static file data.
#
#   Multiple handlers can be defined, but only the first matching handler will
#   be activated when a request is processed.
#
SetConnector netConnector

<if AUTH_MODULE>
    LoadModule authFilter mod_auth
    #
    #   The auth filter must be first in the pipeline before all handlers and
    #   after the connector definition. Only needed on the output pipeline.
    #
    AddOutputFilter authFilter
</if>

#
#   Add other filters. Order matters. Chunking must be last.
#
<if RANGE_MODULE>
    LoadModule rangeFilter mod_range
    AddOutputFilter rangeFilter
</if>
<if CHUNK_MODULE>
    LoadModule chunkFilter mod_chunk
    AddFilter chunkFilter
</if>

#
#   For CGI scripts, such as your Perl scripts make sure that you have 
#   "#!/PerlPath" as the first line. This works on Windows as well.
#   The .bat and .cmd extensions are really only for Windows.
#   
<if CGI_MODULE>
    LoadModule cgiHandler mod_cgi
    AddHandler cgiHandler .exe .cgi .cgi-nph .bat .cmd .pl .py

    <Directory "cgi-bin">
    </Directory>

    ScriptAlias /cgi-bin/ "cgi-bin"

    #
    #   These actions specify the program to run for each Perl or Python 
    #   script. They map to the extensions specified in the mime.types for for 
    #   these mime types. Alternatively, you may use put all your scripts in 
    #   the subdirectories specified by the releavant Location blocks below.
    #   For perl and python, you can also put "#!/path/to/program" as the first 
    #   line. This works on Windows as well. The .bat and .cmd extensions are 
    #   really only for Windows. For Windows, update the program paths with
    #   the right paths.
    #   
    Action application/x-appweb-perl /usr/bin/perl
    Action application/x-appweb-python /usr/bin/python
    Action application/x-appweb-lua /usr/bin/lua
    Action application/x-appweb-ruby /usr/bin/ruby
</if>

#	<if DIR_MODULE>
#	    LoadModule dirHandler mod_dir
#	    AddHandler dirHandler
#	
#	    #
#	    #   Directory listings
#	    #
#	    Options Indexes
#	    IndexOrder ascending name
#	    IndexOptions FancyIndexing FoldersFirst
#	</if>

#
#   The EGI module supports the Embedded Gateway Interface which is a fast in-memory alternative to CGI.
#
<if EGI_MODULE>
    LoadModule egiHandler mod_egi
    AddHandler egiHandler .egi
    <Location /egi/>
        SetHandler egiHandler
    </Location>
</if>

<if EJS_MODULE>
    LoadModule ejsHandler mod_ejs
    AddHandler ejsHandler .ejs

    #
    #   Send errors to user's browser. Change to "browser" to "log" for 
    #   production systems.
    #
    EjsErrors browser

    #
    #   Auto create sessions for EJS
    #
    EjsSession off

    #
    #   Default session timeout (30 mins in seconds)
    #
    EjsSessionTimeout 1800

    <Location /ejs/>
        #
        #   Directory for stand alone ejs scripts (not apps)
        #
        SetHandler ejsHandler
    </Location>

    #
    #   To define Ejs Applications, add an EjsAppAlias directive
    #   This should be put into a separate config file per app under conf/apps
    #
    #   EjsAppAlias  /myApp/    /Users/jim/myApp
    #

    #
    #   Long way to define an ejs appliction
    #
    #   <Location /myApp/>
    #       SetHandler          ejsHandler
    #       EjsApp              on
    #       EjsSession          off 
    #       EjsSessionTimeout   60
    #       Alias /myApp/       /Users/jim/myApp/
    #   </Location>

</if>

<if UPLOAD_MODULE>
    LoadModule uploadFilter mod_upload
    UploadDir /tmp
    UploadAutoDelete on
    #
    #   For URLs that begin with "/test/upload/"
    #
    <Location /test/upload/>
        AddInputFilter uploadFilter
    </Location>
</if>

#
#   The file handler supports requests for static files. Put this last after
#   all other modules and it becomes the catch-all due to the empty quotes.
#
<if FILE_MODULE>
    LoadModule fileHandler mod_file
    AddHandler fileHandler .html .gif .jpeg .png .pdf ""
</if>

#<if DOC>
#    Alias /doc/ "/usr/share/appweb/"
#</if>

#
#   The user name and group to switch to once Appweb has started.
#
Group nogroup
User nobody

#
#   Set an expiry period (secs) for content. Clients will refresh only if content is stale.
#
Expires 86400 image/png image/gif

#
#   Send and receive inactivity timeout to close an idle TCP/IP connection
#
Timeout 60

#
#   Define persistent connections where one TCP/IP connection may serve
#   multiple HTTP requests. (A definite performance boost)
#
KeepAlive on

#
#   Number of seconds to wait for the next HTTP request before closing 
#   the TCP/IP connection.
#
KeepAliveTimeout 60

#
#   Number of HTTP requests to accept on a single TCP/IP connection
#   Reduce this number to minimize the chance of DoS attacks.
#
MaxKeepAliveRequests 200

#
#   Maximum number of threads if built multi-threaded. Set to 0 for single-threaded
#   
#
ThreadLimit 10

#
#   Maximum number of simultaneous clients. This is not the number of client sessions.
#
LimitClients 40

#
#   Maximum size of the maximum request content body (bytes)
#  
LimitRequestBody 4194304

#
#   Maximum number of request header fields 
#  
LimitRequestFields 512  

#
#   Maximum size of request header fields 
#  
LimitRequestFieldSize 1048576

#
#   Maximum size of the maximum response body (bytes)
#  
LimitResponseBody 104857600

#
#   Maximum buffer size for pipeline stages
#
LimitStageBuffer 8192

#
#   Maximum response chunk size
#
LimitChunkSize 8192

#
#   Maximum URL size
#
LimitUrl 30000

#
#   Other tunable parameters
#
#   StartThreads 4
#   ThreadStackSize 65536
#
#   Other useful Directives
#
#   ErrorDocument 404 /notFound.html
#   TraceMethod on
#   PutMethod on
#
#   Redirect temp /pressRelease.html /fixedPressRelease.html
#   Redirect 410 /membersOnly 
#

#
#   ssl-default.conf -- SSL Configuration for the default server
#   

<if SSL_MODULE>
    #
    #   List on port 4443 for SSL requests. NOTE: Standard SSL port is 443.
    #
    Listen 8443

    LoadModule sslModule mod_ssl

    #
    #   This virtual host will process SSL requests. Inherits the default server 
    #   configuration.
    #
    <VirtualHost *:8443>
        DocumentRoot "/www"
        SSLEngine on
        SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
        SSLProtocol ALL -SSLV2

        #
        #   WARNING: you must regenerate the server.crt and server.key.pem
        #
        #   SSLCertificateFile "$SERVER_ROOT/ssl/server.crt"

        #
        #   WARNING: we are using the decrypted key here so it won't prompt 
        #   for the password. Replace with server.key for higher security.
        #
        #   SSLCertificateKeyFile "$SERVER_ROOT/ssl/server.key.pem"

        #
        # Add these directives to require and verify client certificates
        #
        # SSLVerifyClient require
        # SSLCACertificateFile "$SERVER_ROOT/ssl/ca.crt"
        # SSLCACertificatePath "$SERVER_ROOT/ssl/certs"

    </VirtualHost>                                  
</if>

#
#   Include apps
#  
Include apps/*
