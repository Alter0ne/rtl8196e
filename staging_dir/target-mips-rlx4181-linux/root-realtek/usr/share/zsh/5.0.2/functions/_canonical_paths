#autoload

# This completion function completes all paths given to it, and also tries to
# offer completions which point to the same file as one of the paths given
# (relative path when an absolute path is given, and vice versa; when ..'s are
# present in the word to be completed, and some paths got from symlinks.

# Usage: _canonical_paths [-A var] [-N] [-MJV12nfX] tag desc paths...

# -A, if specified, takes the paths from the array variable specified. Paths can
# also be specified on the command line as shown above. -N, if specified,
# prevents canonicalizing the paths given before using them for completion, in
# case they are already so. `tag' and `desc' arguments are well, obvious :) In
# addition, the options -M, -J, -V, -1, -2, -n, -F, -X are passed to compadd.

_canonical_paths_pwd() {
  # Get the canonical directory name by changing to it.
  integer chaselinks
  [[ -o chaselinks ]] && (( chaselinks = 1 ))
  setopt localoptions nopushdignoredups chaselinks
  if builtin pushd -q -- $1 2>/dev/null; then
    REPLY=$PWD
    (( chaselinks )) || unsetopt chaselinks
    builtin popd -q
  else
    REPLY=$1
  fi
}

_canonical_paths_get_canonical_path() {
  typeset newfile nondir
  typeset -A seen

  REPLY=$1
  # Canonicalise the directory path.  We may not be able to
  # do this if we can't read all components.
  if [[ -d $REPLY ]]; then
    _canonical_paths_pwd $REPLY
  else
    # Resolve any trailing symbolic links, guarding against loops.
    while [[ -z ${seen[$REPLY]} ]]; do
      seen[$REPLY]=1
      newfile=()
      zstat -A newfile +link $REPLY 2>/dev/null
      if [[ -n $newfile[1] ]]; then
	REPLY=$newfile[1]
      else
	break
      fi
    done
    if [[ $REPLY = */*[^/] && $REPLY != /[^/]# ]]; then
      # Don't try this if there's a trailing slash or we're in
      # the root directory.
      nondir=${REPLY##*/#}
      _canonical_paths_pwd ${REPLY%/#*}
      REPLY+="/$nondir"
    fi
  fi
}

_canonical_paths_add_paths () {
  local origpref=$1 expref rltrim curpref canpref subdir
  [[ $2 != add ]] && matches=()
  expref=${~origpref}
  [[ $origpref == (|*/). ]] && rltrim=.
  curpref=${${expref%$rltrim}:-./}
  if zstat $curpref >&/dev/null; then
    _canonical_paths_get_canonical_path $curpref
    canpref=$REPLY
  else
    canpref=$curpref
  fi
  [[ $curpref == */ && $canpref == *[^/] ]] && canpref+=/
  canpref+=$rltrim
  [[ $expref == *[^/] && $canpref == */ ]] && origpref+=/
  matches+=(${${(M)files:#$canpref*}/$canpref/$origpref})
  for subdir in $expref?*(@); do
    _canonical_paths_add_paths ${subdir/$expref/$origpref} add
  done
}

_canonical_paths() {
  local __index
  typeset -a __gopts __opts

  zparseopts -D -a __gopts M: J: V: 1 2 n F: X: A:=__opts N=__opts

  : ${1:=canonical-paths} ${2:=path}

  __index=$__opts[(I)-A]
  (( $__index )) && set -- $@ ${(P)__opts[__index+1]}

  local expl ret=1 tag=$1 desc=$2

  shift 2

  if ! zmodload -F zsh/stat b:zstat 2>/dev/null; then
    _wanted "$tag" expl "$desc" compadd $__gopts $@ && ret=0
    return ret
  fi

  typeset REPLY
  typeset -a matches files

  if (( $__opts[(I)-N] )); then
    files=($@)
  else
    for __index in $@; do
      _canonical_paths_get_canonical_path $__index
      files+=($REPLY)
    done
  fi

  local base=$PREFIX
  typeset -i blimit

  _canonical_paths_add_paths $base

  if [[ -z $base ]]; then
    _canonical_paths_add_paths / add
  elif [[ $base == ..(/.(|.))#(|/) ]]; then

    # This style controls how many parent directory links (..) to chase searching
    # for possible completions. The default is 8. Note that this chasing is
    # triggered only when the user enters atleast a .. and the path completed
    # contains only . or .. components. A value of 0 turns off .. link chasing
    # altogether.

    zstyle -s ":completion:${curcontext}:$tag" \
      canonical-paths-back-limit blimit || blimit=8

    if [[ $base != */ ]]; then
      [[ $base != *.. ]] && base+=.
      base+=/
    fi
    until [[ $base.. -ef $base || blimit -le 0 ]]; do
      base+=../
      _canonical_paths_add_paths $base add
      blimit+=-1
    done
  fi

  _wanted "$tag" expl "$desc" compadd $__gopts -Q -U -a matches && ret=0

  return ret
}

_canonical_paths "$@"
