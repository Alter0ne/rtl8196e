Packages: gio-2.0
D-Bus

Program: client

[DBus (name = "org.example.Test")]
interface Test : Object {
	public abstract HashTable<string, Variant> test_dict () throws IOError;
}

void main () {
	// client
	Test test = Bus.get_proxy_sync (BusType.SESSION, "org.example.Test", "/org/example/test");

	HashTable<string, Variant> dict = test.test_dict ();
	assert (dict.size () == 1);
	Variant v = dict.lookup ("hello");
	assert (v != null);
	string[] s = (string[]) v;
	assert (s.length == 1 && s[0] == "hello");
}

Program: server

[DBus (name = "org.example.Test")]
class Test : Object {
	public HashTable<string, Variant> test_dict () {
		string[] s = { "hello" };
		HashTable<string, Variant> dict = new HashTable<string, Variant> (str_hash, null);
		dict.insert ("hello", s);
		return dict;
	}
}

namespace TestInterface {
	[DBus (name = "org.vala.Test.Bar")]
	public interface Bar : GLib.Object {
		public abstract HashTable<string, Variant> foo () throws IOError;
	}

	public class Foo : GLib.DBusProxy, Bar {
		public HashTable<string, Variant> foo () throws IOError {
			return new HashTable<string, Variant> (str_hash, str_equal);
		}
	}
}

MainLoop main_loop;

void client_exit (Pid pid, int status) {
	// client finished, terminate server
	assert (status == 0);
	main_loop.quit ();
}

void main () {
	var conn = Bus.get_sync (BusType.SESSION);
	conn.register_object ("/org/example/test", new Test ());

	// try to register service in session bus
	var request_result = conn.call_sync ("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "RequestName",
	                                      new Variant ("(su)", "org.example.Test", 0x4), null, 0, -1);
	assert ((uint) request_result.get_child_value (0) == 1);

	// server ready, spawn client
	Pid client_pid;
	Process.spawn_async (null, { "dbus_dicts_client" }, null, SpawnFlags.DO_NOT_REAP_CHILD, null, out client_pid);
	ChildWatch.add (client_pid, client_exit);

	main_loop = new MainLoop ();
	main_loop.run ();
}
