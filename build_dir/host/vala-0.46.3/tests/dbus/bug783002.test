Packages: gio-2.0
D-Bus

Program: client

[DBus (name = "org.example.Test")]
interface Test : Object {
	public abstract async string test_array_lifetime (string[] items) throws IOError;
}

MainLoop main_loop;

void main () {
	main_loop = new MainLoop ();
	run.begin ();
	main_loop.run ();
}

async void run () {
	Test test = yield Bus.get_proxy (BusType.SESSION, "org.example.Test", "/org/example/test");

	var result = yield test.test_array_lifetime (new string[] { "Badger", "Snake", "Mushroom" });
	assert (result == "BadgerSnakeMushroom");

	main_loop.quit ();
}

Program: server

[DBus (name = "org.example.Test")]
class Test : Object {
	public async string test_array_lifetime (string[] items) throws IOError {
		Idle.add (() => {
			test_array_lifetime.callback ();
			return false;
		});
		yield;

		var result = new StringBuilder ();
		foreach (var item in items) {
			result.append (item);
		}

		assert (result.str == "BadgerSnakeMushroom");
		return result.str;
	}
}

MainLoop main_loop;

void on_client_exit (Pid pid, int status) {
	assert (status == 0);
	main_loop.quit ();
}

void main () {
	var conn = Bus.get_sync (BusType.SESSION);
	conn.register_object ("/org/example/test", new Test ());

	var request_result = conn.call_sync ("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "RequestName",
	                                      new Variant ("(su)", "org.example.Test", 0x4), null, 0, -1);
	assert ((uint) request_result.get_child_value (0) == 1);

	Pid client_pid;
	Process.spawn_async (null, { "dbus_bug783002_client" }, null, SpawnFlags.DO_NOT_REAP_CHILD, null, out client_pid);
	ChildWatch.add (client_pid, on_client_exit);

	main_loop = new MainLoop ();
	main_loop.run ();
}
