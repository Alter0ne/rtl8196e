Packages: gio-2.0 gio-unix-2.0 posix
D-Bus

Program: client

[DBus (name = "org.example.Test")]
interface Test : Object {
	public abstract string test (UnixOutputStream output_stream) throws IOError;
}

void create_streams (out UnixInputStream input, out UnixOutputStream output) throws IOError {
	int pipefd[2];
	if (Posix.pipe (pipefd) < 0) {
		throw new IOError.FAILED ("Pipe creation failed");
	}
	input = new UnixInputStream (pipefd[0], true);
	output = new UnixOutputStream (pipefd[1], true);
}

void main () {
	// client
	Test test = Bus.get_proxy_sync (BusType.SESSION, "org.example.Test", "/org/example/test");

	UnixInputStream i;
	UnixOutputStream o;
	create_streams (out i, out o);

	try {
		test.test (o);
		// We expect the request to fail
		assert_not_reached ();
	} catch (Error e) {
	}
}

Program: server

[DBus (name = "org.example.Test")]
class Test : Object {
	public void test (UnixOutputStream output_stream) throws IOError {
		uint8[] buffer = new uint8[1];
		buffer[0] = 42;
		output_stream.write (buffer);
	}
}

MainLoop main_loop;

void client_exit (Pid pid, int status) {
	// client finished, terminate server
	assert (status == 0);
	main_loop.quit ();
}

void main () {
	var conn = Bus.get_sync (BusType.SESSION);
	conn.register_object ("/org/example/test", new Test ());

	// try to register service in session bus
	var request_result = conn.call_sync ("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "RequestName",
	                                      new Variant ("(su)", "org.example.Test", 0x4), null, 0, -1);
	assert ((uint) request_result.get_child_value (0) == 1);

	// server ready, spawn client
	Pid client_pid;
	Process.spawn_async (null, { "dbus_filedescriptor_errors_client" }, null, SpawnFlags.DO_NOT_REAP_CHILD, null, out client_pid);
	ChildWatch.add (client_pid, client_exit);

	main_loop = new MainLoop ();

	/* Exhaust fds before the incoming request */
	int fd = 0;
	while (fd >= 0)
		fd = Posix.open ("/", 0);

	main_loop.run ();
}
