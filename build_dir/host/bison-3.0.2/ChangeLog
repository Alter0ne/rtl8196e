2013-12-05  Akim Demaille  <akim@lrde.epita.fr>

	version 3.0.2
	* NEWS: Record release date.

2013-12-05  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update
	* gnulib: here.

2013-12-04  Akim Demaille  <akim@lrde.epita.fr>

	output: do not generate source files when late errors are caught
	Reported by Alexandre Duret-Lutz as "second problem" in:
	http://lists.gnu.org/archive/html/bug-bison/2013-09/msg00015.html

	* bootstrap.conf: We need the "unlink" module.
	* src/files.h, src/files.c (unlink_generated_sources): New.
	* src/output.c: Use it.
	* tests/output.at: Check the case of late errors.

2013-12-04  Akim Demaille  <akim@lrde.epita.fr>

	output: record what generated files are source or report files
	* src/files.h, src/files.c (output_file_name_check): Take an additional
	argument to record whether a file is a source or report file.
	* src/files.c (generated_file): New.
	(file_names, file_names_count): Replace with...
	(generated_files, generated_files_size): these.
	* src/scan-skel.l: Adjust.

2013-12-04  Akim Demaille  <akim@lrde.epita.fr>

	output: do not generate source files when early errors are caught
	Reported by Alexandre Duret-Lutz as "second problem" in:
	http://lists.gnu.org/archive/html/bug-bison/2013-09/msg00015.html

	One problem is that some errors are caught early, before the
	generation of output files, while others can only be detected
	afterwards (since, for instance, skeletons can raise errors
	themselves).

	This will be addressed in two steps: early errors do not generate
	source files at all, while later errors will remove the files that
	have already been generated.

	* src/scan-skel.l (yyout): Open to /dev/null when there are errors.
	* tests/output.at (AT_CHECK_FILES): Factored out of...
	(AT_CHECK_OUTPUT): this.
	Fuse the "SHELLIO" argument in the "FLAGS" one.
	Use $5 to denote the expected exit status.
	Add a test case for early errors.

2013-11-26  Akim Demaille  <akim@lrde.epita.fr>

	xml: also use "%empty" with html output
	* data/xslt/xml2xhtml.xsl: No longer issue an Epsilon, display as in
	dot and text formats.

2013-11-26  Akim Demaille  <akim@lrde.epita.fr>

	style: formatting changes
	* src/print-xml.c: here.

2013-11-26  Akim Demaille  <akim@lrde.epita.fr>

	xml: also display %empty for empty right-hand sides
	* data/xslt/xml2dot.xsl, data/xslt/xml2text.xsl: Display %empty where needed.

2013-11-26  Akim Demaille  <akim@lrde.epita.fr>

	reports: display %empty in the generated pointed-rules
	* src/print.c (print_core): Use %empty for empty rules.
	* src/print_graph.c (print_core): Ditto.
	* tests/conflicts.at, tests/output.at, tests/reduce.at: Adjust
	expectations.

2013-11-26  Akim Demaille  <akim@lrde.epita.fr>

	news: YYERROR vs variants

2013-11-18  Akim Demaille  <akim@lrde.epita.fr>

	style: scope reduction in lalr.cc
	* src/lalr.c: Shorten variable scopes.
	(lookahead_tokens_print): Use the same variable name in two loops
	iterating over the same structure.

2013-11-15  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: formatting changes
	* data/lalr1.cc: Fix indentation.

2013-11-15  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: fix the support of YYERROR with variants
	When variant are enabled, the yylhs variable (the left-hand side of
	the rule being reduced, i.e. $$ and @$) is explicitly destroyed when
	YYERROR is called.  This is because before running the user code, $$
	is initialized, so that the user can properly use it.

	However, when quitting yyparse, yylhs is also reclaimed by the C++
	compiler: the variable goes out of scope.

	Instead of trying to be too smart, let the compiler do its job: reduce
	the scope of yylhs to exactly the reduction.  This way, whatever the
	type of scope exit (regular, exception, return, goto...) this variable
	will be properly reclaimed.

	Reported by Paolo Simone Gasparello.
	<http://lists.gnu.org/archive/html/bug-bison/2013-10/msg00003.html>

	* data/lalr1.cc (yyparse): Reduce the scope of yylhs.
	* tests/c++.at: We now pass this test.

2013-11-15  Akim Demaille  <akim@lrde.epita.fr>

	tests: check $$'s destruction with variant, YYERROR, and no error recovery
	When variant are enabled, the yylhs variable (the left-hand side of
	the rule being reduced, i.e. $$ and @$) is explicitly destroyed when
	YYERROR is called.  This is because before running the user code, $$
	is initialized, so that the user can properly use it.

	However, when quitting yyparse, yylhs is also reclaimed by the C++
	compiler: the variable goes out of scope.

	This was not detected by the test suite because (i) the Object tracker
	was too weak, and (ii) the problem does not show when there is error
	recovery.

	Reported by Paolo Simone Gasparello.
	<http://lists.gnu.org/archive/html/bug-bison/2013-10/msg00003.html>

	* tests/c++.at (Exception safety): Improve the objects logger to make
	sure that we never destroy twice an object.
	Also track copy-constructors.
	Use a set instead of a list.
	Display the logs before running the function body, this is more
	useful in case of failure.
	Generalize to track with and without error recovery.

2013-11-15  Akim Demaille  <akim@lrde.epita.fr>

	tests: simplify useless obfuscation
	* tests/c++.at: $$ is not special for M4, there is no need to "escape"
	it.

2013-11-14  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: use better names when computing a "goto"
	* data/glr.c (yyLRgotoState): Name the symbol argument yysym, instead
	of yylhs.
	* data/lalr1.cc (yy_lr_goto_state_): Likewise.
	* data/lalr1.java (yy_lr_goto_state_): New, modeled after the previous
	two routines.
	Use it.

2013-11-12  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2013-11-12  Akim Demaille  <akim@lrde.epita.fr>

	version 3.0.1
	* NEWS: Record release date.

2013-11-12  Akim Demaille  <akim@lrde.epita.fr>

	aver: it is no longer "protected against NDEBUG"
	Apply the same rules for aver as for assert: no side effects,
	especially not important ones.

	* src/AnnotationList.c, src/muscle-tab.c: Adjust aver uses to resist
	to -DNDEBUG.

2013-11-08  Akim Demaille  <akim@lrde.epita.fr>

	parsers: rename YY_NULL as YY_NULLPTR to avoid conflicts with Flex
	Flex also defines YY_NULL (to 0).  Avoid gratuitous conflicts.

	* data/c.m4 (b4_null_define): Rename YY_NULL as YY_NULLPTR.

	* data/glr.c, data/lalr1.cc, data/location.cc, data/variant.hh,
	* data/yacc.c, src/parse-gram.c, tests/actions.at, tests/c++.at,
	* tests/cxx-type.at, tests/glr-regression.at, tests/headers.at,
	* tests/push.at, tests/regression.at:
	Adjust.

2013-11-05  Akim Demaille  <akim@lrde.epita.fr>

	build: use Automake 1.14's non-recursive Makefile features
	* configure.ac: Require Automake 1.14.
	* examples/calc++/local.mk, examples/local.mk, examples/mfcalc/local.mk,
	* examples/rpcalc/local.mk, tests/local.mk: Use %D% and %C%.

2013-11-05  Akim Demaille  <akim@lrde.epita.fr>

	build: restore maintainer-push-check
	* tests/local.mk: here.

2013-11-05  Akim Demaille  <akim@lrde.epita.fr>

	c++: use __attribute__((__pure__)) to avoid warnings
	Building C++ parsers with -Wsuggest-attribute=const and
	-Wsuggest-attribute=noreturn triggers warning in generated code.

	* data/lalr1.cc: Call b4_attribute_define.
	(debug_stream, debug_level): Flag as pure.
	* tests/headers.at (Several parsers): There are now more YY macros
	that "leak".

2013-11-05  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: update the handling of compiler attributes
	* data/c.m4 (b4_attribute_define): Instead of defining __attribute__,
	define YY_ATTRIBUTE conditionally.
	(YY_ATTRIBUTE_PURE, YY_ATTRIBUTE_UNUSED, _Noreturn): New.
	Use them.
	* data/glr.c: Use them.

2013-11-05  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2013-10-24  Akim Demaille  <akim@lrde.epita.fr>

	style: use /* ... */ comments
	* src/complain.c: Here.

2013-10-24  Akim Demaille  <akim@lrde.epita.fr>

	tests: skip C++ tests that are too demanding for some compilers
	Some tests now fail when compiled with G++ 4.3 or 4.4 on MacPorts.

	* tests/local.at (AT_SKIP_IF_EXCEPTION_SUPPORT_IS_POOR): New.
	* tests/c++.at (Exception safety): Use it.

2013-10-22  Akim Demaille  <akim@lrde.epita.fr>

	install: do not install yacc.1 when --disable-yacc
	* configure.ac (ENABLE_YACC): New conditional.
	(YACC_SCRIPT, YACC_LIBRARY): Remove.
	* lib/local.mk, src/local.mk: Use the former instead of the latter.
	* doc/local.mk: Use ENABLE_YACC to avoid installing yacc.1.

2013-10-22  Akim Demaille  <akim@lrde.epita.fr>

	style: avoid tabs
	* src/scan-code.l: here.

2013-10-22  Akim Demaille  <akim@lrde.epita.fr>

	c++: fix generated doxygen comments
	* configure.ac: Enable -Wdocumentation if supported.
	* data/lalr1.cc: Fix comments.

2013-10-22  Akim Demaille  <akim@lrde.epita.fr>

	fix: uniqstr are already pointers
	* src/uniqstr.c (uniqstr_assert): Remove incorrect double indirection,
	and now useless cast.

2013-10-22  Paul Eggert  <eggert@cs.ucla.edu>

	bison: pacify Sun C 5.12
	* src/scan-code.l (show_sub_message):
	Redo initializations to work around a bogus Sun C 5.12 warning.
	(parse_ref): Remove unreachable code that Sun C 5.12 complains about.
	* src/uniqstr.h (uniqstr_vsprintf): Use
	_GL_ATTRIBUTE_FORMAT_PRINTF (...)  instead of __attribute__
	((__format__ (__printf__, ...))).  Otherwise, Sun C 5.12
	complains about an unknown attribute.

2013-10-22  Paul Eggert  <eggert@cs.ucla.edu>

	maint: git now ignores rpcalc
	* examples/rpcalc/.gitignore: Ignore rpcalc.

2013-10-22  Paul Eggert  <eggert@cs.ucla.edu>

	build: examples/calc++/calc++ requires flex
	* configure.ac (FLEX_CXX_WORKS): New AM_CONDITIONAL.
	* examples/calc++/local.mk (examples/calc++/calc++):
	Build if FLEX_CXX_WORKS, not BISON_CXX_WORKS.

2013-10-22  Paul Eggert  <eggert@cs.ucla.edu>

	maint: mention help2man, texinfo, apt-get
	* README-hacking: Add help2man, texinfo.
	Describe how to add packages if you're using Debian.

2013-10-22  Paul Eggert  <eggert@cs.ucla.edu>

	maint: git now ignores .log and .trs files
	* .gitignore: Add *.log, *.trs.

2013-10-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix incorrect object construction
	Reported by Ken Moffat.
	http://lists.gnu.org/archive/html/bug-bison/2013-10/msg00009.html

	* tests/c++.at (Exception safety): Here.

2013-10-16  Akim Demaille  <akim@lrde.epita.fr>

	glr: allow spaces between "%?" and "{" in predicates
	Reported by Rici Lake.
	http://lists.gnu.org/archive/html/bug-bison/2013-10/msg00004.html
	http://stackoverflow.com/questions/19330171/

	* src/scan-gram.l: Do not try to be too smart when diagnosing invalid
	directives.
	* tests/glr-regression.at (Predicates): New test.

2013-10-16  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: "-Werror -Wno-error=foo" must not emit errors
	Currently "-Werror -Wno-error=foo" still turns "foo" warnings into errors.
	Reported by Alexandre Duret-Lutz.
	See http://lists.gnu.org/archive/html/bug-bison/2013-09/msg00015.html.

	* src/complain.c (errority, errority_flag): New.
	(complain_init): Initialize the latter.
	(warning_argmatch): Extract the loop iterating on the flag's bits.
	Set and unset errority_flag here.
	(warnings_argmatch): -Wno-error is not the same as -Wno-error=everything:
	we must remember if category foo was explicitly turned in an error/warning
	via -W(no-)error=foo.
	(warning_severity): Use errority_flag.

	* tests/input.at (Symbols): Just check --yacc, not -Wyacc, that's the
	job of tests on -W.
	(-Werror is not affected by -Wnone and -Wall): Rename as...
	(-Werror combinations): this.
	Tests more combinations of -W, -W(no-)error, and -W(no-)error=foo.
	* tests/local.at (AT_BISON_CHECK_WARNINGS): Don't expect -Werror
	to turn runs that issue warnings into runs with errors, as the
	warnings might be enforced as warnings by -Wno-error=foo, in which
	case -Werror does not change anything.

	* doc/bison.texi (Bison Options): Try to be clearer about how
	-W(no-)error and -W(no-)error=foo interact.

2013-10-16  Akim Demaille  <akim@lrde.epita.fr>

	comment changes
	* src/complain.h, src/complain.c: More documentation, more comments.

2013-10-04  Andreas Schwab  <schwab@linux-m68k.org>

	location: fix EOF check
	* location.c (location_caret): Use int, not char, for values from
	getc.

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	style: variant: remove empty line
	* data/variant.hh (b4_symbol_constructor_define_): Remove
	stray eol.

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	glr: more assertions
	* data/glr.c (yyaddDeferredAction, yyglrShiftDefer, yypdumpstack):
	More assertions.

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	glr: shorten scopes
	* data/glr.c (yyglrReduce): Define yyflag with its value.

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	glr: formatting changes
	* data/glr.c: here.

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	glr: better use of tracing macros
	* data/glr.c (yydestroyGLRState): Use YY_SYMBOL_PRINT instead of
	yy_symbol_print.

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	examples: improve the output of the "variant" example
	* examples/variant.yy: Improve the printing of lists.

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	variant: remove useless assertion
	* data/variant.hh (move): Remove precondition assertion which is
	ensured by the first call of the body (this precondition is also one
	of "build").

2013-09-19  Akim Demaille  <akim@lrde.epita.fr>

	tests: remove stray debugging traces
	* tests/atlocal.in: Remove traces.
	Be ready to remove conftest.dSYM generated on OS X.

2013-09-04  Akim Demaille  <akim@lrde.epita.fr>

	tests: do not use grep -q
	Reported by Daniel Galloway.
	http://lists.gnu.org/archive/html/bug-bison/2013-08/msg00020.html

	* tests/java.at: Ignore grep's output instead.

2013-08-25  Paul Eggert  <eggert@cs.ucla.edu>

	build: don't require flex for ordinary builds
	* configure.ac (LEX): Don't fail if this is lex, as flex is not
	required for ordinary builds.  Instead, issue a warning and
	substitute a no-op LEX.  Reported by Michael Felt in
	<http://lists.gnu.org/archive/html/bug-bison/2013-08/msg00009.html>.

2013-08-25  Paul Eggert  <eggert@cs.ucla.edu>

	maint: update .gitignore
	* .gitignore: Add *.eps, *.o, *.pdf, *.png, *.stamp, *~,
	.deps, .dirstamp.  Needed to suppress unwanted chatter from
	'git status' after a bootstrap build.

2013-08-24  Paul Eggert  <eggert@cs.ucla.edu>

	build: port to pre-5.8.7 perl
	* examples/local.mk (extract): Omit -f from perl options.
	This doesn't work with perl versions before 5.8.7
	that are configured without USE_SITECUSTOMIZE.
	Reported by Michael Felt in
	<http://lists.gnu.org/archive/html/bug-bison/2013-08/msg00006.html>.

2013-08-01  Akim Demaille  <akim@lrde.epita.fr>

	tests: minor change to make it easier to test other skeletons
	* tests/c++.at (Variants): Pass the skeleton as argument.

2013-08-01  Valentin Tolmer  <valentin.tolmer@gmail.com>

	uniqstr: fix assertion
	* src/uniqstr.c (uniqstr_assert): Really make sure str is a uniqstr,
	not just whether some uniqstr with the same content was registered.

2013-08-01  Akim Demaille  <akim@lrde.epita.fr>

	build: ship the ASCII art figures
	We don't ship the *.txt files that are used to build the info
	file.
	Reported by Colin Daley.

	* doc/figs/example.txt: New.
	* doc/local.mk (bison.info): Depend on the txt files.
	And ship them.

2013-08-01  Akim Demaille  <akim@lrde.epita.fr>

	doc: prefer the ".gv" extension to ".dot"
	See http://marc.info/?l=graphviz-devel&m=129418103126092 for the
	motivation (basically, some word processor now uses *.dot).

	* doc/figs/example-reduce.dot: Rename as...
	* doc/figs/example-reduce.gv: this.
	* doc/figs/example-shift.dot: Rename as...
	* doc/figs/example-shift.gv: this.
	* doc/figs/example.dot: Rename as...
	* doc/figs/example.gv: this.
	* doc/local.mk: Adjust.

2013-07-25  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2013-07-25  Akim Demaille  <akim@lrde.epita.fr>

	version 3.0
	* NEWS: Record release date.

2013-07-25  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-07-25  Akim Demaille  <akim@lrde.epita.fr>

	news: prepare 3.0
	* NEWS (3.0): Reorder.

2013-07-25  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix invalid assignment when using variants in C++11
	* tests/c++.at (Exception safety): In variant mode $$ is an instance
	of Object.  Assigning YY_NULL in C++98 is incorrect, but behaves ok,
	as it assigns YY_NULL=0 using Object::operator= (char v).  It is wrong
	in C++11 as there is operator for "$$ = nullptr".

2013-07-25  Akim Demaille  <akim@lrde.epita.fr>

	yacc: beware of "uninitialized uses" warnings
	Again some issues with the fact that yylval is reported by GCC as
	possibly not initialized in some cases.  Here, the case at hand is the
	%destructor.

	I am still not convinced that it is worth going all the trouble of
	using pragmas to disable temporarily some warnings, instead of just
	initializing the looking symbol once for all, but that's what Paul
	voted for, see
	<http://lists.gnu.org/archive/html/bison-patches/2012-10/msg00050.html>.

	* data/c.m4 (b4_attribute_define): Define
	YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN, YY_IGNORE_MAYBE_UNINITIALIZED_END,
	YY_INITIAL_VALUE here, as we will need them in the generation of the
	destructor function, which is defined in yacc.c before yyparse, which
	was in charge of defining these macros.
	* data/yacc.c (b4_declare_scanner_communication_variables): Simplify:
	trying to factor the definitions of the case pure and impure is
	too complex.
	Actually, it is not even clear that this macro should really exist,
	as even the calls are complex.
	Be careful not to issue a lone ";", as this is a statement, and C90
	forbids declarations after statements ; so write
	"YY_INITIAL_VALUE(Decl;)", not "YY_INITIAL_VALUE(Decl);".

2013-07-25  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2013-07-03  Akim Demaille  <akim@lrde.epita.fr>

	tests: skip C++ tests if we can't compile a simple program
	There are possible conflicts between gnulib replacement functions (in
	<stdio.h>) and their C++ wrappers (in <stream>).  Trying to address
	these in configure seems too hard, and I don't know how to fix the issue
	in gnulib.  Cowardly avoid the problem by skipping C++ tests when this
	happens.
	Reported by Stefano Lattarini.
	http://lists.gnu.org/archive/html/bug-bison/2013-06/msg00001.html

	* tests/atlocal.in (BISON_CXX_WORKS): Also set it to "skip" if we can't
	compile a simple program using <stream>.
	* tests/local.at: Comment changes.

2013-07-03  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix 'find' portability issues
	Reported by Stefano Lattarini.
	http://lists.gnu.org/archive/html/bug-bison/2013-06/msg00000.html

	* tests/output.at (AT_CHECK_OUTPUT): Use Perl instead.

2013-06-24  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2013-06-24  Akim Demaille  <akim@lrde.epita.fr>

	version 2.7.91
	* NEWS: Record release date.

2013-06-24  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: prepare for 2.7.91
	* NEWS (2.7.91): Java push parsers.

2013-06-24  Akim Demaille  <akim@lrde.epita.fr>

	java: rename YYMORE as YYPUSH_MORE for consistency with C
	http://lists.gnu.org/archive/html/bison-patches/2013-06/msg00008.html

	* data/lalr1.java, doc/bison.texi, tests/javapush.at:
	s/YYMORE/YYPUSH_MORE.

2013-06-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix Java push failure when running with BISON_USE_PUSH_FOR_PULL
	* tests/javapush.at (Trivial Push Parser with api.push-pull verification):
	When push for pull is enabled, there is one such function generated.

2013-06-21  Akim Demaille  <akim@lrde.epita.fr>

	style: minor changes in the Java tests
	* tests/java.at (AT_CHECK_JAVA_GREP): Ignore the exit status.
	* tests/javapush.at (AT_CHECK_JAVA_GREP): Be more alike the previous
	one.
	Formating changes.
	Remove stray debugging "jj" file.

2013-06-21  Akim Demaille  <akim@lrde.epita.fr>

	java: push: do not reset the error counter
	* data/lalr1.java (parse): here, when in push-pull is in "both" mode.
	This breaks the test suite, for instance
	make check TESTSUITEFLAGS='-d 388 BISON_USE_PUSH_FOR_PULL=1'.
	More generally make maintainer-push-check.

2013-06-14  Akim Demaille  <akim@lrde.epita.fr>

	build: add Valgrind suppression file for GNU/Linux
	* build-aux/linux-gnu.valgrind: New.
	* build-aux/local.mk: Ship it.
	* configure.ac: Use it.

2013-06-13  Dennis Heimbigner  <dmh@unidata.ucar.edu>

	java: add push-parser support
	* data/lalr1.java: Capture the declarations as m4 macros to avoid
	duplication.  When push parsing, the declarations occur at the class
	instance level rather than within the parse() function.

	Change the way that the parser state is initialized.  For
	push-parsing, the parse state declarations are moved to
	"push_parse_initialize()", which is called on the first invocation of
	"push_parse()". The %initial-action code is also inserted after the
	invocation of "push_parse_initialize()".

	The body of the parse loop is modified to return values at appropriate
	points when doing push parsing.  In order to make push parsing work,
	it is necessary to divide YYNEWSTATE into two states: YYNEWSTATE and
	YYGETTOKEN. On the first call to push_parse(), the state is
	YYNEWSTATE. On all later entries, the state is set to YYGETTOKEN. The
	YYNEWSTATE switch arm falls through into YYGETTOKEN. YYGETTOKEN
	indicates that a new token is potentially needed.  Normally, with a
	pull parser, this new token would be obtained by calling "yylex()". In
	the push parser, the value YYMORE is returned to the caller. On the
	next call to push_parse(), the parser will return to the YYGETTOKEN
	state and continue operation.

	* tests/javapush.at: New test file for java push parsing.
	* tests/testsuite.at: Use it.
	* tests/local.mk: Adjust.
	* doc/bison.texi (Java Push Parser Interface): New.

2013-06-11  Akim Demaille  <akim@lrde.epita.fr>

	build: ship all the files, even if the C++ compiler is broken
	* examples/calc++/local.mk: Be sure to ship calc++.test even if
	the current C++ compiler is not sufficient to run the tests.

2013-06-05  Dennis Heimbigner  <dmh@unidata.ucar.edu>

	style: comment changes in Java skeleton
	* data/lalr1.java: Here.

2013-06-03  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix a G++ warning
	* tests/c++.at: Use YY_NULL instead of 0 for the null pointer.
	And formatting changes.

2013-06-03  Akim Demaille  <akim@lrde.epita.fr>

	build: fix a warning from clang
	* src/muscle-tab.c: Declare local functions static.

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	version 2.7.90
	* NEWS: Record release date.

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	style: syntax-check fixes
	* data/yacc.c, src/Sbitset.c, src/Sbitset.h, src/muscle-tab.h,
	* src/output.c, src/parse-gram.y, src/reader.c, src/symtab.c,
	* src/uniqstr.c, src/uniqstr.h: Fix space before parens.
	* cfg.mk (_space_before_paren_exempt): Add needed exceptions.

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	xml: use %empty in the text output
	* data/xslt/xml2text.xsl: here.

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	build: locally disable new GCC warnings that fail on Flex generated code
	* configure.ac: here.

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	fix a memory leak
	* src/print-xml.c (num_escape_bufs): New.
	(print_xml): Be sure to release all the escape_bufs.

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-05-30  Akim Demaille  <akim@lrde.epita.fr>

	build: be sure to include config.h first in the generated parser
	Using %code for config.h is wrong, as some headers will already have
	been included by Bison.  In some cases, e.g., glibc's string.h, this
	results in some declaration not being made for lack of definition of
	_GNU_SOURCE, which is performed by config.h.

	* src/parse-gram.y: here.

2013-05-29  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  maint: post-release administrivia
	  version 2.7.1
	  regen

2013-05-29  Petr Machata  <pmachata@redhat.com>

	drop unused options --raw, -n, -e, --include and -I
	* --raw appears to be ignored.  It was marked as obsolete in the
	  commit ec3bc39, and documented as no longer supported as of 1.29
	  (2001-09-07).  Support for %raw appears to have been dropped in
	  e9955c83 on 2002-06-11, but --raw was kept around.  Maybe it's time
	  to drop it as well?

	* Commit e9955c83 dropped support for %no-parser as well, and
	  converted it to option.  --no-parser was later dropped in 728c4be2
	  on 2007-08-12, but -n was kept around, probably as an omission.  All
	  three are documented as removed since 2.3b (2008-05-27).

	* -e existed for a single day in 2001.  It was introduced in eeeb962b
	  on 2001-11-27.  The handling was removed in c7925b99 on 2001-11-28,
	  but "e" was kept in the list of short options.  Probably an
	  omission.

	* --include appears to be dead code.  The option sets a variable, but
	  that variable is not used anywhere.  It was added in f6bd5427 on
	  2001-11-26 as a %-directive, with comments that it's not yet
	  implemented.  It was converted to a command-line option later, but
	  doesn't seem to ever have been actually implemented.

2013-05-28  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2013-04-22  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: always point to the first directive
	Some directives cannot be used several times (e.g., a given symbol may
	only have a single printer).  In case of repeated definitions, an
	error is issued for the second definition, yet it is not discarded,
	and becomes the definition used for the rest of the file.

	This is not consistent with the idea that multiple definitions are not
	allowed: discard any repeated directive.

	* src/symtab.c (symbol_type_set, symbol_code_props_set)
	(semantic_type_code_props_set, symbol_class_set, symbol_translation):
	Discard repeated directives.
	* tests/input.at (Default %printer and %destructor redeclared)
	(Per-type %printer and %destructor redeclared): Update expectations.

2013-04-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: factor test for printer/desctructor redefined
	* tests/input.at (Default %printer and %destructor redeclared):
	Introduce AT_TEST to factor.

2013-04-22  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: use appropriate location for useless precedence/associativity
	* src/symtab.c (symbol_precedence_set): Use prec_location, not
	location (which is the first occurrence of the symbol, possibly just
	%token).
	Also, as redefinitions are not allowed, keep the first values, not
	the subsequent ones.
	* tests/conflicts.at, tests/existing.at, tests/regression.at: Adjust.

2013-04-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: factor duplicate expected warnings
	* tests/existing.at: Instead of "t ? abc : aBc", write "a(t?b:B)c".

2013-04-19  Akim Demaille  <akim@lrde.epita.fr>

	tests: enable -Wsign-compare and fix corresponding warnings
	-Wsign-compare was disabled for bison's own code, following gnulib's
	approach.  However, the generated parsers should not trigger such
	warnings.

	Reported by Efi Fogel.
	http://lists.gnu.org/archive/html/help-bison/2013-04/msg00018.html

	See also http://stackoverflow.com/questions/16101062 for the weird
	"-(unsigned)i" piece of code.

	* configure.ac (warn_tests): Enable -Wsign-compare.
	* data/location.cc (position::add_): New.
	(position::lines, position::columns): Use it.
	* tests/actions.at (AT_CHECK_PRINTER_AND_DESTRUCTOR): Fix signedness issues.

2013-04-18  Akim Demaille  <akim@lrde.epita.fr>

	muscle: check more cases of %define variables with code values
	* data/bison.m4 (b4_percent_define_check_kind): Fix overquotation.
	(api.location.type, api.position.type): Check they have code values here.
	* data/c++.m4 (api.location.type): No longer checked here.
	(parser_class_name): Check it here.
	* data/java.m4 (api.value.type, init_throws, lex_throws, parser_class_name)
	(throws, annotations, extends, implements): Check they have code values.
	* doc/bison.texi: Fix every incorrect occurrence of %define.
	Document the additional syntax for %define: code values.
	Document the additional syntax for -D/-F: string and code values.
	* tests/calc.at, tests/headers.at, tests/input.at, tests/java.at,
	* tests/local.at: Fix dependencies.

2013-04-18  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-04-18  Akim Demaille  <akim@lrde.epita.fr>

	parser: do not convert $ and @ in code values of %define variables
	* src/parse-gram.y (value: "{...}"): Just strip the braces, but pass
	the value as is.

2013-04-18  Akim Demaille  <akim@lrde.epita.fr>

	parser: no longer use the "braceless" non-terminal
	The purpose of this symbol was only to factor function calls.  As a
	result the actions were indeed simpler, but the grammar was somewhat
	uselessly obfuscated.  Get rid of this symbol, but introduce functions
	to simplify dependencies.

	There is no (intended) changes of behavior here.

	* src/parse-gram.y (strip_braces, translate_code(
	(translate_code_braceless): New.
	(braceless): Remove, use "{...}" instead, and one of the previous
	functions depending on the context.
	(STRING, "%{...%}", EPILOGUE): Declare as <code>, instead of <chars>,
	the difference between both is useless (well, I couldn't make sense of
	it, even after having read the initial commit that introduced them).
	(%union): Remove the now useless "chars" type.
	Adjust the printers.
	* src/scan-gram.l: Adjust.

2013-04-18  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-04-18  Akim Demaille  <akim@lrde.epita.fr>

	style: avoid %{...%} in our parser
	* src/parse-gram.y (%{...%}): Split in %code and %code requires.
	* src/location.h: Add missing includes for self containedness.

2013-04-18  Akim Demaille  <akim@lrde.epita.fr>

	style: use %code for local function declarations in our parser
	* src/parse-gram.y (version_check, gram_error, char_name, lloc_default):
	Move their prototypes from %{...%} to %code.
	(YYLLOC_DEFAULT, YY_LOCATION_PRINT): Move from %{...%} to %code.
	(current_lhs): Move its implementation to the epilogue.

2013-04-16  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-04-16  Akim Demaille  <akim@lrde.epita.fr>

	muscle: check the kind of api.prefix, api.location.type
	* data/bison.m4: Check api.prefix.
	* data/c++.m4: Check api.location.type.
	* doc/bison.texi: Fix uses of api.value.type, api.prefix, api.location.type.
	Document {...} values for %define.
	* src/parse-gram.y: Fix use of api.prefix.
	* tests/calc.at: Fix uses of api.location.type.
	* tests/input.at: Check api.prefix, and api.location.type.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	version 2.7.1
	* NEWS: Record release date.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: enforce definition syntax for keyword variables
	* src/muscle-tab.c (muscle_percent_define_get_kind)
	(muscle_percent_define_check_kind): New.
	(muscle_percent_define_default): Variables with a default value are
	of "keyword" kind.
	(muscle_percent_define_flag_if, muscle_percent_define_check_values):
	Check that the variable is of keyword kind.
	* data/bison.m4: Likewise, but in M4.  That is to say...
	(b4_percent_define_default): Define the kind when the variable is undefined.
	(b4_percent_define_check_kind): Use a better error message.
	(_b4_percent_define_check_values, _b4_percent_define_check_values):
	Former "enum" variables should be defined using the keyword syntax.
	* doc/bison.texi: Update.
	A couple of fixes.
	* tests/input.at (%define keyword variables): New.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: let -D/-F support the three kinds of %define variable values
	See http://lists.gnu.org/archive/html/bison-patches/2013-04/msg00012.html

	* src/getargs.c (getargs): Recognize {value} and "value" for -D and -F.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: minor refactoring
	* src/muscle-tab.c (muscle_percent_define_default): Reduce the scopes.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: minor simplification which uncovers a missing warning
	* src/muscle-tab.c (muscle_percent_define_ensure): Discover the virtues
	of || to factor conditionals.
	* NEWS: As api.pure is no longer flagged as "used" by accident,
	we now have warnings for useless definitions.
	* tests/calc.at: So remove api.pure settings when running C++ tests,
	since C++ skeletons use a pure interface.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: factor the field retrieval
	* src/muscle-tab.c (muscle_percent_define_get_raw): New.
	Use it where appropriate.
	(location_decode): No longer fetch the value from the table,
	take the value as argument.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: factor the handling of used variables
	* src/muscle-tab.c (muscle_percent_define_use): New, corresponding
	to b4_percent_define_use.
	Use it where appropriate.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: factor the computation of variable names
	* src/muscle-tab.c (muscle_name): New.
	Use it.
	Propagate "uniqstr" as value type instead of plain "char const *".

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: factor the kind check in M4
	* data/bison.m4 (b4_percent_define_check_kind): New.
	Use it to check api.token.prefix.
	* data/c++.m4: Check the kind of api.namespace.
	* doc/bison.texi: Update a reference to former 'namespace' variable.
	* tests/input.at ("%define" code variables): Check api.namespace.

2013-04-15  Akim Demaille  <akim@lrde.epita.fr>

	muscle: factor conditionals on defined %define variables
	* data/bison.m4 (b4_percent_define_ifdef_): New.
	Use it where appropriate.

2013-04-11  Akim Demaille  <akim@lrde.epita.fr>

	api.token.prefix: use code values
	* data/bison.m4: Remove useless (and incorrect: m4_* instead of b4_*)
	default assignment to api.token.prefix.
	Check that api.token.prefix is assigned code.
	* tests/input.at (%define code variables): New test.
	* NEWS, doc/bison.texi, tests/c++.at, tests/calc.at,
	* tests/java.at, tests/local.at: Adjust to use braces.

2013-04-11  Akim Demaille  <akim@lrde.epita.fr>

	c++: fix several issues with locations
	Reported by Daniel Frużyński.
	http://lists.gnu.org/archive/html/bug-bison/2013-02/msg00000.html

	* data/location.cc (position::columns, position::lines): Check for
	underflow.
	Fix some weird function signatures.
	(location): Accept signed integers as arguments where appropriate.
	Add operator- and operator+=.
	* doc/bison.texi (C++ position, C++ location): Various fixes
	and completion.
	* tests/c++.at (C++ Locations): New tests.

2013-04-11  Akim Demaille  <akim@lrde.epita.fr>

	muscles: be sure that %code snippets are not glue together on a single line
	Recently "braceless" in the parser was changed so that an eol was no
	longer added to the value.  This is not correct when a %code is used
	multiple times, because the syncline of the next snippet might be
	appended to the last (and not ended) line of the previous snippet.

	* src/muscle-tab.h (muscle_grow): Make it private.
	* src/muscle-tab.c (muscle_grow): Accept a fourth argument: a required
	terminator.
	Adjust callers.
	* tests/input.at (Multiple %code): New.

2013-04-11  Akim Demaille  <akim@lrde.epita.fr>

	style: fix comments
	* tests/actions.at: Fix incorrect "prototype".

2013-04-10  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  glr.cc: fix a clang warning
	  maint: update copyright years
	  build: fix VPATH issue
	  build: avoid clang's colored diagnostics in the test suite
	  tests: please clang and use ".cc", not ".c", for C++ input
	  gnulib: update
	  skeletons: avoid empty switch constructs
	  lalr1.cc: fix compiler warnings
	  yacc.c: do not use __attribute__ unprotected
	  tests: style changes

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	api.value.type: use keyword/brace values
	Suggested by Joel E. Denny.
	http://lists.gnu.org/archive/html/bison-patches/2013-03/msg00016.html

	* data/bison.m4 (b4_percent_define_get_kind): New.
	(b4_variant_flag): Check that api.value.type is defined as the 'variant'
	keyword value.
	* data/c.m4 (_b4_value_type_setup_keyword): New.
	(b4_value_type_setup): Use it to simplify reading.
	Use b4_define_silent.
	Decode api.value.type, including its type.
	(b4_value_type_define): Likewise.
	* data/c++.m4 (b4_value_type_declare): Adjust the decoding of api.value.type,
	taking its kind into account.
	* doc/bison.texi: Adjust all the examples to the new syntax.
	* NEWS: Ditto.
	* tests/types.at: Adjust

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	api.value.type: diagnose guaranteed failure with --yacc
	Instead of generating invalid C code, generate an error when --yacc and
	'%define api.value.type union' are used together.

	* data/bison.m4: Issue an error in this case.
	* tests/types.at (%yacc vs. %define api.value.type union): New, check this
	error.
	* doc/bison.texi (Type Generation): Document it.
	* tests/output.at: Check that '-o y.tab.c' and '-y' behave equally
	wrt generated file names.
	* NEWS (Use of YACC='bison -y'): New.
	Promote the use of 'bison -o y.tab.c'.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	doc: style changes
	* doc/bison.texi (Destructor Decl, Printer Decl): Group series of %token
	and %type together.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	doc: display locations in error as recommended by GNU Coding Standards
	* doc/bison.texi (Actions and Locations): here.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	doc: api.value.type union
	* doc/bison.texi (Type Generation): New section.
	(Multi-function Calc): Convert to use api.value.type=union.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	doc: move the section about "%union" where types are discussed
	* doc/bison.texi (Union Decl): Move to...
	(Defining Language Semantics): here.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	doc: deprecate #define YYSTYPE in favor of %define api.value.type
	* doc/bison.texi: Convert examples with YYSTYPE to use api.value.type.
	Deprecate YYSTYPE.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	value type: accept "->" in type tags
	Provide a means to dereference pointers when defining tags.  One
	example could be:

	  %code requires
	  {
	    typedef struct ListElementType
	    {
	      union value
	      {
	        int intVal;
	        float floatVal;
	        char* charptrVal;
	      } value;

	      struct ListElementType* next;
	    } ListElementType;
	  }

	  %union
	  {
	    ListElementType* list;
	  }

	  %token <list->value.charptrVal> STRING
	  %token <list->value.intVal> INTEGER
	  %token <list->value.floatVal> REAL
	  %type <list> ElementList LiteralType

	* src/scan-code.l, src/scan-gram.l: Accept "->" in tags.
	* tests/types.at: Add more test cases to cover this case.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	style: simplify the scanning of type tags
	* src/scan-gram.l: Remove the rule for simple tags: the "complex" case
	subsumes it.  It was more efficient, but duplicated the code for a
	negligible benefit.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	api.value.type: implement proper support, check, and document
	* data/c.m4 (b4_symbol_type_register, b4_type_define_tag)
	(b4_symbol_value_union, b4_value_type_setup_union)
	(b4_value_type_setup_variant, b4_value_type_setup):
	New.
	(b4_value_type_define): Use it to set up properly the type.
	Handle the various possible values of api.value.type.
	* data/c++.m4 (b4_value_type_declare): Likewise.
	* data/lalr1.cc (b4_value_type_setup_variant): Redefine.

	* tests/types.at: New.
	Exercise all the C/C++ skeletons with different types of
	api.value.type values.
	* tests/local.mk, tests/testsuite.at: Use it.

	* doc/bison.texi (%define Summary): Document api.value.type.
	* NEWS: Advertise it, together with api.token.constructor.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	m4: allow the definition of side-effect only macros
	* data/bison.m4 (b4_divert_kill, b4_define_silent): New.
	* data/c.m4: Comment change.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	variant: fix inconsistent quotation
	* data/variant.hh (b4_char_sizeof): De-overquote.
	(b4_value_type_declare): De-underquote.

2013-04-09  Akim Demaille  <akim@lrde.epita.fr>

	m4: style changes in error messages
	* data/bison.m4: Use $0 to denote the current macro's name.

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: fix a clang warning
	* data/glr.cc (b4_epilogue): Be sure to end with an end-of-line,
	so that the file does end with one.

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	maint: update copyright years
	Run "make update-copyright".

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	build: fix VPATH issue
	* Makefile.am (update-b4-copyright, update-package-copyright-year): Fix
	path to build-aux.

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	build: avoid clang's colored diagnostics in the test suite
	The syncline tests, which try to recognize compiler diagnostics,
	are confused by escapes for colors.

	* configure.ac (warn_tests): New, to factor the warnings for both
	C and C++ tests.
	Add -fno-color-diagnostics to it.
	* tests/local.at (AT_TEST_TABLES_AND_PARSE): Do not remove glue
	together compiler flags.

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	tests: please clang and use ".cc", not ".c", for C++ input
	When fed with foo.c, clang++ 3.2 answers:

	  clang: error: treating 'c' input as 'c++' when in C++ mode,
	                this behavior is deprecated

	* tests/output.at (AT_CHECK_OUTPUT_FILE_NAME): Use *.cc and *.hh
	for C++.

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: avoid empty switch constructs
	Reported by Rob Conde.
	http://lists.gnu.org/archive/html/bug-bison/2013-03/msg00003.html

	* data/c.m4 (b4_symbol_actions): Rename as...
	(_b4_symbol_actions): this.
	(b4_symbol_actions): New wrapper.
	Do not emit empty switches.
	Adjust all b4_symbol_actions callers.

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: fix compiler warnings
	Reported by Rob Conde.
	http://lists.gnu.org/archive/html/bug-bison/2013-03/msg00003.html

	* data/stack.hh (operator=, stack(const stack&)): Make this class
	uncopyable, i.e., "undefine" these operators: make them private and
	don't implement them.
	(clear): New.
	* data/lalr1.cc: Use it instead of an assignment.
	(parser): Make this class uncopyable.

2013-04-08  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: do not use __attribute__ unprotected
	Reported by Victor Khomenko.
	http://lists.gnu.org/archive/html/bug-bison/2013-04/msg00001.html

	* data/glr.c (YYUSE, __attribute__): Fuse their definition into...
	* data/c.m4 (b4_attribute_define): this new macro.
	* data/yacc.c, data/glr.c: Use it.

2013-04-05  Akim Demaille  <akim@lrde.epita.fr>

	api.namespace: demonstrate and use {...} values instead of "..." values
	* tests/c++.at, tests/input.at: Use "%define api.namespace {foo}" instead
	of using quotes.
	* tests/local.at (AT_SETUP_STRIP, AT_NAME_PREFIX): Recognize uses of
	braces instead of quotes.
	* doc/bison.texi: Use braces for api.namespace's values.

2013-04-05  Akim Demaille  <akim@lrde.epita.fr>

	grammar: do not add a \n at the end of blocks of code
	Now that we use "braceless" (which is {...} blocks of code with
	initial and final braces stripped) to denote "short" values (such as
	api.namespaces), the added end-of-line is a nuisance.  As a matter of
	fact, this extra-safety was useless, as every expansion of "braceless"
	(aka, "user code") is followed by an end of line.

	* src/parse-gram.y, src/parse-gram.c (braceless): Instead of replacing
	the final brace by \n, just delete the brace.

2013-04-04  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-04-04  Akim Demaille  <akim@lrde.epita.fr>

	grammar: record the kind of %define variable values
	Provide a means to tell the difference between "keyword" values (e.g.,
	%define api.pull both), "string" values (e.g., %define file.name
	"foo"), and "code" values (e.g., %define api.namespace {calc}).

	Suggested by Joel E. Denny.
	http://lists.gnu.org/archive/html/bison-patches/2013-03/msg00016.html

	* src/muscle-tab.h, src/muscle-tab.c (muscle_kind, muscle_kind_new)
	(muscle_kind_string): New.
	(muscle_percent_define_insert): Take the kind as new argument.
	Insert it in the muscle table.
	Adjust callers.
	* src/getargs.c: Adjust callers.
	* src/parse-gram.y: Ditto.
	(content.opt): Remove, replaced by...
	(value): this new non-terminal, whose semantics value is stored
	in the new "value" union member.
	Provide a printer.
	Support values in braces in additions to keyword and string values.

	fuse me

2013-04-04  Akim Demaille  <akim@lrde.epita.fr>

	style: fix comments
	* src/muscle-tab.c (muscle_percent_define_ensure): Update obsolete
	comments.

2013-04-04  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-04-04  Akim Demaille  <akim@lrde.epita.fr>

	grammar: style changes
	* src/parse-gram.y (PARAM_TYPE): Remove useless typedef guard.
	There's a header guard.
	Use 'yyo' with %printer.
	Use a consistent style for %union one-liners.

2013-04-04  Akim Demaille  <akim@lrde.epita.fr>

	grammar: split %union to group together related aspects
	* src/parse-gram.y (INT): Fuse the %type and %token declaration.
	Move its %union right before its introduction.
	(%union): Split in several %unions, right before their use.

2013-04-04  Akim Demaille  <akim@lrde.epita.fr>

	muscle: refactor
	* src/muscle-tab.c (muscle_lookup, muscle_entry_new): New.
	(muscle_insert, muscle_grow, muscle_find_const, muscle_find): Use them.

2013-04-03  Akim Demaille  <akim@lrde.epita.fr>

	style: comment changes
	* src/muscle-tab.c: Move the documentation of public functions to...
	* src/muscle-tab.h: here.
	Fix comment consistency issues.

2013-04-03  Akim Demaille  <akim@lrde.epita.fr>

	muscle: minor refactoring
	* src/muscle-tab.h (MUSCLE_INSERT_C_STRING): Use MUSCLE_INSERT_STRING.

2013-03-06  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-03-06  Valentin Tolmer  <nitnelave1@gmail.com>

	gram: correct token numbering in precedence declarations
	In a precedence declaration, when tokens are declared with a litteral
	character (e.g., 'a') or with a identifier (e.g., B), Bison behaved
	differently: the litteral tokens would be numbered first, and then the
	other ones, leading to the following grammar:

	  %right A B 'c' 'd'

	being numbered as such: 'c' 'd' A B.

	* src/parse-gram.y (symbol.prec): Set the symbol number when reading the
	symbols.
	* tests/conflicts.at (Token declaration order: literals vs. identifiers):
	New.

2013-03-04  Akim Demaille  <akim@lrde.epita.fr>

	maint: update autoconf submodule
	* submodules/autoconf: Up to master.
	No significant changes in the files we use (m4sugar.m4 and foreach.m4).

2013-03-04  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: no longer include the yacc category in -Wall
	It would be a pity to warn the users against Bison features...
	http://lists.gnu.org/archive/html/bison-patches/2013-02/msg00107.html

	* src/complain.h, src/complain.c (Wall): Disable Wyacc.
	(Weverything): New (hidden so far) category which really denotes all
	the categories (what used to be Wall).
	(warnings_args, warnings_types): Adjust.
	(warning_argmatch): Now !none = Weverything and conversely, no longer Wall.
	* NEWS, doc/bison.texi, src/getargs.c: Adjust the documentation.
	* tests/input.at (-Werror is not affected by -Wnone and -Wall): Adjust
	by not using a -Wyacc type of warning.

2013-03-04  Akim Demaille  <akim@lrde.epita.fr>

	grammar: no longer detect and cure missing semicolon at end of actions
	Bison 3.0 is already breaking backward compatibility with other
	features.  It is an appropriate time to drop this feature.  Note that
	it was disabled when --yacc is passed.  See
	http://lists.gnu.org/archive/html/bison-patches/2013-02/msg00102.html

	Basically, revert e8cd1ad655bcc704b06fb2f191dc3ac1df32b796.

	* src/scan-code.l (braces_level, need_semicolon, in_cpp): Remove.
	Remove every rule needed to detect and add missing semicolon.
	* tests/actions.at (Fix user actions without a trailing semicolon):
	Remove.
	* NEWS: Adjust.

2013-03-04  Akim Demaille  <akim@lrde.epita.fr>

	build: stop using bison -y
	* Makefile.am (YACC): Pass -o y.tab.c, so that ylwrap is happy, and
	yet we don't pass --yacc to bison.
	(AM_YFLAGS): Disable Yacc warnings.

2013-02-23  Akim Demaille  <akim@lrde.epita.fr>

	c++: rename b4_semantic_type_declare as b4_value_type_declare
	This is to match the names used in C and api.value.type, even if the
	parser actually defines semantic_type.

	* data/c++.m4 (b4_semantic_type_declare): Rename as...
	(b4_value_type_declare): this.
	* data/variant.hh: Likewise.

2013-02-23  Akim Demaille  <akim@lrde.epita.fr>

	news: typo
	* NEWS: here.

2013-02-23  Akim Demaille  <akim@lrde.epita.fr>

	style: space changes in the tests
	* tests/local.at: here.

2013-02-22  Akim Demaille  <akim@lrde.epita.fr>

	style: formatting changes in the doc
	* doc/bison.texi: Use @file where appropriate.

2013-02-19  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix invalid C++11 code
	* tests/c++.at (Object): Somehow instances of Object were assigned
	YY_NULL, which is 0 most of the time (that case passes), but is
	nullptr in C++11, and there is nothing in Object to support such an
	assignment (failure).  Use 0 as value, and provide the needed
	assignment operator.
	Also, use a more natural order within the class definition.

2013-02-19  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix failures with G++ 4.8 in Flex scanner
	* configure.ac (WARN_NO_NULL_CONVERSION_CXXFLAGS): Rename as...
	(FLEX_SCANNER_CXXFLAGS): this.
	Pass -Wno-zero-as-null-pointer-constant to G++ if it supports it.
	* examples/calc++/local.mk: Adjust.

2013-02-19  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-02-19  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2013-02-19  Akim Demaille  <akim@lrde.epita.fr>

	style: rename variant private members
	* data/variant.hh (buffer, tname, as_, raw, align_me): Rename as...
	(yybuffer_, yytname_,yyas_, yyraw, yyalign_me): these.

2013-02-19  Akim Demaille  <akim@lrde.epita.fr>

	style: space changes
	* data/variant.hh: Be sure to leave a space before arguments in function
	calls.

2013-02-19  Akim Demaille  <akim@lrde.epita.fr>

	variant: fix G++ 4.4 warnings
	The changes by Théophile Ranquet about type punning issues need
	to be extend to in-place new to please G++ 4.4.7.

	* data/variant.hh (variant::as_): New, factors the casts that avoid
	compiler warnings.
	(as, build): Use them.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	news: spell fixes
	* NEWS: here.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: factor and enhance messages about duplicate rule directives
	When reporting a duplicate directive on a rule, point to its first
	occurrence:

	one.y:11.10-15: error: only one %empty allowed per rule
	   %empty {} %empty
	             ^^^^^^
	one.y:11.3-8: previous declaration
	   %empty {} %empty
	   ^^^^^^

	And consistently discard the second one.

	* src/complain.h, src/complain.c (duplicate_directive): New.
	* src/reader.c: Use it where appropriate.
	* src/symlist.h, src/symlist.c (symbol_list): Add a dprec_location member.
	* tests/actions.at: Adjust expected output.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	style: no longer use backquotes
	* tests/actions.at, tests/atlocal.in, tests/c++.at, tests/calc.at,
	* tests/conflicts.at, tests/existing.at, tests/glr-regression.at,
	* tests/input.at, tests/java.at, tests/local.at, tests/sets.at,
	* tests/synclines.at, doc/bison.texi, lib/libiberty.h, lib/timevar.h:
	Use single quotes.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	style: no longer use backquotes
	* README, REFERENCES, TODO, configure.ac, data/README, data/bison.m4,
	* data/c++.m4, data/c.m4, data/java.m4, data/lalr1.cc,
	* data/lalr1.java, data/yacc.c, doc/local.mk, etc/bench.pl.in,
	* src/conflicts.c, src/files.c, src/getargs.c, src/gram.h, src/lalr.c,
	* src/location.c, src/location.h, src/muscle-tab.c, src/muscle-tab.h,
	* src/output.c, src/parse-gram.c, src/parse-gram.y, src/print-xml.c,
	* src/print.c, src/reader.c, src/reduce.c, src/scan-skel.l,
	* src/symtab.h, src/system.h, src/tables.c:
	Use single quotes, as currently recommended by the GNU Coding Standards.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	style: no longer use backquotes in messages
	* src/getargs.c (usage): Use single quotes.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	doc: use %empty instead of /* empty */
	* doc/bison.texi: Change the comments into explicit %empty.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	doc: introduce %empty and -Wempty-rule
	* doc/bison.texi (Grammar Rules): Make it a @section which
	contains...
	(Rules Syntax): this new subsection (with the previous contents of
	"Grammar Rules".
	(Empty Rules): New subsection, extracted from the former
	"Grammar Rules".
	Document %empty.
	(Recursion): New a subsection of "Grammar Rules".
	Complete a few index entries.
	(Bison Options): Document -Wempty-rule.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	report: use %empty to denote empty rules
	* src/gram.c (rule_rhs_print): Use %empty for empty rules.
	* tests/conflicts.at, tests/regression.at, tests/sets.at: Adjust.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: %empty enables -Wempty-rule
	* src/complain.h, src/complain.c (warning_is_unset): New.
	* src/reader.c (grammar_current_rule_empty_set): If enabled -Wempty-rule,
	if not disabled.
	* tests/actions.at (Implicitly empty rule): Check this feature.
	Also check that -Wno-empty-rule does disable this warning.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	-Wempty-rule: diagnose empty rules without %empty
	* src/complain.h, src/complain.c (warning_empty_rule, Wempty_rule):
	New warning category.
	(warnings_args, warnings_types): Adjust.
	* src/reader.c (grammar_rule_check): Check the empty rules are
	flagged by %empty.
	* tests/actions.at (Implicitly empty rule): New.
	* tests/existing.at: Add expected warnings.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	tests: use %empty
	* tests/actions.at, tests/input.at, tests/reduce.at,
	* tests/regression.at:
	here.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	parser: use %empty
	Avoid that Bison's own use of "bison -Wall" trigger warnings.

	* src/parse-gram.y: Use %empty for every empty rule.

2013-02-18  Akim Demaille  <akim@lrde.epita.fr>

	grammar: introduce %empty
	Provide a means to explicitly denote empty right-hand sides of rules:
	instead of

	  exp:  { ... }

	allow

	  exp: %empty { ... }

	Make sure that %empty is properly used.

	With help from Joel E. Denny and Gabriel Rassoul.
	http://lists.gnu.org/archive/html/bison-patches/2013-01/msg00142.html

	* src/reader.h, src/reader.c (grammar_current_rule_empty_set): New.
	* src/parse-gram.y (%empty): New token.
	Use it.
	* src/scan-gram.l (%empty): Scan it.
	* src/reader.c (grammar_rule_check): Check that %empty is properly used.
	* tests/actions.at (Invalid uses of %empty, Valid uses of %empty): New.

2013-02-16  Akim Demaille  <akim@lrde.epita.fr>

	getargs: minor simplification
	* src/getargs.c (flag_argmatch): Simplify the handling of "none".

2013-02-16  Akim Demaille  <akim@lrde.epita.fr>

	style: move argument handling of -W into the diagnostics module
	This allows to reduce the number of public interfaces.

	* src/getargs.c (--yacc): Use warning_argmatch instead of tweaking
	directly warnings_flag (which will be private).
	(warning_argmatch, warnings_argmatch): Move to...
	* src/complain.h, src/complain.c: here.

	* src/getargs.h, src/getargs.c (warnings_args, warnings_types): Move to...
	* src/complain.c: here, now private.

	* src/complain.h (severity, warnings_flag): Move to...
	* src/complain.c: here, now private.

2013-02-16  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: revamp the handling of -Werror
	Recent discussions with Joel E. Denny
	(http://lists.gnu.org/archive/html/bison-patches/2013-02/msg00026.html)
	show that it is desirable to tell the difference between an option
	that was explicitly disabled with -Wno-foo, as opposed to be left
	unset.  The current framework does not allow this.

	Instead of having a first int to store which options are enabled, and
	another to store which are turned into errors, use an array that for
	each warning category tells its status: disabled, unset, warning,
	error.

	* src/complain.h, src/complain.c (warning_bit): New enum.
	(warnings): Use it.
	(severity): New enum.
	(warnings_flag): Now an array of severity.
	(errors_flag): Remove, now done by warnings_flag.
	(complain_init): New function, to initialie warnings_flag.
	(warnings_are_errors): New Boolean, for -Werror.
	* src/complain.c (warning_severity): New.
	(warnings_print_categories, complains): Use it.
	* src/getargs.c (warning_argmatch): Adjust to use warnings_flag.
	(warnings_argmatch): Ditto.
	Handle -Werror and -Wno-error here.
	(getargs): Adjust.
	* src/main.c (main): Call complain_init.
	* tests/input.at (Invalid options): Add more corner cases.

2013-02-14  Akim Demaille  <akim@lrde.epita.fr>

	options: simplify the handling of -W
	* src/getargs.c (warnings_argmatch, warning_argmatch): Simplify by
	replacing function arguments with their actual values.
	(WARNING_ARGMATCH): Remove, useless.
	Adjust callers.

2013-02-14  Akim Demaille  <akim@lrde.epita.fr>

	options: don't accept "error=" for -f and -r
	* src/getargs.c (warning_argmatch, warnings_argmatch, WARNINGS_ARGMATCH):
	New.
	Use them for -W/--warning.
	They are copied from...
	(flag_argmatch, flags_argmatch, FLAGS_ARGMATCH): these.
	Simplify by removing the support for "error".
	* tests/input.at (Invalid options): New.
	* TODO (Laxism in Bison invocation arguments): Remove.

2013-02-14  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: factor the list of warning names
	* src/getargs.h, src/getargs.c (warnings_args, warnings_types): Make
	them public.
	* src/complain.h, src/complain.c (warnings_print_categories): Its
	only use outside complain.c was removed in a recent commit, so
	make it static.
	Simplify its implementation.
	Use warnings_args and warnings_types.
	* src/muscle-tab.c (muscle_percent_define_check_values): Make it
	silent.

2013-02-14  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: no longer pretty-print rules in error messages, carets suffice
	* src/gram.c (grammar_rules_useless_report): Let -fcaret handle the
	pretty-printing of the guilty rules.
	(rule_print): Inline in its only use.
	* tests/conflicts.at, tests/existing.at, tests/reduce.at,
	* tests/regression.at: Adjust.
	* NEWS: Document.

2013-02-14  Akim Demaille  <akim@lrde.epita.fr>

	options: no longer document warnings when diagnosing an invalid -W
	The argmatch functions accept prefixes of the alternatives (like
	getopt does for long options).  Bison uses this to document the
	warning categories.  This is troublesome: it duplicates the --help
	documentation, it is not gettextized, it is displayed with ugly quotes
	(because argmatch uses it to display the list of possible answers),
	and it prevents straighforward uses of the tables of valid warning
	categories (for instance so that warning diagnostics end with the name
	of the warning).

	The "hidden" option --trace uses the same trick, but it does not need
	to be translated, nor to be described in --help.

	* src/getargs.c (warnings_args): Remove pseudo documentation.
	Comment changes.

2013-02-11  Akim Demaille  <akim@lrde.epita.fr>

	tests: enlarge the allowed duration for calc tests
	Hydra "often" fails on this test:

	252. calc.at:658: 252. Calculator %glr-parser api.pure
	parse.error=verbose %debug %locations %defines api.prefix="calc"
	%verbose %yacc %parse-param {semantic_value *result}
	%parse-param {int *count} (calc.at:658): FAILED

	* tests/calc.at: Give 200s instead of 100s.
	Use AT_DEBUG_IF.

2013-02-11  Akim Demaille  <akim@lrde.epita.fr>

	debug: improve the display of symbol lists
	* src/symtab.c (symbol_print): Remove useless quotes (the symbol already
	has quotes).
	Prefer fputs.
	* src/symlist.c (symbol_list_syms_print): Likewise.
	Fix separators.

2013-02-09  Akim Demaille  <akim@lrde.epita.fr>

	style: minor changes
	* src/complain.c: Space changes.
	* src/reader.c: Comment changes.
	Avoid && in assertions.
	* src/location.c: Move comments to...
	* src/location.h: here.
	* src/symlist.h, src/symlist.c: Create a pseudo section for members
	that apply to the rule.

2013-02-08  Akim Demaille  <akim@lrde.epita.fr>

	news: restructure, document variants for C++
	* NEWS: here.

2013-02-08  Akim Demaille  <akim@lrde.epita.fr>

	c++: api.token.constructor requires api.value.type=variant
	Eventually it should also support "union".

	* data/glr.cc: Move this check to...
	* data/c++.m4: here, as lalr1.cc is affected too.

2013-02-05  Akim Demaille  <akim@lrde.epita.fr>

	build: restore C90 compatibility
	* src/parse-gram.y, src/parse-gram.c: Don't use // comments.

2013-02-05  Akim Demaille  <akim@lrde.epita.fr>

	doc: use @group to improve page breaking
	* doc/bison.texi: here.

2013-02-04  Akim Demaille  <akim@lrde.epita.fr>

	style: rename internal "stype" as "union_members" for clarity
	"stype" is quite unclear, and it also collides with the former %define
	variable that had the same name (replaced by api.value.type).

	* src/parse-gram.y (stype): Rename as...
	(union_members): this.
	* data/bison.m4: Adjust.
	(b4_user_stype): Rename as...
	(b4_user_union_members): this.
	* data/c++.m4, data/c.m4: Adjust.
	* src/parse-gram.c: regen.

2013-02-04  Akim Demaille  <akim@lrde.epita.fr>

	tests: improve the language independance layer
	* tests/local.at (_AT_LANG_DISPATCH): New, shamelessly stolen from
	Autoconf's _AT_LANG_DISPATCH.
	(AT_LANG_DISPATCH): New.
	(AT_YYERROR_FORMALS, AT_YYERROR_PROTOTYPE, AT_YYERROR_DECLARE_EXTERN)
	(AT_YYERROR_DECLARE, AT_YYERROR_DEFINE, AT_MAIN_DEFINE, AT_COMPILE)
	(AT_FULL_COMPILE):
	Use AT_LANG_DISPATCH instead of an ad hoc m4_case.

2013-02-04  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-02-04  Akim Demaille  <akim@lrde.epita.fr>

	style: space changes in the parser
	* src/parse-gram.y: Fix spaces.

2013-02-04  Akim Demaille  <akim@lrde.epita.fr>

	parser: use api.pure full
	* src/parse-gram.y: Use api.pure full instead of silly macro tricks.

2013-02-04  Akim Demaille  <akim@lrde.epita.fr>

	style: use a for loop instead of a while loop, and scope reduction
	* src/reader.c (packgram): Improve readability.
	The parser calls grammar_current_rule_end at the end of every rhs,
	which adds a NULL to separate the rules.  So there is no need to
	check whether "p" is non-null before proceeding.

2013-02-01  Theophile Ranquet  <ranquet@lrde.epita.fr>

	variants: stylistic change
	* data/variant.hh (tname): Respect the GNU Coding Standards for this
	pointer's declaration.

2013-02-01  Theophile Ranquet  <ranquet@lrde.epita.fr>

	grammar: free the association tracking graph
	The graph introduced by Valentin wasn't free'd after use.

	* src/symtab.c (assoc_free): New, clear the array of linked lists with...
	(linkedlist_free): This, new.
	(print_precedence_warnings): Call assoc_free when done.
	(print_assoc_warnings): Free used_assoc after use.

2013-02-01  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: use AT_FULL_COMPILE where possible
	* tests/c++.at (C++ Variant-based Symbol, Variants): Here.  Rename the
	generated input files to use .y instead of .yy, as a requirement for using
	AT_FULL_COMPILE instead of a combination of AT_BISON_CHECK and
	AT_BISON_COMPILE_CXX.

2013-02-01  Theophile Ranquet  <ranquet@lrde.epita.fr>

	variants: avoid type punning issue
	This is based on what is recommended by both Scott Meyers, in 'Effective
	C++', and Andrei Alexandrescu and Herb Sutter in 'C++ Coding Standards'.

	Use a static_cast on void* rather than directly use a reinterpret_cast,
	which can have nefarious effects on objects.  However, even though following
	this guideline is good practice in general, I am not quite sure how relevant
	it is when applied to conversions from POD to objects.  Actually, it might
	very well be the opposite: isn't this exactly what reinterpret_cast is for?
	What we really want *is* to transmit the memory map as a series of bytes,
	which, if I am correct, falls into the kind of "low level" hack for which
	this cast is meant.

	In any case, this silences the warning, which will be greatly appreciated by
	anyone using variants with a compiler supporting -fstrict-aliasing.

	* data/variant.hh (as): Here.
	* tests/c++.at (Exception safety, C++ Variant-based Symbols, Variants):
	Don't use NO_STRICT_ALIAS_CXXFLAGS (revert commit ddb9db15), as type punning
	is no longer an issue.
	* tests/atlocal.in, configure.ac (NO_STRICT_ALIAS_CXXFLAGS): Remove
	definition.
	* examples/local.mk (NO_STRICT_ALIAS_CXXFLAGS): Remove from AM_CXXFLAGS.
	* doc/bison.texi: Don't mention type punning issues.

2013-02-01  Theophile Ranquet  <ranquet@lrde.epita.fr>

	todo: update
	Reformulate and give more details on my thoughts concerning the graphical
	visualization, and add an entry about a bug in the options processing for
	warnings as errors.

	* TODO: Here.

2013-02-01  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-02-01  Akim Demaille  <akim@lrde.epita.fr>

	location: pass the location first
	* src/location.h, src/location.c (location_print): For consistency
	with other data structures and other location_* routines, pass the
	location argument first.
	* src/complain.c: Adjust.
	(location_caret): Likewise.
	* src/parse-gram.y: Adjust.

2013-02-01  Akim Demaille  <akim@lrde.epita.fr>

	symlist: use the right stream
	* src/symlist.c (symbol_list_syms_print): Use "f", not stderr.

2013-01-30  Akim Demaille  <akim@lrde.epita.fr>

	tests: put two related tests together
	* tests/conflicts.at (Useless associativity warning): Move next
	to "Useless precedence warning".

2013-01-30  Akim Demaille  <akim@lrde.epita.fr>

	news: name contributors
	* NEWS: here.

2013-01-30  Valentin Tolmer  <nitnelave1@gmail.com>

	warnings: introduce -Wprecedence
	The new warning category "precedence" flags useless precedence and
	associativity.  -Wprecedence can now be used, it is disabled by default.
	The warnings about precedence and associativity are grouped into one, and
	the testsuite was corrected accordingly.

	* src/complain.h (warnings): Introduce "precedence".
	* src/complain.c (warnings_print_categories): Adjust.
	* src/getargs.c (warnings_args, warning_types): Likewise.
	* src/symtab.h, src/symtab.c (print_associativity_warnings): Remove.
	* src/symtab.h (register_assoc): Correct arguments.
	* src/symtab.c (print_precedence_warnings): Print both warnings together.
	* doc/bison.texi (Bison options): Document the warnings and provide an
	example.
	* tests/conflicts.at, tests/existing.at, tests/local.at,
	* tests/regression.at: Adapt the testsuite for the new category
	(-Wprecedence instead of -Wother where appropriate).

2013-01-30  Akim Demaille  <akim@lrde.epita.fr>

	build: avoid clang's colored diagnostics in the test suite
	The syncline tests, which try to recognize compiler diagnostics,
	are confused by escapes for colors.

	* configure.ac (warn_tests): New, to factor the warnings for both
	C and C++ tests.
	Add -fno-color-diagnostics to it.
	* tests/local.at (AT_TEST_TABLES_AND_PARSE): Do not remove glue
	together compiler flags.

2013-01-30  Akim Demaille  <akim@lrde.epita.fr>

	build: please Clang++ 3.2+ on Flex scanners
	Clang++, with -Wall, rejects code generated by Flex (for C scanners):

	  CXX      examples/calc++/examples_calc___calc__-calc++-scanner.o
	  In file included from examples/calc++/calc++-scanner.cc:1:
	  error: implicit conversion of NULL constant to 'bool' [-Werror,-Wnull-conversion]
	  if ( ! ( (yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : __null) ) {
	       ~                                                                  ^~~~~~
	                                                                          false
	* configure.ac (WARN_NO_NULL_CONVERSION_CXXFLAGS): Compute it.
	* examples/calc++/local.mk (examples_calc___calc___CXXFLAGS): Use it.

2013-01-30  Valentin Tolmer  <nitnelave1@gmail.com>

	grammar: record used associativity and print useless ones
	Record which symbol associativity is used, and display useless ones.

	* src/symtab.h, src/symtab.c (register_assoc, print_assoc_warnings): New
	* src/symtab.c (init_assoc, is_assoc_used): New
	* src/main.c: Use print_assoc_warnings
	* src/conflicts.c: Use register_assoc
	* tests/conflicts.at (Useless associativity warning): New.

	Due to the new warning, many tests had to be updated.

	* tests/conflicts.at tests/existing.at tests/regression.at:
	Add the associativity warning in the expected results.
	* tests/java.at: Fix the java calculator's grammar to remove a useless
	associativity.
	* doc/bison.texi (mfcalc example): Fix associativity to remove
	warning.

2013-01-29  Valentin Tolmer  <nitnelave1@gmail.com>

	grammar: warn about unused precedence for symbols
	Symbols with precedence but no associativity, and whose precedence is
	never used, can be declared with %token instead.  The used precedence
	relationships are recorded and a warning about useless ones is issued.

	* src/conflicts.c (resolve_sr_conflict): Record precedence relation.
	* src/symtab.c, src/symtab.h (prec_nodes, init_prec_nodes)
	(symgraphlink_new, register_precedence_second_symbol)
	(print_precedence_warnings): New.
	Record relationships in a graph and warn about useless ones.
	* src/main.c (main): Print precedence warnings.
	* tests/conflicts.at: New.

2013-01-29  Theophile Ranquet  <ranquet@lrde.epita.fr>

	variants: remove the 'built' assertions
	When using %define parse.assert, the variants come with additional variables
	that are useful for development purposes. One is a Boolean indicating if the
	variant is built (to make sure we don't read a non-built variant), and the
	other is a string describing the stored type. There is no need to have both of
	these, the string is enough.

	* data/variant.hh (built): Remove.

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	style: indentation fixes
	* src/parse-gram.y: here.

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	maint: be sure to neutralize out-of-tree paths from our parser
	* tests/bison.in: Adjust to support fixed versions of ylwrap.

2013-01-29  Theophile Ranquet  <ranquet@lrde.epita.fr>

	m4: generate a basic_symbol constructor for each symbol type
	Recently, there was a slightly vicious bug hidden in the make_ functions:

	  parser::symbol_type
	  parser::make_TEXT (const ::std::string& v)
	  {
	    return symbol_type (token::TOK_TEXT, v);
	  }

	The constructor for symbol_type doesn't take an ::std::string& as
	argument, but a constant variant.  However, because there is a variant
	constructor which takes an ::std::string&, this caused the implicit
	construction of a built variant.  Considering that the variant argument
	for the symbol_type constructor was cv-qualified, this temporary variant
	was never destroyed.

	As a temporary solution, the symbol was built in two stages:

	  symbol_type res (token::TOK_TEXT);
	  res.value.build< ::std::string&> (v);
	  return res;

	However, the solution introduced in this patch contributes to letting
	the symbols handle themselves, by supplying them with constructors that
	take a non-variant value and build the symbol's own variant with that
	value.

	* data/variant.hh (b4_symbol_constructor_define_): Use the new
	constructors rather than building in a temporary symbol.
	(b4_basic_symbol_constructor_declare,
	b4_basic_symbol_constructor_define): New macros generating the
	constructors.
	* data/c++.m4 (basic_symbol): Invoke the macros here.

2013-01-29  Theophile Ranquet  <ranquet@lrde.epita.fr>

	c++: minor stylistic changes
	* data/c++m4: Remove useless comment lines.
	* data/variant.hh (self_type): Use this typedef instead of variant<S>.
	(b4_symbol_constructor_define_): Remove commented-out line, and stylistic
	change (avoid blank line).

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	c++: please G++ 4.8 with -O3: type puning issue
	* tests/c++.at (Exception safety): Now that this test covers
	variants, pass -fno-strict-aliasing to g++.

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	c++: please G++ 4.8 with -O3: array bounds
	* data/c++.m4, data/lalr1.cc (by_state, by_type): Do not use -1 to
	denote the absence of value, as GCC then fears that this -1 might
	be used to dereference arrays (such as yytname).
	Use 0, which corresponds to $accept, which is valueless (the needed
	property: the symbol destructor must not try to reclaim the memory
	associated with the symbol).

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	c++: use more explicit types than int
	* data/c++.m4 (b4_public_types_declare): Declare token_number_type soon.
	Introduce symbol_number_type (wider than token_number_type).
	Clarify the requirement that kind_type from by_state and by_type
	denote the _input_ type (required by the constructor), not the stored type.
	Use symbol_number_type and token_number_type where appropriate, instead
	of int.
	* data/lalr1.cc: Adjust to these changes.
	Propagate "symbol_number_type".
	Invoke "type_get ()" instead of read "type" directly.

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	c++: value_type -> kind_type
	* data/c++.m4, data/lalr1.cc (by_type, by_state): Rename 'value_type'
	as 'kind_type', as it is clearer.

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	c++: improve the signature of yysyntax_error_
	* data/lalr1.cc: This function is const.
	It takes a symbol_number_type.

2013-01-29  Akim Demaille  <akim@lrde.epita.fr>

	c++: style changes
	* data/lalr1.cc: Formatting changes.
	And name changes.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	doxygen: upgrade Doxyfile, and complete it
	* doc/Doxyfile.in: Let doxygen upgrade it.
	(INCLUDE_PATH): Point to lib too.
	(PROJECT_BRIEF): New.
	(EXCLUDE): Update to reflect the current file hierarchy.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix syntax-check issues
	* cfg.mk: Ignore strcmp in local.at.
	* tests/conflicts.at: Use AT_PARSER_CHECK.
	* tests/regression.at: Preserve the exit status of the generated parsers.

	* tests/local.mk ($(TESTSUITE)): Map @tb@ to a tabulation.
	* tests/c++.at, tests/input.at, tests/regression.at: Use @tb@.
	* cfg.mk: (space-tab): There are no longer exceptions.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: please C90 compilers
	* tests/actions.at, tests/conflicts.at: Use /* ... */ comments.
	Let "main" return a value.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	maint: update todo
	* TODO: Remove fixed items.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	news: minor improvements
	* NEWS: Name some more contributors.
	Restructure slightly.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: please clang and use ".cc", not ".c", for C++ input
	When fed with foo.c, clang++ 3.2 answers:

	  clang: error: treating 'c' input as 'c++' when in C++ mode,
	                this behavior is deprecated

	* tests/output.at (AT_CHECK_OUTPUT_FILE_NAME): Use *.cc and *.hh
	for C++.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: formatting changes
	* tests/local.at: Restore proper indentation.

2013-01-28  Theophile Ranquet  <ranquet@lrde.epita.fr>

	c++: better inline expansion
	Many 'inline' keywords were in the declarations.  They rather belong in
	definitions, so move them.

	* data/c++.m4 (basic_symbol, by_type): Many inlines here.
	* data/lalr1.cc (yytranslate_, yy_destroy_, by_state, yypush_, yypop_): Inline
	these as well.
	(move): Move the definition outside the struct, where it belongs.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: check that using variants is exception safe
	* tests/local.at: (Slightly) improve the regexp by escaping '.'
	when it denotes a point.
	(AT_VARIANT_IF): New.
	* tests/c++.at (Exception Safety): Run it for variants too.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: remove useless %defines
	Many tests were using %defines because C++ skeletons used to require
	it.

	* tests/actions.at, tests/c++.at, tests/input.at, tests/regression.at:
	Remove useless %defines.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	c++: remove now-useless operators
	Now that symbols behaves properly, we can eliminate special routines
	that are no longer needed.

	* data/c++.m4, data/glr.cc, data/lalr1.cc, data/variant.hh:
	Remove useless assignment operators and copy constructors.
	As a consequence, remove useless includes for "abort".

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: enable support for --debug
	* tests/c++.at (Variants): Here.
	And remove useless clutter when api.token.constructor is enabled.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	c++: revamp the support for variants
	The current approach was too adhoc: the symbols were not sufficiently
	self-contained, in particular wrt memory management.  The "new"
	guideline is the one that should have been followed from the start:
	let the symbols handle themslves, instead of leaving their users to
	it.  It was justified by the will to avoid gratuitious moves and
	copies, but the current approach does not seem to be slower, yet it
	will probably be simpler to adjust to support move semantics from
	C++11.

	The documentation says that the %parse-param are available from the
	%destructor.  In retrospect, that was a silly design decision, which
	we can break for variants, as its a new feature.  It should be phased
	out for non-variants too.

	* data/variant.hh: A variant never knows if it stores something or
	not, it is up to its users to store this information.
	Yet, in parse.assert mode, make sure the empty/filled variants
	are properly used.
	(b4_symbol_constructor_define_): Don't call directly the symbol
	constructor, to save a useless temporary.
	* data/stack.hh (push): Steal the pushed value instead of duplicating
	it.
	This will simplify the callers of push, who handled this "move"
	approach themselves.
	* data/c++.m4 (basic_symbol): Let -1, as kind, denote the fact that
	a symbol is empty.
	This is needed for instance when shifting the lookahead: yyla
	is given as argument to "push", and its value is then moved on
	the stack.  But then yyla must be declared "empty" so that its
	destructor won't be called.
	(basic_symbol::move): New.
	Move the responsibility of calling the destructor from yy_destroy
	to ~basic_symbol in the case of variants.
	* data/lalr1.cc (stack_symbol_type): Now a derived class from its
	previous value, so that we can add a constructor from a symbol_type.
	(by_state): State -1 means empty.
	(yypush_): Factor, by calling one overload from the other one, and
	using the new semantics of stack::push.
	No longer reclaim by hand the memory from rhs symbols, since now
	that we store objects with proper destructors, they will be reclaimed
	automatically.
	Conversely, be sure to delete yylhs.
	* tests/c++.at (C++ Variant-based Symbols): New "unit" test for
	symbols.

2013-01-28  Akim Demaille  <akim@lrde.epita.fr>

	c++: formatting and comment changes
	* data/c++.m4, data/lalr1.cc, data/stack.hh, data/variant.hh:
	Fix indentation.
	Fix some comments.

2013-01-27  Valentin Tolmer  <nitnelave1@gmail.com>

	tests: add token declaration order test
	* tests/conflicts.at: New test.

2013-01-27  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-01-27  Valentin Tolmer  <nitnelave1@gmail.com>

	grammar: preserve token declaration order
	In a declaration %token A B, the token A is declared before B, but in %left
	A B (or with %precedence or %nonassoc or %right), the token B was declared
	before A (tokens were declared in reverse order).

	* src/symlist.h, src/symlist.c (symbol_list_append): New.
	* src/parse-gram.y: Use it instead of symbol_list_prepend.
	* tests/input.at: Adjust expectations.

2013-01-25  Akim Demaille  <akim@lrde.epita.fr>

	tests: improve test group titles
	* tests/local.at (AT_SETUP_STRIP): AT_SETUP does not behave properly
	with new-lines in its argument.
	Remove them.
	Fix the handling of %define with quotes.

2013-01-25  Akim Demaille  <akim@lrde.epita.fr>

	c: no longer require stdio.h when locations are enabled
	Recent changes (in 2.7) introduced a dependency on both FILE and
	fprintf, which are "available" only in %debug mode.  This was to
	define yy_location_print_, which is used only in %debug mode by the
	parser, but massively used by the test suite to output the locations
	in yyerror.

	Break this dependency: the test suite should define its own routines
	to display the locations.  Eventually Bison will provide the user with
	a means to display locations, but not yet.

	* data/c.m4 (b4_yy_location_print_define): Use YYFPRINTF instead of
	fprintf directly.
	* data/yacc.c (b4_yy_location_print_define): Invoke it only in %debug
	mode, so that stdio.h is included (needed for FILE*), and YYFPRINTF
	is defined.

	* tests/local.at (AT_YYERROR_DECLARE, AT_YYERROR_DEFINE): Declare
	and define location_print and LOCATION_PRINT.

	* tests/actions.at, tests/existing.at, tests/glr-regression.at,
	* tests/input.at, tests/named-refs.at, tests/regression.at: Adjust
	to use them.
	Fix the expected line numbers (as the prologue's length has changed).

2013-01-25  Akim Demaille  <akim@lrde.epita.fr>

	c: minor simplification in the debug code
	* data/c.m4 (yy_symbol_print): Minor factoring.

2013-01-25  Akim Demaille  <akim@lrde.epita.fr>

	c++: display locations as C does
	See commit 3804aa260b956dd012adde3894767254422a5fcf.

	* data/location.cc (operator<<): Display location exactly as is
	done in C skeletons.
	* tests/local.at (AT_LOC_PUSHDEF, AT_LOC_POPDEF): Also define
	AT_FIRST_LINE, AT_LAST_LINE, AT_FIRST_COLUMN, AT_LAST_COLUMN.
	* tests/actions.at (Location Print): Also check C++ skeletons.

2013-01-25  Akim Demaille  <akim@lrde.epita.fr>

	tests: highlight empty right-hand sides
	* tests/actions.at, tests/c++.at, tests/headers.at,
	* tests/input.at: here.

2013-01-25  Akim Demaille  <akim@lrde.epita.fr>

	news: prepare for 2.8
	* NEWS: Restructure.
	Name contributors.

2013-01-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: generalize default main for api.namespace
	* tests/local.at (AT_NAME_PREFIX): Also match api.namespace.
	(AT_MAIN_DEFINE): Take it into account.
	* tests/c++.at, tests/headers.at: Use AT_NAME_PREFIX.
	(AT_CHECK_NAMESPACE): Rename as...
	(AT_TEST): this.

2013-01-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: improve factoring of the main function
	* tests/local.at (AT_MAIN_DEFINE): If %debug is used, check if
	-d/--debug is passed to the generated parser, and enable the traces.
	Return exactly the result of yyparse, so that we can check exit code
	2 too.
	* tests/actions.at, tests/glr-regression.at, tests/regression.at:
	Use AT_MAIN_DEFINE, helping AT_BISON_OPTION_PUSHDEFS where needed,
	preferably to option -t.

2013-01-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: factor the definition of main
	With Théophile Ranquet.

	* tests/local.at (AT_MAIN_DEFINE): New.
	(AT_YYERROR_DEFINE): Improve formatting.
	* tests/actions.at, tests/c++.at, tests/conflicts.at,
	* tests/glr-regression.at, tests/input.at, tests/regression.at,
	* tests/skeletons.at, tests/torture.at: Adjust.
	* tests/c++.at: Add missing %skeleton for a PUSHDEFS, and a missing
	PUSH/POPDEFS for another test.

2013-01-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: minor refactoring
	* tests/named-refs.at: Use AT_FULL_COMPILE where applicable.

2013-01-21  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: avoid useless caret stuttering
	* src/scan-code.l: When reporting a missing ending ';', don't display
	the guilty action twice.

2013-01-21  Theophile Ranquet  <ranquet@lrde.epita.fr>

	examples: please clang
	* doc/bison.texi (calc++-scanner.ll): Don't output useless yyinput function.

2013-01-21  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: better silencing of unused argument warnings
	input.yy:35:44: error: unused parameter 'msg' [-Werror,-Wunused-parameter]
	void yy::parser::error (std::string const& msg)
	                                           ^

	* tests/c++.at (C++ GLR parser identifier shadowing): Don't name unused
	argument, use YYUSE instead of a direct cast to void.

2013-01-21  Theophile Ranquet  <ranquet@lrde.epita.fr>

	bench: compatibility for Bison <= 2.7
	There used to be a bug in some skeletons, which caused the expansion of
	'yylval' and 'yylloc', generating these errors:

	input.cc:547:16: error: expected ',' or '...' before '(' token
	 #define yylval (yystackp->yyval)
	                ^
	input.yy:29:39: note: in expansion of macro 'yylval'
	 int yylex (yy::parser::semantic_type *yylval)
	                                       ^

	This bug is fixed by 'skel: better aliasing of identifiers', but a workaround
	is useful when benchmarking against older versions of Bison, which are still
	affected by the bug.

	* etc/bench.pl.in: Rename yylval to yylvalp and yylloc to yyllocp in base
	grammar 'list'.

2013-01-15  Theophile Ranquet  <ranquet@lrde.epita.fr>

	c++: remove useless inlines
	* data/c++.m4 (basic_symbol): Keep 'inline' in the prototypes, but don't
	duplicate it in the implementation.
	* data/variant.hh (variant): 'inline' is not needed when the implementation is
	provided in the class definition.

2013-01-15  Theophile Ranquet  <ranquet@lrde.epita.fr>

	c++: m4 stylistic change
	* data/c++.m4 (syntax_error): Fix the indentation of 'inline'.

2013-01-14  Theophile Ranquet  <ranquet@lrde.epita.fr>

	c++: silence warnings
	* data/c++.m4 (basic_symbol<Base>::operator=): Unused parameter.
	* tests/c++.at (C++ GLR parser identifier shadowing): Here too.
	-

2013-01-14  Theophile Ranquet  <ranquet@lrde.epita.fr>

	news: typos
	* NEWS: Fix a typo, use YYSTYPE rather than semantic_type.

2013-01-12  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-01-12  Akim Demaille  <akim@lrde.epita.fr>

	maint: update copyright years
	Suggested by Stefano Lattarini.
	Run "make update-copyright".

2013-01-12  Akim Demaille  <akim@lrde.epita.fr>

	build: fix VPATH issue
	* Makefile.am (update-b4-copyright, update-package-copyright-year): Fix
	path to build-aux.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	carets: document default activation
	* NEWS: Announce it.
	* doc/bison.texi: Adjust.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	carets: show them in more tests
	* tests/input.at, tests/named-refs.at: Here.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	carets: activate by default
	* src/getargs.c (feature_flag): Here.
	* tests/local.at (AT_BISON_CHECK_, AT_BISON_CHECK_NO_XML): Deactivate carets
	for the testsuite, by default.
	* tests/input.at: Adjust the locations for command line definitions.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	variants: document move and swap
	* data/variant.hh (swap): Doc.
	(build): Rename as...
	(move): This, more coherent naming with clearer meaning.
	* data/c++.m4 (move): Adjust.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	c++: privatize variant blind copies
	* data/variant.hh (variant, operator=): Make private.
	* data/c++.m4 (operator=): New, to avoid needing a definition of that operator
	for each class member (such as a possible variant).
	* data/glr.cc, data/lalr.cc: Add the necessary include for the abort.

2013-01-11  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: fix an unused argument issue
	* data/glr.c (yyuserAction): "Use" yyrhslen, as in variant mode, we might
	not use it.

2013-01-11  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: style changes
	* data/glr.c (yyuserAction): Use a size_t for sizes.

2013-01-11  Akim Demaille  <akim@lrde.epita.fr>

	c.m4: style fix
	* data/c.m4 (b4_parse_param_use): Add missing space before paren.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	skel: better aliasing of identifiers
	* data/glr.c, data/yacc.c: Avoid emitting useless defines.
	* data/glr.cc: Restore prefixes for epilogue.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	glr.cc: fatal if using api.token.ctor without variants
	* data/glr.cc: Here.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	skel: correctly indent switch cases
	* data/bison.m4 (b4_type_action_): Here.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	variants: assert changes
	* data/variant.hh (swap): More asserts can't hurt. Don't perform useless swaps.
	(build): Deactivate problematic asserts, pending further investigation.
	(variant): Prohibit copy construction.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	lalr1.cc: use a vector for the symbol stack
	* data/lalr1.cc: Adjust includes.
	* data/stack.hh (push, pop): Use push_back and pop_back.
	(operator []): Access vector from the end.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	lalr1.cc: change symbols implementation
	A "symbol" groups together the symbol type (INT, PLUS, etc.), its
	possible semantic value, and its optional location.  The type is
	needed to access the value, as it is stored as a variant/union.

	There are two kinds of symbols. "symbol_type" are "external symbols":
	they have type, value and location, and are returned by yylex.
	"stack_symbol_type" are "internal symbols", they group state number,
	value and location, and are stored in the parser stack.  The type of
	the symbol is computed from the state number.

	The class template symbol_base_type<Exact> factors the code common to
	stack_symbol_type and symbol_type.  It uses the Curiously Recurring
	Template pattern so that we can always (static_) downcast to the exact
	type.  symbol_base_type features value and location, and delegates the
	handling of the type to its parameter.

	When trying to generalize the support for variant, a significant issue
	was revealed: because stack_symbol_type and symbol_type _derive_ from
	symbol_base_type, the type/state member is defined _after_ the value
	and location.  In C++ the order of the definition of the members
	defines the order in which they are initialized, things go backward:
	the value is initialized _before_ the type.  This is wrong, since the
	type is needed to access the value.

	Therefore, we need another means to factor the common code, one that
	ensures the order of the members.

	The idea is simple: define two (base) classes that code the symbol
	type ("by_type" codes it by its type, and "by_state" by the state
	number).  Define basic_symbol<Base> as the class template that
	provides value and location support.  Make it _derive_ from its
	parameter, by_type or by_state.  Then define stack_symbol_type and
	symbol_type as basic_symbol<by_state>, basic_symbol<by_type>.  The
	name basic_symbol was chosen by similarity with basic_string and
	basic_ostream.

	* data/c++.m4 (symbol_base_type<Exact>): Remove, replace by...
	(basic_symbol<Base>): which derives from its parameter, one of...
	(by_state, by_type): which provide means to retrieve the actual type of
	symbol.
	(symbol_type): Is now basic_symbol<by_type>.
	(stack_symbol_type): Is now basic_symbol<by_state>.
	* data/lalr1.cc: Many adjustments.

2013-01-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	bench: add %b directive to use a specific Bison
	For example,
	  $ bench.pl -v '%s lalr1.cc & %d variant & ( %b ~/old-bison/bin/bison
	    | %b ~/new-bison/bin/bison )' -g list -i 10000

	* etc/bench.pl.in: Here.

2013-01-09  Akim Demaille  <akim@lrde.epita.fr>

	regen

2013-01-04  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-12-31  Akim Demaille  <akim@lrde.epita.fr>

	doc: use deffn to declare the list of %define variables
	* doc/bison.texi (%define Summary): Use @deffn instead of @table, it
	spares a lot of width, especially in PDF, and looks nicer in the other
	formats too.
	It is also more consistent with the rest of the document.

2012-12-31  Akim Demaille  <akim@lrde.epita.fr>

	doc: minor completion and fixes
	* doc/bison.texi (%define Summary): Provide more history to some
	variables.

2012-12-31  Akim Demaille  <akim@lrde.epita.fr>

	java: stype is obsoleted by api.value.type
	This is consistent with the other %define variable names.

	* data/java.m4: Use api.value.type instead of stype.
	* doc/bison.texi, NEWS: Document that change.
	* src/muscle-tab.c (muscle_percent_variable_update): Provide backward
	compatibility.
	* tests/java.at: Adjust.

2012-12-31  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix html build
	* doc/local.mk (bison.html): Fix dependencies.

2012-12-31  Akim Demaille  <akim@lrde.epita.fr>

	todo: remove erroneous task
	* tests/input.at: Check that there are no warnings about stray $ and @
	in the epilogue.
	* TODO: Remove the correponding task.

2012-12-31  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-12-28  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-12-28  Akim Demaille  <akim@lrde.epita.fr>

	syncline: one line is enough
	So far we were issuing two lines for each syncline change:

	  /* Line 356 of yacc.c  */
	  #line 1 "src/parse-gram.y"

	This is a lot of clutter, especially when reading diffs, as these
	lines change often.  Fuse them into a single, shorter, line:

	  #line 1 "src/parse-gram.y" /* yacc.c:356  */

	* data/bison.m4 (b4_syncline): Issue a single line.
	Comment improvements.
	(b4_sync_start, b4_sync_end): Issue a shorter comment.
	* data/c++.m4 (b4_semantic_type_declare): b4_user_code must be
	on its own line as it might start with a "#line" directive.

2012-12-28  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-12-28  Akim Demaille  <akim@lrde.epita.fr>

	maint: restore ANSI 89 compliance
	* data/bison.m4, src/conflicts.c, src/files.c, src/output.c,
	* src/symtab.c: Use /* ... */ comments only.
	Declare variables before statements.

2012-12-28  Akim Demaille  <akim@lrde.epita.fr>

	graph: minor simplification
	* src/gram.c (print_lhs): Use %*s to indent.
	* src/print_graph.c (print_lhs): Use obstack_printf.
	Became simple enough to be inlined in...
	(print_core): here.
	Use a "rule*" instead of an index in "rules[]".

2012-12-28  Akim Demaille  <akim@lrde.epita.fr>

	closure, gram: add missing const
	* src/closure.h, src/closure.c, src/gram.h, src/gram.c: Add some missing
	const where appropriate.

2012-12-27  Theophile Ranquet  <ranquet@lrde.epita.fr>

	carets: properly display when no line feed is present
	* src/location.c (location_caret): finish the line with one whether or not it
	is present in input. Rewrite code without getline.
	(cleanup_caret): Reset the caret_info global.
	* bootstrap.conf: No longer require getline.

2012-12-27  Theophile Ranquet  <ranquet@lrde.epita.fr>

	scanner: reintroduce unput for missing end tokens
	Unput was no longer used since a POSIX-compatiblity issue with Flex 2.5.31,
	which has been adressed in newer versions of Flex.  See this discussion:
	<http://lists.gnu.org/archive/html/bug-bison/2003-04/msg00029.html>

	This partially reverts commit aa4180418fff518198e1b0f2c43fec6432210dc7.

	* src/scan-gram.l (unexpected_end): Here.
	* tests/input.at: Adjust for new order of error reports.

2012-12-27  Akim Demaille  <akim@lrde.epita.fr>

	tables: scope reduction
	* src/tables.c (default_goto): Make it easier to understand.

2012-12-27  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-12-27  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: fix comments
	The commit 38de4e570fdc7c8db9633c3b2054e565d8c1c6b9 underquoted the
	content of the comments, which resulted in losing square brackets in
	the comments.  Besides, some other invocations were underquoting the
	effective arguments.

	* data/c.m4 (b4_comment_): Properly quote the comment.
	(b4_comment_, b4_comment): Move to...
	* data/c-like.m4: here, so that...
	* data/java.m4: can use it instead of its own copy.
	* data/bison.m4 (b4_integral_parser_tables_map): Fix some comments.

	* data/lalr1.cc, data/lalr1.java, data/yacc.c: Comment fixes.

	* data/lalr1.cc: Reorder a bit to factor some CPP directives.

2012-12-27  Akim Demaille  <akim@lrde.epita.fr>

	maint: which -> whose
	Apparently, I was confusing both.

	* data/bison.m4, data/c.m4, data/glr.c, data/lalr1.cc, data/yacc.c:
	Use "whose" where appropriate.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	tables: scope reduction
	* src/tables.c (matching_state): here.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	tables: scope reduction
	* src/tables.c (token_actions): here.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	tables: scope reduction
	* src/tables.c (save_row): here.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	tables: scope reduction
	* src/tables.c (save_column, pack_vector): Reduce the scope to
	emphasize the structure of the code.
	Rename the returned value "res" to make understanding easier.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	tables: use size_t where appropriate
	These changes aim at making the code easier to understand.

	* src/tables.c (tally): This is a size, always >= 0, so make it
	a size_t.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	tables: style changes
	* src/tables.c: Prefer < to >.
	Fix/complete some comments.
	Remove useless parens.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: no longer call yylex via a CPP macro
	The YYLEX existed only to support YYLEX_PARAM, which is now removed.
	This macro was a nuisance, since incorrect yylex calls where pointed
	the macro _use_, instead of its definition.

	* data/c.m4 (b4_lex_formals, b4_lex): New.
	* data/glr.c, data/yacc.c: Use it.
	* data/lalr1.cc (b4_lex): New.
	Use it.

	squash! skeletons: no longer call yylex via a CPP macro

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	YYLEX_PARAM: drop support
	* data/yacc.c, doc/bison.texi: Remove YYLEX_PARAM support.
	* NEWS: Document it.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	examples: minor improvements
	* examples/variant.yy: Don't use debug_stream(), obsoleted.
	Use <*>.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: factor comments about symbols
	* data/variant.hh (b4_char_sizeof_): Rename as...
	* data/bison.m4 (b4_symbol_tag_comment): this.
	Provide more documentation about b4_symbol_*.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	c: improve the definition of public types
	* data/c.m4 (b4_token_enum): Improve comments.
	(b4_value_type_define, b4_location_type_define): New, extracted
	from...
	(b4_declare_yylstype): here.
	Separate the typedefs from the union/struct definitions.

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	doc: update variant usage
	* doc/bison.texi, examples/variant.yy: Use "%define api.value.type variant",
	instead of "%define variant".

2012-12-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: check the "%define variant" is deprecated.
	* tests/input.at: Rename some AT_SETUP to avoid that
	AT_SETUP_STRIP thinks they contain %define directives.
	("%define" backward compatibility): Merge tests together
	to speed up the test suite, and to make maintenance easier
	(multiple AT_CHECK means multiple runs of the test suite to
	be sure to have updated all the error messages).
	Check the "%define variant" is properly obsoleted.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	%define variables: support value changes in deprecation
	* src/muscle-tab.c (define_directive): Be robust to "assignment"
	containing '='.
	(muscle_percent_variable_update): Upgrade "variant" to "api.value.type".
	Support such upgrade patterns.
	Adjust callers.

	* data/bison.m4: Use api.value.type for variants.
	* tests/c++.at: Adjust tests.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: treat obsolete %define variable names as obsolete directives
	Instead of

	  warning: deprecated %define variable name: 'namespace', use 'api.namespace' [-Wdeprecated]

	display (in -fno-caret mode):

	  warning: deprecated directive: '%define namespace foo', use '%define api.namespace foo' [-Wdeprecated]

	and (in -fcaret mode):

	  warning: deprecated directive, use '%define api.namespace toto' [-Wdeprecated]
	   %define namespace toto
	           ^^^^^^^^^

	This is in preparation of cases where not only the variable is
	renamed, but the values are too:

	  warning: deprecated directive: '%define variant', use '%define api.value.type variant' [-Wdeprecated]

	* src/muscle-tab.c (define_directive): New.
	(muscle_percent_variable_update): Take the value as argument, and use it
	in the diagnostics.
	Loop with a pointer instead of an index.
	* tests/input.at (%define backward compatibility): Adjust.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: factor the deprecated directive message
	* src/complain.h, src/complain.c (deprecated_directive): New.
	* src/muscle-tab.c: Use it.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	variant: produce stable results
	Improve the output by ensuring a well defined order for type switches.

	* src/uniqstr.h: Style changes for macro arguments.
	(UNIQSTR_CMP): Replace by...
	(uniqstr_cmp): this.
	* src/uniqstr.c (uniqstr_cmp): New.
	Produce well defined results.
	* src/output.c: Use it.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	uniqstr: formatting changes
	* src/uniqstr.h: Sort functions by object type.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: fix an error message
	* data/bison.m4 (b4_flag_if): Display the invalid value.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	tests: improve titles
	* tests/local.at (AT_SETUP_STRIP): New.
	(AT_SETUP): Use it to shorten the test titles: remove %defines, %language
	and %skeleton whose arguments suffice.
	* tests/synclines.at: Use more precise AT_SETUP.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	c++: comment changes
	* data/c++.m4, data/glr.cc, data/lalr1.cc: Convert some /* ... */
	comments to //.

2012-12-23  Akim Demaille  <akim@lrde.epita.fr>

	c++: use // comments in the output
	This is mostly used for the license header, the synclines, and the
	generated tables:

	-  /* STOS_[STATE-NUM] -- The (internal number of the) accessing
	-     symbol of state STATE-NUM.    */
	+  // STOS_[STATE-NUM] -- The (internal number of the) accessing
	+  // symbol of state STATE-NUM.
	   static const unsigned char yystos_[];

	* data/c.m4: Comment changes.
	(b4_comment_): Expand the text argument.
	Before this change, we were actually formatting M4 code as a
	C comment, and then expand it.
	(b4_comment): Fix the closing of comments: there is no reason to
	add the (line) prefix before the closing "*/".
	* data/c++.m4 (b4_comment): New.

2012-12-21  Akim Demaille  <akim@lrde.epita.fr>

	maint: disable sc_prohibit_test_backticks
	* cfg.mk: here.
	And fix typos.
	Reported by Stefano Lattarini.

2012-12-21  Akim Demaille  <akim@lrde.epita.fr>

	maint: more syntax-checks
	* cfg.mk (sc_prohibit_tab_based_indentation, sc_prohibit_test_backticks)
	(sc_preprocessor_indentation, sc_space_before_open_paren): New,
	stolen from Coreutils (2e9f5ca4ebbbdb6a9fa2dd3d5add3f7720a172d7).

2012-12-21  Akim Demaille  <akim@lrde.epita.fr>

	debug: no longer generate tabs
	* src/closure.c, src/derives.c, src/nullable.c, tests/sets.at: Use
	spaces.

2012-12-21  Akim Demaille  <akim@lrde.epita.fr>

	style changes: run cppi
	Run it in src/ for a start.

	* src/AnnotationList.h, src/InadequacyList.h, src/Sbitset.h,
	* src/closure.c, src/complain.h, src/flex-scanner.h, src/getargs.h,
	* src/gram.h, src/graphviz.h, src/ielr.h, src/location.h,
	* src/muscle-tab.h, src/named-ref.h, src/relation.h, src/scan-code.h,
	* src/state.h, src/symtab.h, src/system.h, src/uniqstr.h:
	Reindent preprocessor directives.

2012-12-21  Akim Demaille  <akim@lrde.epita.fr>

	style changes: untabify
	* data/xslt/xml2dot.xsl, data/xslt/xml2text.xsl, m4/flex.m4,
	* tests/glr-regression.at, tests/torture.at: here.

2012-12-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: be robust to set -e.
	* examples/test (run): here.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	variants: prohibit simple copies
	The "variant" structure provides a means to store, in a typeless way,
	C++ objects.  Manipulating it without provide the type of the stored
	content is doomed to failure.  So provide a means to copy in a type
	safe way, and prohibit typeless assignments.

	* data/c++.m4 (symbol_type::move): New.
	* data/lalr1.cc: Use it.
	* data/variant.hh (b4_variant_define): Provide variant::copy.
	Let variant::operator= abort.
	We cannot undefine it, yet, as it is still uses by the implicit
	assigment in symbols, which must also be disabled.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	variant: more assertions
	Equip variants with more checking code.  Provide a means to request
	includes.

	* data/variant.hh (b4_variant_includes): New.
	* data/lalr1.cc: Use it.
	* data/variant.hh (variant::built): Define at the end, as a private member.
	(variant::tname): New.
	Somewhat makes "built" useless, but let's keep both for a start, in
	case using "typeinfo" is considered unacceptable in some environments.
	Fix some formatting issues.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: fix output directives
	* data/lalr1.cc, data/location.cc, data/glr.cc: Use b4_output_begin.
	Broken during a merge.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: style changes
	* data/yacc.c (b4_lex_param): Provide arguments with a name.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: simplifying the handling of parse/lex params
	The fact that glr.cc uses glr.c makes the handling of parse params
	more complex, as the parser object of glr.cc must be passed to the
	parse function of glr.c.  Yet not all the functions need access to
	the parser object.

	* data/glr.cc (b4_parse_param_wrap): New.
	Use them.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	glr: rename lex params
	* data/glr.c (b4_lex_param): Rename as...
	(b4_lex_formals): this, for consistency.
	Provide arguments a name.
	(LEX): Adjust.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: move function declaration earlier
	* data/glr.c (yypstack, yypdumpstack): Declare earlier, to make
	it easier to call them from other functions.

2012-12-19  Akim Demaille  <akim@lrde.epita.fr>

	%define variables: backward compatibility
	* src/muscle-tab.c (muscle_percent_variable_update): Accept lex_symbol.
	Reported by Roland Levillain.

2012-12-16  Akim Demaille  <akim@lrde.epita.fr>

	diagnostics: improve -fcaret for list of accepted values
	Instead of

	  input.y:1.9-21: error: invalid value for %define variable 'api.push-pull': 'neither'
	   %define api.push_pull "neither"
	           ^^^^^^^^^^^^^
	  input.y:1.9-21:     accepted value: 'pull'
	   %define api.push_pull "neither"
	           ^^^^^^^^^^^^^
	  input.y:1.9-21:     accepted value: 'push'
	   %define api.push_pull "neither"
	           ^^^^^^^^^^^^^
	  input.y:1.9-21:     accepted value: 'both'
	   %define api.push_pull "neither"
	           ^^^^^^^^^^^^^

	report

	  input.y:1.9-21: error: invalid value for %define variable 'api.push-pull': 'neither'
	   %define api.push_pull "neither"
	           ^^^^^^^^^^^^^
	  input.y:1.9-21:     accepted value: 'pull'
	  input.y:1.9-21:     accepted value: 'push'
	  input.y:1.9-21:     accepted value: 'both'

	* src/complain.h (no_caret): New.
	* src/complain.c (error_message): Use it.
	* src/muscle-tab.c (muscle_percent_define_check_values): Use it.
	* src/scan-skel.l (flag): Ditto.
	* tests/input.at: Adjust and check.

2012-12-16  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: simplify the handling of default api.location.type
	* data/bison.m4 (b4_bison_locations_if): New.
	* data/glr.cc, data/lalr1.cc: Use it.

2012-12-16  Akim Demaille  <akim@lrde.epita.fr>

	tests: address syntax-check failures
	* cfg.mk: Ignore failures in timevar (uses GCC style configuration,
	not gnulib's).
	* doc/local.mk: Space changes.
	* lib/main.c, tests/calc.at: Remove useless HAVE_ tests.

2012-12-15  Akim Demaille  <akim@lrde.epita.fr>

	remove duplicate definitions
	* src/system.h: here, inherited from a merge.

2012-12-15  Akim Demaille  <akim@lrde.epita.fr>

	tests: style changes
	* tests/glr-regression.at: Issue yyerror before yylex.

2012-12-15  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix dependencies
	* doc/local.mk: here.

2012-12-14  Akim Demaille  <akim@lrde.epita.fr>

	doc: style fixes
	* doc/bison.texi: Add a couple of missing @var and @code.

2012-12-14  Theophile Ranquet  <ranquet@lrde.epita.fr>

	doc: fix build dependencies
	Suggested by Nick Bowler
	<http://lists.gnu.org/archive/html/bug-automake/2012-12/msg00001.html>

	* doc/local.mk: Avoid overwriting Automake's rules.

2012-12-14  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'origin/maint'
	* origin/maint:
	  maint: credit Wojciech Polak
	  maint: post-release administrivia
	  version 2.7
	  yacc.c: scope reduction
	  tests: C90 compliance
	  fix C90 compliance
	  glr.c: scope reduction
	  gnulib: update

2012-12-14  Theophile Ranquet  <ranquet@lrde.epita.fr>

	symtab: add missing initializations
	* src/symtab.c (semantic_type_new): Here.

2012-12-14  Theophile Ranquet  <ranquet@lrde.epita.fr>

	symtab: fix some leaks
	* src/symlist.c (symbol_list_free): Deep free it.
	* src/symtab.c (symbols_free, semantic_types_sorted): Free it too.
	(symbols_do, sorted): Call by address.

2012-12-14  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: remove use of PARSE_PARAM
	* tests/header.at: Here.

2012-12-13  Akim Demaille  <akim@lrde.epita.fr>

	maint: credit Wojciech Polak
	* NEWS, THANKS: He is the author of XML support (including XSLTs).

2012-12-12  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-12-12  Akim Demaille  <akim@lrde.epita.fr>

	version 2.7
	* NEWS: Record release date.

2012-12-12  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: scope reduction
	* data/yacc.c (yysyntax_error): here.

2012-12-12  Akim Demaille  <akim@lrde.epita.fr>

	tests: C90 compliance
	* tests/synclines.at: here.

2012-12-12  Akim Demaille  <akim@lrde.epita.fr>

	fix C90 compliance
	* data/glr.c, src/graphviz.h, src/ielr.c, src/scan-gram.l,
	* src/system.h, tests/actions.at, tests/glr-regression.at: Do not
	use // comments.
	Do not introduce variables after statements.
	Provide "main" with a return value.

2012-12-12  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: scope reduction
	* data/glr.c (yyreportSyntaxError): Reduce the scope of yysize1 (now
	yysz).

2012-12-12  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-12-10  Theophile Ranquet  <ranquet@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  news: prepare for forthcoming release
	  doc: explain how mid-rule actions are translated
	  error: use better locations for unused midrule values
	  doc: various minor improvements and fixes
	  tests: ignore more useless compiler warnings
	  tests: be robust to C being compiled with a C++11 compiler
	  build: beware of Clang++ not supporting POSIXLY_CORRECT
	  maint: post-release administrivia
	  version 2.6.90
	  build: fix syntax-check error.
	  cpp: simplify the Flex version checking macro
	  news: improve the carets example and fix a typo
	  cpp: improve the Flex version checking macro
	  carets: improve the code
	  maint: update news
	  build: keep -Wmissing-declarations and -Wmissing-prototypes for modern GCCs
	  build: drop -Wcast-qual
	  gnulib: update

2012-12-09  Akim Demaille  <akim@lrde.epita.fr>

	news: prepare for forthcoming release
	* NEWS: Fill paragraph.
	Reorder.
	Update examples.
	Remove line for 2.6.90.

2012-12-09  Akim Demaille  <akim@lrde.epita.fr>

	doc: explain how mid-rule actions are translated
	* doc/bison.texi (Actions in Mid-Rule): Mention and use named references.
	Split into three subsections, among which...
	(Mid-Rule Action Translation): this new section.

2012-12-09  Akim Demaille  <akim@lrde.epita.fr>

	error: use better locations for unused midrule values
	On

	  %%
	  exp: {;} {$$;} { $$ = $1; }

	instead of reporting (with -fcaret -Wmidrule-value)

	  midrule.y:2.6-8: warning: unset value: $$ [-Wmidrule-values]
	   exp: {;} {$$;} { $$ = $1; }
	        ^^^
	  midrule.y:2.6-27: warning: unused value: $2 [-Wmidrule-values]
	   exp: {;} {$$;} { $$ = $1; }
	        ^^^^^^^^^^^^^^^^^^^^^^

	report

	  midrule.y:2.6-8: warning: unset value: $$
	   exp: {;} {$$;} { $$ = $1; }
	        ^^^
	  midrule.y:2.10-14: warning: unused value: $2
	   exp: {;} {$$;} { $$ = $1; }
	            ^^^^^

	* src/reader.c (grammar_rule_check): When warning about the value of a
	midrule action, use the location of the midrule action instead of the
	location of the rule.
	the location of the part of the rule.
	* tests/actions.at (Default %printer and %destructor for mid-rule values):
	Adjust expectations
	* tests/input.at (Unused values with default %destructor): Ditto.
	(AT_CHECK_UNUSED_VALUES): Ditto.
	And use -fcaret.

2012-12-09  Akim Demaille  <akim@lrde.epita.fr>

	doc: various minor improvements and fixes
	* doc/figs/example.dot, doc/figs/example.y: New.
	* doc/bison.texi: Prefer "token" to TOKEN.
	Use @group where appropriate.
	Adjust with style changes in the output (State 0, not state 0).
	Fix some @ref that were missing the third argument.
	Fix some incorrect line numbers.
	Use "nonterminal", not "non-terminal".
	Fix overfull and underfull TeX hboxes.
	Put the comments in the index.
	Remove duplicate index entries.
	Fuse glossary entries where appropriate.
	(Understanding): Improve the continuity between sections.
	Use example.dot to show the whole graph.
	* doc/Makefile.am: Adjust.

2012-12-09  Akim Demaille  <akim@lrde.epita.fr>

	tests: ignore more useless compiler warnings
	* tests/synclines.at (AT_SYNCLINES_COMPILE): Ignore complains about
	using c++ to compile C.

2012-12-09  Akim Demaille  <akim@lrde.epita.fr>

	tests: be robust to C being compiled with a C++11 compiler
	* tests/glr-regression.at: Use YY_NULL instead of NULL.
	Comment changes.

2012-12-09  Akim Demaille  <akim@lrde.epita.fr>

	build: beware of Clang++ not supporting POSIXLY_CORRECT
	* m4/c-working.m4 (BISON_LANG_COMPILER_POSIXLY_CORRECT): New.
	(BISON_C_COMPILER_POSIXLY_CORRECT): Use it.
	For consistency with C++, also define BISON_C_WORKS.
	* m4/cxx.m4 (BISON_CXX_COMPILER_POSIXLY_CORRECT): New.
	* configure.ac: Use it.
	* tests/atlocal.in: Get its result.
	Propagate properly CXX values when used to compile C.
	When POSIXLY_CORRECT, adjust BISON_C_WORKS and BISON_CXX_WORKS.
	* tests/local.at (AT_COMPILE): Use BISON_C_WORKS.

2012-12-07  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-12-07  Akim Demaille  <akim@lrde.epita.fr>

	version 2.6.90
	* NEWS: Record release date.

2012-12-07  Akim Demaille  <akim@lrde.epita.fr>

	build: fix syntax-check error.
	* cfg.mk: Exclude names-refs, it includes a "double" if (end of first
	line, first of second line below).

	test.y:43.12-44.59:  symbol not found in production: if
	 if-stmt-a: IF expr[cond] THEN stmt.list[then] ELSE stmt.list[else] FI
	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2012-12-07  Theophile Ranquet  <ranquet@lrde.epita.fr>

	cpp: simplify the Flex version checking macro
	* src/flex-scanner,h (FLEX_VERSION): Consider YY_FLEX_SUBMINOR_VERSION
	defined.

2012-12-07  Theophile Ranquet  <ranquet@lrde.epita.fr>

	news: improve the carets example and fix a typo
	* NEWS: Here.

2012-12-07  Theophile Ranquet  <ranquet@lrde.epita.fr>

	cpp: improve the Flex version checking macro
	* src/flex-scanner.h (FLEX_VERSION): Here.

2012-12-07  Theophile Ranquet  <ranquet@lrde.epita.fr>

	carets: improve the code
	* src/location.c: Remove duplicate documentations.
	(caret_info): Stylistic change.
	(location_caret): Many reworks.

2012-12-07  Akim Demaille  <akim@lrde.epita.fr>

	maint: update news
	* NEWS: There is no 2.6.6, remove its stub.

2012-12-07  Akim Demaille  <akim@lrde.epita.fr>

	build: keep -Wmissing-declarations and -Wmissing-prototypes for modern GCCs
	Fixes a -Werror failure of xalloc.h used in src.
	From Eric Blake.
	http://lists.gnu.org/archive/html/bug-gnulib/2012-12/msg00006.html

	* configure.ac: Check whether GCC pragma diagnostic push/pop works.
	Enable these warnings for bison if it does.
	Enable these warnings for the test suite anyway.

2012-12-07  Akim Demaille  <akim@lrde.epita.fr>

	build: drop -Wcast-qual
	Suggested by Jim Meyering.
	http://lists.gnu.org/archive/html/bug-gnulib/2012-12/msg00017.html
	* configure.ac (warn_common): Remove -Wcast-qual.

2012-12-07  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-12-06  Theophile Ranquet  <ranquet@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  misc: pacify the Tiny C Compiler
	  cpp: make the check of Flex version portable
	  misc: require getline
	  c++: support wide strings for file names
	  doc: document carets
	  tests: enhance existing tests with carets
	  errors: show carets
	  getargs: add support for --flags/-f

2012-12-06  Theophile Ranquet  <ranquet@lrde.epita.fr>

	misc: pacify the Tiny C Compiler
	* src/graphviz.c (conclude_red): Remove a useless return.

2012-12-05  Theophile Ranquet  <ranquet@lrde.epita.fr>

	cpp: make the check of Flex version portable
	This was problematic with tcc 0.9.25

	* src/flex-scanner.h (FLEX_VERSION_GT): Rewrite and rename as...
	(FLEX_VERSION): This.

2012-12-05  Theophile Ranquet  <ranquet@lrde.epita.fr>

	misc: require getline
	* bootstrap.conf: Here, used by src/location.c.
	* src/getargs.c (long_options): Rename --flags to --feature.

2012-12-05  Akim Demaille  <akim@lrde.epita.fr>

	c++: support wide strings for file names
	Reported by Mark Boyall.
	http://lists.gnu.org/archive/html/help-bison/2011-08/msg00002.html

	* data/location.cc (operator<<): Be templated on the type of
	output stream.
	* tests/headers.at (Several parsers): Adjust.

2012-12-05  Theophile Ranquet  <ranquet@lrde.epita.fr>

	doc: document carets
	* NEWS: Announce it.
	* doc/bison.texi (Bison Options):  Here.

2012-12-05  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: enhance existing tests with carets
	* tests/actions.at: Unset value.
	* tests/conflicts.at: Rule useless due to conflicts.
	* tests/input.at: Missing terminator, unexpected end of file, command line
	redefinition of variable.
	* tests/named-refs.at: Many errors.
	* tests/reduce.at: Useless nonterminals and rules.
	* tests/regression.at: Large token.

2012-12-05  Theophile Ranquet  <ranquet@lrde.epita.fr>

	errors: show carets
	* src/locations.c (caret_info): New, persistant information useful
	for...
	(location_caret): New, print a caret.
	(cleanup_caret): Release caret_info cleanly, call it...
	* src/main.c (main): Here.
	* src/complain.c (error_message): Call location_caret here.

2012-12-05  Theophile Ranquet  <ranquet@lrde.epita.fr>

	getargs: add support for --feature/-f
	Introduce -fdiagnostics-show-caret

	* src/getargs.c (feature_flag): New global.
	* src/getargs.h (feature): New enum.

2012-12-05  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  getargs: don't label --language/-l as experimental
	  getargs: fix the locations of command-line input
	  errors: indent missing action code semicolon warning

2012-12-04  Theophile Ranquet  <ranquet@lrde.epita.fr>

	getargs: don't label --language/-l as experimental
	* NEWS: Announce it.
	* doc/bison.texi, src/getargs.c (usage): Here.

2012-12-03  Akim Demaille  <akim@lrde.epita.fr>

	tests: minor improvements
	* tests/calc.at (AT_CHECK_SPACES): To speed up, accept several files
	at once, and factor some calls.

2012-12-03  Theophile Ranquet  <ranquet@lrde.epita.fr>

	getargs: fix the locations of command-line input
	* src/getargs.c (command_line_location): Here.
	* tests/input.at: Adjust.

2012-12-03  Theophile Ranquet  <ranquet@lrde.epita.fr>

	errors: indent missing action code semicolon warning
	Also, remove a duplicate #define.

	* src/scan-code.l (SC_RULE_ACTION): Here.
	* tests/actions.at: Adjust.

2012-12-03  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  parser: accept #line NUM
	  m4: use a safer pattern to enable/disable output
	  tests: beware of gnulib's need for config.h
	  gnulib: update
	  yacc.c, glr.c: check and fix the display of locations
	  formatting changes
	  glr.c: remove stray macro

2012-12-03  Akim Demaille  <akim@lrde.epita.fr>

	parser: accept #line NUM
	* src/scan-gram.l (scanner): Accept '#line NUM'.
	(handle_syncline): Adjust to the possible missing file name.

2012-12-03  Akim Demaille  <akim@lrde.epita.fr>

	m4: use a safer pattern to enable/disable output
	Work on some other areas of Bison revealed that some macros expanded
	to be expanded only once were actually expanded several times.  This
	was due to the fact that changecom was not properly restored each
	time, and macro names appearing in comments were then expanded.

	Introduce begin/end macros which are easier to match that
	changecom()/changecom(#).

	* data/bison.m4 (b4_output_begin, b4_output_end): New.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/lalr1.java,
	* data/location.cc, data/stack.hh, data/yacc.c:
	Use them.

2012-12-03  Akim Demaille  <akim@lrde.epita.fr>

	tests: beware of gnulib's need for config.h
	* tests/skeletons.at, tests/torture.at: Be sure to include config.h
	where appropriate.

2012-11-30  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update
	* lib/yyerror.c: Include config.h since the following stdio.h might be
	from gnulib.

2012-11-30  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c, glr.c: check and fix the display of locations
	In some case, negative column number could be displayed.
	Make YY_LOCATION_PRINT similar to bison's own implementation of
	locations.  Since the macro is getting fat, make it a static
	function.
	Reported by Jonathan Fabrizio.

	* data/c.m4 (yy_location_print_define): Improve the implementation,
	and generate the yy_location_print_ function.
	Adjust YY_LOCATION_PRINT.
	* tests/actions.at (Location Print): New tests.

2012-11-30  Akim Demaille  <akim@lrde.epita.fr>

	formatting changes
	* data/c.m4: Fix comments, put macros in a more natural order.
	Space changes (from M-x whitespace-cleanup).
	* src/location.c: Fix spaces.
	* tests/actions.at: Space changes.

2012-11-30  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: remove stray macro
	* data/glr.c (YYOPTIONAL_LOC): Remove, unused since commit
	769a8ef9bcb5e14d0be9d0869f5dca20ab093930.

2012-11-29  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  doc: minor fixes
	  doc: improve the index
	  doc: introduce api.pure full, rearrange some examples
	  yacc.c: support "%define api.pure full"
	  local.at: improvements

2012-11-29  Akim Demaille  <akim@lrde.epita.fr>

	doc: minor fixes
	* doc/bison.texi: Use stderr for error messages.
	Meta-variables are usually spelled in lower case.
	Use @code for function names.

2012-11-29  Akim Demaille  <akim@lrde.epita.fr>

	doc: improve the index
	* doc/bison.texi: Fix uses of "deffn" so that the arguments of the
	directives do not show in the index.
	Remove a duplicate entry for api.pure.

2012-11-29  Theophile Ranquet  <ranquet@lrde.epita.fr>

	doc: introduce api.pure full, rearrange some examples
	* NEWS: Add entry.
	* doc/bison.texi (%define Summary): Show the old Yacc behaviour.
	(Parser Function): Move parse-param examples here.
	(Pure Calling): Remove parse-param examples.
	(Error Reporting): Don't show the old behavior, stick to 'full'.

2012-11-29  Theophile Ranquet  <ranquet@lrde.epita.fr>

	yacc.c: support "%define api.pure full"
	This makes the interface for yyerror() pure without the need for a spurious
	parse_param.

	* data/yacc.c (b4_pure_if, b4_pure_flag): New definition, accept three states.
	(b4_yacc_pure_if): Rename as...
	(b4_yyerror_arg_loc_if): This, and use b4_pure_flag.
	* tests/actions.at (%define api.pure): Modernize.
	* test/calc.at (Simple LALR Calculator): Modernize.
	* tests/local.at (AT_YYERROR_ARG_LOC_IF): Adjust.

2012-11-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: check variants without locations
	* tests/c++.at (Variants): Support non-use of locations, and
	check its support.

2012-11-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	local.at: improvements
	* tests/local.at (AT_YYERROR_FORMALS): Make llocp const.
	(AT_PURE_AND_LOC_IF, AT_GLR_OR_PARAM_IF): Remove, expand...
	(AT_YYERROR_ARG_LOC_IF): Here, and use m4_join for readability.

2012-11-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: use -fno-strict-aliasing with variants
	Reported by Théophile Ranquet.

	* configure.ac (NO_STRICT_ALIAS_CXXFLAGS): New.
	* tests/c++.at, tests/atlocal.in, examples/local.mk: Use it.

2012-11-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: remove leftover
	* tests/atlocal.in: Remove duplicate handling of --compile-c-with-cxx.

2012-11-26  Akim Demaille  <akim@lrde.epita.fr>

	doc: use %precedence instead of nonassoc when associativity is not wanted
	* doc/bison.texi: here.
	Formatting changes in some grammars.
	Fix a %prec into %precedence.

2012-11-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  yacc.c: always initialize yylloc
	  scanner: issue a single error for groups of invalid characters
	  tests: formatting changes
	  doc: one of the fixes for an ambiguous grammar was ambiguous too
	  doc: fix the dangling else with precedence directives
	  doc: prefer "token" to TOKEN
	  doc: formatting changes
	  scanner: use explicit "ignore" statements

2012-11-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/branch-2.6' into maint
	* origin/branch-2.6:
	  yacc.c: always initialize yylloc
	  doc: one of the fixes for an ambiguous grammar was ambiguous too
	  doc: fix the dangling else with precedence directives
	  doc: prefer "token" to TOKEN
	  doc: formatting changes

2012-11-23  Theophile Ranquet  <ranquet@lrde.epita.fr>

	yacc.c: always initialize yylloc
	The initial location might be used if the parser starts by an empty
	reduction, so really ensure proper initialization of the initial
	location.  The previous approach fails for PostgreSQL, which uses
	Reported by Peter Eisentraut.
	http://lists.gnu.org/archive/html/bug-bison/2012-11/msg00023.html
	With help from Théophile Ranquet.

	* data/yacc.c (b4_declare_scanner_communication_variables): Be sure
	to initialize yylloc, even when its structure is unknown.
	(yyparse): Simplify the call to b4_dollar_pushdef.
	* tests/actions.at (Initial location): Check of similar pattern
	as in the case of PostgreSQL.

2012-11-23  Akim Demaille  <akim@lrde.epita.fr>

	scanner: issue a single error for groups of invalid characters
	* src/scan-gram.l: Scan groups of invalid characters together.
	* tests/input.at, tests/named-refs.at: Adjust.

2012-11-23  Akim Demaille  <akim@lrde.epita.fr>

	tests: formatting changes
	* tests/named-refs.at: Here.

2012-11-23  Akim Demaille  <akim@lrde.epita.fr>

	doc: one of the fixes for an ambiguous grammar was ambiguous too
	Reported by Аскар Сафин.
	http://lists.gnu.org/archive/html/bug-bison/2012-11/msg00024.html

	* doc/bison.texi (Reduce/Reduce): Fix the resulting ambiguity using
	precedence/associativity directives.

2012-11-22  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix the dangling else with precedence directives
	* doc/bison.texi (Non Operators): New node.
	(Shift/Reduce): Point to it.
	Don't promote "%expect n" too much.

2012-11-22  Akim Demaille  <akim@lrde.epita.fr>

	doc: prefer "token" to TOKEN
	This is more readable in short examples.

	* doc/bison.texi (Shift/Reduce): here.
	Make "win" and "lose" action more alike.

2012-11-22  Akim Demaille  <akim@lrde.epita.fr>

	doc: formatting changes
	* doc/bison.texi: Use @group.

2012-11-14  Akim Demaille  <akim@lrde.epita.fr>

	scanner: use explicit "ignore" statements
	* src/scan-gram.l: here.

2012-11-13  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  tests: close files in glr-regression
	  xml: match DOT output and xml2dot.xsl processing
	  xml: factor xslt space template
	  graph: fix a memory leak
	  xml: documentation
	  output: capitalize State

2012-11-12  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: close files in glr-regression
	* tests/glr-regression.at: Here.

2012-11-12  Theophile Ranquet  <ranquet@lrde.epita.fr>

	xml: match DOT output and xml2dot.xsl processing
	Make the DOT produced by XSLT processing equivalent to the one made with the
	--graph option.

	* data/xslt/xml2dot.xsl: Stylistic changes, and add support for reductions.
	* doc/bison.texi (Xml): Update.
	* src/graphviz.c (conclude_red): Minor stylistic changes to DOT internals.
	(output_red): Swap enabled and disabled reductions output, for coherence
	with XSLT output.
	* src/print_graph.c (print_core): Minor stylistic change to States' output.
	(print_actions): Swap order of output for reductions and transitions.
	* tests/local.at (AT_BISON_CHECK_XML): Ignore differences in order.
	* tests/output.at: Adjust to changes in DOT internals.

2012-11-12  Theophile Ranquet  <ranquet@lrde.epita.fr>

	xml: factor xslt space template
	* data/xslt/bison.xsl (space): New, import from...
	* data/xslt/xml2text.xsl: Here.

2012-11-12  Theophile Ranquet  <ranquet@lrde.epita.fr>

	graph: fix a memory leak
	* src/graphviz.c (output_red): Here.

2012-11-12  Theophile Ranquet  <ranquet@lrde.epita.fr>

	xml: documentation
	The XML output combined with the XSL Transformations provided in data/ are
	incredibly useful, they should be documented.

	* doc/bison.texi (Xml): New node.

2012-11-12  Theophile Ranquet  <ranquet@lrde.epita.fr>

	output: capitalize State
	* src/print.c (print_state): Here.
	* tests/conflicts.at, tests/existing.at, tests/local.at, tests/reduce.at,
	tests/regression.at, tests/sets.at: Adjust.

2012-11-12  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix syntax-check errors
	Reported by Théophile Ranquet.

	* tests/c++.at: Use AT_PARSER_CHECK.
	Avoid using "strcmp", which triggers an error from syntax-check.

2012-11-12  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  maint: address syntax-check errors.
	  tests: use valgrind where appropriate
	  tests: use valgrind where appropriate
	  tests: don't expect $EGREP to support -w
	  tests: more possible error compiler messages for "#error"

2012-11-12  Akim Demaille  <akim@lrde.epita.fr>

	maint: address syntax-check errors.
	* cfg.mk: Ignore the "error" call in tests/c++.at, it is not to be
	translated.
	* doc/bison.texi: Fix incorrect @pxref use.
	* po/POTFILES.in: Add missing file.
	* src/print_graph.c: Remove useless include.

2012-11-12  Akim Demaille  <akim@lrde.epita.fr>

	tests: use valgrind where appropriate
	Reported by Théophile Ranquet.

	* cfg.mk (sc_at_parser_check): New.
	* tests/c++.at: Fix use of AT_CHECK vs. AT_PARSER_CHECK.

2012-11-12  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/branch-2.6' into maint
	* origin/branch-2.6:
	  tests: use valgrind where appropriate
	  tests: don't expect $EGREP to support -w

2012-11-10  Akim Demaille  <akim@lrde.epita.fr>

	tests: use valgrind where appropriate
	Reported by Théophile Ranquet.

	* tests/glr-regression.at: Rewrite some test cases so that AT_PARSER_CHECK,
	which runs valgrind, is exposed with the parser, not with "echo".
	* tests/local.at, tests/regression.at, tests/headers.at:
	Use AT_PARSER_CHECK for generated parsers.

2012-11-08  Akim Demaille  <akim@lrde.epita.fr>

	tests: don't expect $EGREP to support -w
	Does not work on Solaris 10.  Reported by Dennis Clarke.
	http://lists.gnu.org/archive/html/bug-bison/2012-11/msg00009.html
	* tests/headers.at (Several parsers): Use Perl instead.
	While at it, run it only once, on all the generated headers.
	Adjust to YY_NULL be defined in position.hh.

2012-11-08  Akim Demaille  <akim@lrde.epita.fr>

	tests: more possible error compiler messages for "#error"
	* tests/synclines.at (AT_SYNCLINES_COMPILE): Adjust for Clang.
	Verified with GCC 4.0, 4.2 to 4.8, and Clang 2.9, 3.2: none skip.

2012-11-08  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-11-08  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* origin/maint:
	  regen
	  maint: post-release administrivia
	  version 2.6.5
	  regen
	  tests: syntax-check
	  tests: beware of compilers that do not support POSIXLY_CORRECT
	  gnulib: update

2012-11-08  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-11-08  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'branch-2.6' into maint
	* origin/branch-2.6:
	  maint: post-release administrivia
	  version 2.6.5
	  regen
	  tests: syntax-check
	  tests: beware of compilers that do not support POSIXLY_CORRECT
	  gnulib: update

2012-11-07  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-11-07  Akim Demaille  <akim@lrde.epita.fr>

	version 2.6.5
	* NEWS: Record release date.

2012-11-07  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-11-07  Akim Demaille  <akim@lrde.epita.fr>

	tests: syntax-check
	* tests/actions.at: Fix typo.

2012-11-07  Akim Demaille  <akim@lrde.epita.fr>

	tests: beware of compilers that do not support POSIXLY_CORRECT
	Running "maintainer-release-check" on OS X with Clang 2.9 fails,
	because "clang-mp-2.9 -o test -g test.c" launches "/usr/bin/dsymutil
	test -o test.dSYM" which fails with "error: unable to open executable
	'-o'".

	* m4/c-working.m4 (BISON_CHECK_WITH_POSIXLY_CORRECT)
	(BISON_C_COMPILER_POSIXLY_CORRECT): New.
	* configure.ac: Use the latter.
	* tests/atlocal.in (POSIXLY_CORRECT_IS_EXPORTED): New.
	* tests/local.at (AT_BISON_CHECK_WARNINGS_): Use it instead of computing its
	value each time.
	(AT_QUELL_VALGRIND): Skip tests that cannot work because of compilers
	that do not support POSIXLY_CORRECT.

2012-11-07  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint: (24 commits)
	  tests: calc: modernize the use of locations
	  tests: remove useless location initializations
	  lalr1.cc: always initialize yylval.
	  tests: check that C and C++ objects can be linked together.
	  yacc.c: also disable -Wuninitialized.
	  glr.cc, yacc.c: initialize yylloc properly
	  yacc.c, glr.c: a better YY_LOCATION_PRINT
	  yacc.c: simplify initialization
	  doc: formatting changes
	  c++: fix position operator signatures
	  tests: remove useless location initialization.
	  tests: fix locations in C
	  tests: handle %parse-param in the generated yyerror
	  tests: simplifications
	  grammars: fix display of nul character in error message
	  tests: sort
	  tests: cosmetic changes
	  comment changes
	  autoconf: update
	  gnulib: update
	  ...

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'branch-2.6' into maint
	* origin/branch-2.6: (24 commits)
	  tests: calc: modernize the use of locations
	  tests: remove useless location initializations
	  lalr1.cc: always initialize yylval.
	  tests: check that C and C++ objects can be linked together.
	  yacc.c: also disable -Wuninitialized.
	  glr.cc, yacc.c: initialize yylloc properly
	  yacc.c, glr.c: a better YY_LOCATION_PRINT
	  yacc.c: simplify initialization
	  doc: formatting changes
	  c++: fix position operator signatures
	  tests: remove useless location initialization.
	  tests: fix locations in C
	  tests: handle %parse-param in the generated yyerror
	  tests: simplifications
	  grammars: fix display of nul character in error message
	  tests: sort
	  tests: cosmetic changes
	  comment changes
	  autoconf: update
	  gnulib: update
	  ...

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	tests: calc: modernize the use of locations
	* tests/calc.at: Don't initialize the location, let the parser
	do it.
	Use a $printer.
	Change some testing input to be easier to distinguish (instead of always
	"0 0" for instance).

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	tests: remove useless location initializations
	* tests/actions.at, tests/calc.at: here.

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: always initialize yylval.
	* data/lalr1.cc: here.

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	tests: check that C and C++ objects can be linked together.
	* tests/local.at (AT_SKIP_IF_CANNOT_LINK_C_AND_CXX): New.
	* tests/headers.at (Several parsers): Use it.

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: also disable -Wuninitialized.
	* data/yacc.c (YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN): For some versions
	of GCC, -Wmaybe-uninitialized alone does not suffice.

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc, yacc.c: initialize yylloc properly
	There are several issues to address here.  One is that yylloc should
	be initialized when possible.  Another is that the push parser needs
	to update yypushed_loc when the user modified it.  And if the parser
	starts by a reduction of an empty, it uses the first location on the
	stack, which, therefore, must also be initialized to this initial
	location.

	This is getting complex, especially since because initializing a
	global (impure interface) is different from initializing a local
	variable.  To simplify, the local yylloc is not initialized during its
	definition.

	* data/c.m4 (b4_yyloc_default_define): Replace by...
	(b4_yyloc_default): this.
	Adjust dependencies.
	* data/glr.cc: Initialize yylloc.
	* data/yacc.c (b4_declare_scanner_communication_variables):
	Initialize yylloc during its definition.
	Don't define yyloc_default.
	(yypush_parse): The location formal is not const, as we might
	initialize it.
	(yyparse): Define yyloc_default.
	Use it before running the user initial action.
	Possibly update the first location on the stack, and the pushed
	location after the user initial action.
	* tests/actions.at (Initial locations): Check that the initial
	location is correct.

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c, glr.c: a better YY_LOCATION_PRINT
	* data/c.m4 (b4_yy_location_print_define): New.
	Now issues "short" locations, e.g., "1.1" instead of "1.1-1.1".
	Was initially a function, but then we face "static but unused"
	warnings.
	Simpler as a macro.
	* tests/local.at, data/glr.c, data/yacc.c: Use it instead of duplicating.
	* tests/actions.at: Adjust expectations.

2012-11-06  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: simplify initialization
	* data/yacc.c: Fuse the initializations of yyssp, yyss and the like.
	Remove an obsolete comment: we do initialize these initial stack
	members (in some cases).

2012-11-05  Akim Demaille  <akim@lrde.epita.fr>

	doc: formatting changes
	* doc/bison.texi: In a pointer type.

2012-11-05  Akim Demaille  <akim@lrde.epita.fr>

	c++: fix position operator signatures
	* data/location.cc (operator+=, operator-=): Remove const from return
	type.

2012-11-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: remove useless location initialization.
	* tests/glr-regression.at: here.
	glr.c does initialize yylloc.

2012-11-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix locations in C
	* tests/local.at (AT_YYERROR_DEFINE): Don't display the end of the location
	if it is not after its beginning.
	* tests/actions.at, tests/cxx-type.at: Adjust the expected output.

2012-11-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: handle %parse-param in the generated yyerror
	* tests/local.at (AT_PARSE_PARAMS): New.
	(AT_YYERROR_FORMALS, AT_YYERROR_DEFINE): Use it to add the parse-param
	to yyerror.
	* tests/calc.at, tests/regression.at: Use AT_YYERROR_DEFINE and
	AT_YYERROR_DECLARE, now that they handle properly the parse-params.
	Be sure to let AT_BISON_OPTION_PUSHDEFS now what parse-params are used.

2012-11-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: simplifications
	* tests/actions.at (Exotic Dollars): Formatting changes.
	Use AT_FULL_COMPILE.
	(AT_CHECK_PRINTER_AND_DESTRUCTOR): Remove useless initialization of @$.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: rename lex_symbol as api.token.constructor
	* data/bison.m4 (b4_lex_symbol_if): Rename as...
	(b4_token_ctor_if): this.
	Depend upon api.token.constructor.
	* data/c++.m4, data/lalr1.cc: Adjust.
	* doc/bison.texi: Fix all the occurrences of lex_symbol.
	* etc/bench.pl.in: Adjust.
	* examples/variant.yy: Likewise.

	* tests/local.at (AT_BISON_OPTION_PUSHDEFS, AT_BISON_OPTION_POPDEFS):
	Handle AT_TOKEN_CTOR_IF.
	* tests/c++.at: Adjust to using api.token.constructor and AT_TOKEN_CTOR_IF.
	Simplify the test of both build call styles.
	(AT_CHECK_VARIANTS): Rename as...
	(AT_TEST): this.
	And undef when done.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	examples: simplify/improve
	* examples/variant.yy: Put yylex in yy::, and simplify accordingly.
	Minor formatting changes.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	bison.m4: support b4_*_if macros whose name differ from their variable
	* data/bison.m4 (b4_percent_define_if_define_, b4_percent_define_if_define):
	Accept a second argument.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	grammars: fix display of nul character in error message
	Reported by Marc Mendiola.
	http://lists.gnu.org/archive/html/help-bison/2012-10/msg00017.html

	* gnulib: Update to get quote_mem.
	* src/scan-gram.l: Use it.
	* tests/input.at (Invalid inputs): Additional checks.
	* tests/named-refs.at: Likewise.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	tests: sort
	* tests/regression.at (Invalid inputs, Invalid inputs with {}): Move to...
	* tests/input.at: here, for consistency.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	tests: cosmetic changes
	* tests/actions.at (AT_CHECK_PRINTER_AND_DESTRUCTOR): Improve the
	displayed title.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	comment changes
	* data/lalr1.cc: here.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	autoconf: update
	There are comment changes only in the files we use.

2012-11-01  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-10-28  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-10-28  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: initialize yylval and yylloc.
	When generating a pure push parser, the initialization of yylval and
	yylloc may not be visible to the compiler.  With warnings enabled, GCC
	4.3.6, 4.4.7, 4.5.4, and 4.6.3 report uninitialized uses of
	yylval/yylloc.  Using local pragmas to disable these warnings is not
	supported before 4.6, and 4.6 does not support it properly.  So
	initialize yylval and yylloc at their definition.  Reported by Peter
	Simons.  See
	http://lists.gnu.org/archive/html/bison-patches/2012-10/msg00133.html

	* data/c.m4 (b4_yyloc_default_define): New.
	* data/yacc.c: Use it when locations are requested.
	(YYLVAL_INITIALIZE): Replace by...
	(YY_INITIAL_VALUE): this.
	(yyparse): Initialize yylloc and yylval.
	Therefore, remove the initialization of yylloc's field.
	* data/glr.c: Likewise.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	graphs: fix spacing refactoring
	* src/print_graph.c (print_lhs, print_core): Here.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: make deprecation tests more specific
	* tests/input.at (Deprecated directives): Here, don't generate unrelated errors
	or warnings.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: fix AT_BISON_CHECK_WARNINGS_ stderr rewriting
	* tests/input.at (Deprecated directives): Avoid spurious error.
	* tests/locat.at (AT_BISON_CHECK_WARNINGS): Adjust for recent changes.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	scan-skel.l: consider m4 notes as related to "complaint" errors
	* src/scan-skel.l (flag): Here.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	warnings: distinguish context information based on warning type
	* src/scan-code.l (show_sub_message, show_sub_messages): Take a new warnings
	argument.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	warnings: fix early exit of warnings treated as errors
	Treating warnings as errors caused Bison to exit earlier than needed, making it
	hide warnings that would have been printed had -Werror not been set.

	Also, fix a bug that caused some context information of errors to not be
	shown.

	* src/complain.c (complaint_issued): Rename as...
	(complaint_status): This, and change its type from boolean to
	* src/complain.h (err_status): This, new enumeration.
	* src/main.c (main): Adjust (only finish early if an actual complaint was
	risen, not a mere warning treated an error).
	* src/reader.c: Adjust.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	tests: reindent for legibility
	* tests/local.at (AT_BISON_CHECK_WARNINGS_): Here.

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	build: fix Texinfo compilation
	* doc/local.mk: fix dependencies.

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint: (46 commits)
	  doc: minor style change
	  maint: use gendocs's new -I option
	  regen
	  yacc.c: do not define location support when not using locations
	  maint: be compilable with GCC 4.0
	  tests: address a warning from GCC 4.4
	  tests: don't use options that Clang does not support
	  tests: restore the tests on -Werror
	  regen
	  parse-gram: update the Bison interface
	  fix comment
	  maint: post-release administrivia
	  version 2.6.4
	  regen
	  2.6.4: botched 2.6.3
	  maint: post-release administrivia
	  version 2.6.3
	  gnulib: update
	  tests: check %no-lines
	  NEWS: warnings with clang
	  ...

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'branch-2.6' into maint
	* origin/branch-2.6:
	  regen
	  yacc.c: do not define location support when not using locations
	  maint: be compilable with GCC 4.0
	  tests: address a warning from GCC 4.4
	  tests: don't use options that Clang does not support
	  tests: restore the tests on -Werror
	  regen
	  parse-gram: update the Bison interface
	  fix comment

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	doc: minor style change
	* doc/figs/example-reduce.txt: here.

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	maint: use gendocs's new -I option
	* gnulib: Update gendocs.
	* cfg.mk (gendocs_options_): New.

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: don't use _Pragma GCC diagnostic with 4.6
	Reported by Peter Simons.
	http://lists.gnu.org/archive/html/bug-bison/2012-10/msg00033.html

	* data/yacc.c (b4_declare_scanner_communication_variables): 4.7
	seems fine though.

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: do not define location support when not using locations
	* data/yacc.c (YYLLOC_DEFAULT, YYRHSLOC): Don't define when not
	using locations.

2012-10-26  Akim Demaille  <akim@lrde.epita.fr>

	maint: be compilable with GCC 4.0
	The "shadows a global declaration" warning in GCC 4.0 was a bit
	annoying.  It does not like that a type name be used in a prototype of
	a function (not the implementation, just the declaration):

	  In file included from src/LR0.c:38:
	  src/reader.h:56: warning: declaration of 'named_ref' shadows a
	                            global declaration
	  src/named-ref.h:35: warning: shadowed declaration is here

	It does not like either when a global variable name is used in a
	prototype.  Flex 2.5.37 generates this prototype:

	  void gram_set_debug (int debug_flag  );

	* src/getargs.h, src/getargs.c (debug_flag): Rename as...
	(debug): this.
	Adjust dependencies.
	* src/reader.h: Don't use "named_ref" as a formal argument name.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	misc: document TESTSUITEFLAGS in README-hacking
	* README-hacking: Document -j and -k flags.

2012-10-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	deprecation: add tests
	* tests/input.at (Deprecated directives warn, Non-deprecated
	directives don't, Unput doesn't mess up locations): New tests.

2012-10-25  Akim Demaille  <akim@lrde.epita.fr>

	tests: address a warning from GCC 4.4
	236. torture.at:465: testing Exploding the Stack Size with Alloca ...
	../../../tests/torture.at:474: bison -o input.c input.y
	../../../tests/torture.at:474: $CC $CFLAGS $CPPFLAGS $LDFLAGS -o input input.c $LIBS
	stderr:
	cc1: warnings being treated as errors
	input.y: In function 'main':
	input.y:60: error: 'status' may be used uninitialized in this function

	* tests/torture.at (AT_DATA_STACK_TORTURE): Initial status to avoid
	the previous error.

2012-10-25  Akim Demaille  <akim@lrde.epita.fr>

	tests: don't use options that Clang does not support
	* configure.ac (WARN_CFLAGS, WARN_CXXFLAGS): Do not include options
	that Clang does not support.

2012-10-25  Akim Demaille  <akim@lrde.epita.fr>

	tests: restore the tests on -Werror
	When run as /bin/sh, Bash sets the shell variable POSIXLY_CORRECT to
	y.  The test suite checks for the envvar POSIXLY_CORRECT to turn of
	some tests not supported in POSIX mode.  Restore these tests.

	Reported by the Hydra build farm, from Rob Vermaas.

	* tests/local.at (AT_BISON_CHECK_WARNINGS_): Check the envvar
	POSIXLY_CORRECT, not the shell variable.

2012-10-25  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-10-25  Akim Demaille  <akim@lrde.epita.fr>

	parse-gram: update the Bison interface
	* src/parse-gram.y (%pure-parser, %name-prefix): Replace with...
	(%define api.pure, %define api.prefix)
	* src/location.h, src/scan-gram.h: Adjust to api.prefix.

2012-10-25  Akim Demaille  <akim@lrde.epita.fr>

	fix comment
	* data/c.m4 (b4_YYDEBUG_define): here.

2012-10-24  Theophile Ranquet  <ranquet@lrde.epita.fr>

	regen

2012-10-24  Theophile Ranquet  <ranquet@lrde.epita.fr>

	deprecation: issue warnings in scanner
	* src/parse-gram.y: Move the handling of (three) deprecated constructs ...
	* src/scan-gram.l: ...Here, and issue warnings.
	(DEPRECATED): New.

2012-10-23  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'branch-2.6' into maint
	* origin/branch-2.6:
	  maint: post-release administrivia
	  version 2.6.4
	  regen
	  2.6.4: botched 2.6.3

2012-10-23  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-10-23  Akim Demaille  <akim@lrde.epita.fr>

	version 2.6.4
	* NEWS: Record release date.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	2.6.4: botched 2.6.3
	* NEWS: here.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch '2.6.3' into maint
	* 2.6.3: (22 commits)
	  maint: post-release administrivia
	  version 2.6.3
	  gnulib: update
	  tests: check %no-lines
	  NEWS: warnings with clang
	  warnings: avoid warnings from clang
	  tests: no longer disable -O compiler options
	  yacc.c: initialize yylval in pure-parser mode
	  skeletons: style changes
	  tests: minor improvements
	  tests: use $PERL instead of perl
	  build: look for Perl in configure.
	  tests: fix sed portability issues
	  tests: diff -u is not portable
	  maint: word changes
	  lalr1.cc: fix test suite portability
	  maint: fix an erroneous include
	  tests: check that headers are self contained
	  doc: add missing documentation for --report
	  headers: move CPP guards into YY_*_INCLUDED to avoid collisions
	  ...

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	version 2.6.3
	* NEWS: Record release date.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: check %no-lines
	* tests/synclines.at: here.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: warnings with clang
	* NEWS: here.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	warnings: avoid warnings from clang
	Fix the following warning

	  parse-gram.c:2078:14: error: equality comparison with extraneous parentheses
	                        [-Werror,-Wparentheses-equality]
	    if (((yyn) == (-91)))
	         ~~~~~~^~~~~~~~
	  parse-gram.c:2078:14: note: remove extraneous parentheses around the
	                        comparison to silence this warning
	    if (((yyn) == (-91)))
	        ~      ^       ~
	  parse-gram.c:2078:14: note: use '=' to turn this equality comparison into
	                        an assignment
	    if (((yyn) == (-91)))
	               ^~
	               =
	  1 error generated.

	and the following one:

	  input.cc:740:1: error: function declared 'noreturn' should not return
	                         [-Werror,-Winvalid-noreturn]
	  static void yyMemoryExhausted (yyGLRStack* yystackp)
	    __attribute__ ((__noreturn__));
	  static void
	  yyMemoryExhausted (yyGLRStack* yystackp)
	  {
	    YYLONGJMP (yystackp->yyexception_buffer, 2);
	  }
	  ^
	  1 warning and 1 error generated.

	This is Apple clang version 3.1 (tags/Apple/clang-318.0.61).

	* data/c.m4 (b4_table_value_equals): Use (!!(A == B)) instead of (A == B)
	to avoid this warning.
	Any reasonable compiler should generate the same code.
	* src/uniqstr.h (UNIQSTR_EQ): Likewise.
	* data/glr.c (LONGJMP): abort after longjmp to pacify clang.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: no longer disable -O compiler options
	Tests are running without -O since
	f377f69fec28013c79db4efe12bbb9d48987fb2c because some warnings (about
	yylval not being initialized) show only when GCC is given -O2.  The
	previous patch fixes the warnings. Run the test suite with compiler
	options unmodified.

	* tests/atlocal.in (O0CFLAGS, O0CXXFLAGS): Remove, use CFLAGS and
	CXXFLAGS.

2012-10-22  Paul Eggert  <eggert@cs.ucla.edu>

	yacc.c: initialize yylval in pure-parser mode
	See http://lists.gnu.org/archive/html/bison-patches/2012-08/msg00024.html
	(spreading over September and October).

	* data/yacc.c (YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN)
	(YY_IGNORE_MAYBE_UNINITIALIZED_END, YYLVAL_INITIALIZE):
	New macros.  Use them to suppress an unwanted GCC diagnostic.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: style changes
	* data/yacc.c, data/glr.c: Prefer Title case for (CPP) macro arguments.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: minor improvements
	* tests/c++.at: Space changes.
	Use AT_YYERROR_DEFINE.
	* tests/local.at (AT_YYERROR_DEFINE): Issue errors on unknown languages.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: use $PERL instead of perl
	* tests/atlocal.in (PERL): New.
	Sort.
	* tests/calc.at, tests/input.at, tests/local.at, tests/regression.at,
	* tests/skeletons.at, tests/synclines.at, tests/torture.at: here.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	build: look for Perl in configure.
	Bison uses "/usr/bin/perl" or "perl" in several places, and it does
	not appear to be a problem.  But, at least to make it simpler to
	change PERL on the make command line, check for perl in configure.

	* configure.ac (PERL): New.
	* doc/Doxyfile.in, doc/Makefile.am, tests/bison.in: Use it.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix sed portability issues
	Reported by Didier Godefroy,
	<http://lists.gnu.org/archive/html/bug-bison/2012-10/msg00005.html>.

	* tests/calc.at (AT_CHECK_SPACES): Use Perl.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: diff -u is not portable
	Reported by Didier Godefroy
	<http://lists.gnu.org/archive/html/bug-bison/2012-10/msg00006.html>.

	* tests/existing.at (AT_LALR1_DIFF_CHECK): Skip if diff -u does not
	work.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	maint: word changes
	* README-hacking (Typical errors): Improve wording.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: fix test suite portability
	Reported by Rob Vermaas' Hydra build farm on x86_64-darwin 10.2.0 with
	G++ 4.6.3.

	* tests/headers.at (Several parsers): Include AT_DATA_SOURCE_PROLOGUE
	in the files to compile.
	* data/location.cc: Do not include twice string and iostream (once
	by position.hh, and then by location.hh).
	* README-hacking (Typical errors): Some hints for other maintainers.

2012-10-22  Theophile Ranquet  <theophile.ranquet@gmail.com>

	maint: fix an erroneous include
	This fixes test 130 (Several parsers).

	* data/location.cc: Include <iostream> rather than <iosfwd> since
	we really need << on strings for instance.
	* NEWS: Document this.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: check that headers are self contained
	Reported by Alexandre Duret-Lutz.

	* tests/headers.at (Several parsers): here.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	doc: add missing documentation for --report
	* doc/bison.texi (Bison Options): Document --report's "solved", "all",
	and "none".

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	headers: move CPP guards into YY_*_INCLUDED to avoid collisions
	See <http://lists.gnu.org/archive/html/bug-bison/2012-09/msg00016.html>.

	* data/c.m4 (b4_cpp_guard): Prepend YY_ and append _INCLUDED.
	* tests/headers.at: Adjust.
	* NEWS, doc/bison.texi: Document.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	minor changes.
	* NEWS: Word changes.
	* doc/bison.texi: Spell check.
	Fix minor issues.
	* tests/headers.at: Comment and formatting changes.

2012-10-22  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-10-19  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-10-19  Akim Demaille  <akim@lrde.epita.fr>

	xml: slight improvement of the DOT output
	This was completely forgotten...  Nothing about XML is actually
	documented...

	* data/xslt/xml2dot.xsl: Use boxes, and Courier font.

2012-10-19  Akim Demaille  <akim@lrde.epita.fr>

	maint: check for dot before using it
	* configure.ac: here.
	* doc/Makefile.am: Use $(DOT).
	Ship the generated files, to spare the user the need for Graphviz.

2012-10-18  Theophile Ranquet  <theophile.ranquet@gmail.com>

	graphs: documentation
	Note that 'make web-manual' fails.

	* NEWS: Document these changes.
	* doc/Makefile.am: Adjust to generate example files.
	* doc/bison.texi: Add a Graphviz section after "Understanding::", the section
	describing the .output file, because these are similar.
	* doc/figs/example-reduce.dot, doc/figs/example-reduce.txt,
	doc/figs/example-shift.dot, doc/figs/example-shift.txt: New, minimal
	examples to illustrate the documentation.

2012-10-18  Theophile Ranquet  <theophile.ranquet@gmail.com>

	graphs: add tests, introducing -k graph
	* tests/output.at (AT_TEST): New.
	Use it to add 6 --graph tests.

2012-10-18  Theophile Ranquet  <theophile.ranquet@gmail.com>

	graphs: change the output format of the rules
	Use something similar to the report file.

	* src/print_graph.c (print_lhs): New, obstack equivalent of rule_lhs_print.
	(print_core): Use here.

2012-10-18  Theophile Ranquet  <theophile.ranquet@gmail.com>

	graphs: style changes
	* src/graphviz.c (start_graph): Use courier font.
	(conclude_red): Use commas to separate attributes. Show the acceptation
	as a special reduction, with a blue color and an "Acc" label. Show the
	lookahead tokens between square brackets.
	(output_red): No longer label default reductions.
	* src/print_graph.c (print_core): Refactor spacing, and print an
	additional space between a rule's rhs and its lookahead tokens. Also,
	capitalize "State".
	(print_actions): Style, move a declaration.

2012-10-18  Theophile Ranquet  <theophile.ranquet@gmail.com>

	graphs: address an issue with R/R conflicts
	All disabled reductions should now be shown as such.

	* src/graphviz.c (output_red): Here.
	(conclude_red): New.

2012-10-16  Akim Demaille  <akim@lrde.epita.fr>

	news: spell check
	* NEWS: here.

2012-10-16  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* origin/maint:
	  java: use api.location.type and api.position.type

2012-10-16  Akim Demaille  <akim@lrde.epita.fr>

	variables: use singular in %define variable names
	See http://lists.gnu.org/archive/html/bison-patches/2012-02/msg00045.html

	* doc/bison.texi, src/lalr.c, src/main.c, src/muscle-tab.c,
	* src/print.c, src/reader.c, src/tables.c, tests/conflicts.at,
	* tests/input.at, tests/reduce.at:
	s/lr.default-reductions/lr.default-reduction/
	s/lr.keep-unreachable-states/lr.keep-unreachable-state/.
	* NEWS: Document.

2012-10-16  Akim Demaille  <akim@lrde.epita.fr>

	java: fixes
	* data/java.m4: Remove stray M4 characters.

2012-10-16  Akim Demaille  <akim@lrde.epita.fr>

	api.tokens.prefix -> api.token.prefix
	See
	http://lists.gnu.org/archive/html/bison-patches/2012-02/msg00045.html
	Note that api.tokens.prefix has not been released, yet.

	* NEWS, data/bison.m4, doc/bison.texi, tests/c++.at,
	* tests/calc.at, tests/java.at, tests/local.at: Do it.
	* src/muscle-tab.c (muscle_percent_variable_update): Ensure
	backward compatibility.

2012-10-15  Theophile Ranquet  <theophile.ranquet@gmail.com>

	scan-skel.l: shift complain_args arguments
	Because argv[0] is never used, shift it out from the argument list.

	* src/complain.c (complain_args): Here.
	* src/scan-skel.l (at_complain): Adjust argv and argc.

2012-10-15  Theophile Ranquet  <theophile.ranquet@gmail.com>

	scan-skel.l: formatting changes
	* src/scan-skel.l (fail_for_at_directive_too_few_args): Here.

2012-10-12  Akim Demaille  <akim@lrde.epita.fr>

	java: use api.location.type and api.position.type
	* data/java.m4: here.
	* NEWS, doc/bison.texi, tests/java.at: Adjust.

2012-10-12  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* origin/maint:
	  tests: check %no-lines
	  tests: minor simplification
	  graphs: stylistic changes.
	  graphs: minor style changes
	  graphs: show reductions
	  graphs: style: prefix state number with "state"
	  graphs: style: use left justification for states
	  graphs: style: prefix rules and change shapes
	  obstack: import obstack_finish0 from master
	  c++: api.location.type
	  muscles: a function for backward compatibility
	  maint: more macros

2012-10-12  Akim Demaille  <akim@lrde.epita.fr>

	tests: check %no-lines
	* tests/synclines.at: here.

2012-10-12  Akim Demaille  <akim@lrde.epita.fr>

	tests: minor simplification
	* tests/headers.at (Several parsers): Use *.y even for C++.

2012-10-11  Akim Demaille  <akim@lrde.epita.fr>

	graphs: stylistic changes.
	* src/graphviz.c (output_red): Comment and formatting changes.

2012-10-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	graphs: minor style changes
	* src/graphviz.c (output_red): Fix C90 issues.
	Reduce variable scopes.

2012-10-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	graphs: show reductions
	* src/graphviz.c (output_red): New, show reductions on the graph.
	(no_reduce_bitset_init): New, initialize a bitset.
	(print_token): New, print a lookahead token.
	(escape): New, print "foo" as \"foo\" because Dot doesn't like quotes within
	a label.

	* src/graphviz.h : Adjust.
	* src/print_graph.c (print_actions): Call output_red here.

2012-10-11  Theophile Ranquet  <theophile.ranquet@gmail.com>

	graphs: style: prefix state number with "state"
	* src/print_graph.c (print_core): Here.

2012-10-11  Theophile Ranquet  <ranquet@lrde.epita.fr>

	graphs: style: use left justification for states
	The label text of nodes is centered "by default" (by the use of '\n' as
	a line feed). This gives bad readability to the grammar rules shown in
	state nodes, a left justification is much nicer. This is done by using '\l'
	as the line feed.

	In order to allow \l in the DOT file, changes to the quoting system seem
	necessary.

	* src/print_graph.c (print_core): Escape tokens here, instead of...
	* src/graphviz.c (output_node): Here...
	(escape): Using this, new.

2012-10-11  Theophile Ranquet  <theophile.ranquet@gmail.com>

	graphs: style: prefix rules and change shapes
	* src/graphviz.c (start_graph): Use box rather than ellipsis.
	* src/print_graph.c (print_core): Prefix rules with their number.

2012-10-11  Theophile Ranquet  <theophile.ranquet@gmail.com>

	obstack: import obstack_finish0 from master
	* src/system.h (obstack_finish0): New.

2012-10-11  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* origin/maint:
	  NEWS: warnings with clang
	  warnings: avoid warnings from clang
	  tests: no longer disable -O compiler options
	  yacc.c: initialize yylval in pure-parser mode
	  skeletons: style changes
	  lalr1.cc: document exception safety
	  lalr1.cc: check exception safety of error handling
	  lalr1.cc: check (and fix) %printer exception safety
	  lalr1.cc: check (and fix) %initial-action exception safety
	  lalr1.cc: fix exception safety
	  lalr1.cc: check exception safety.
	  lalr1.cc: indentation fixes.
	  lalr1.cc: don't leave macros define to nothing
	  tests: minor improvements
	  tests: use $PERL instead of perl
	  build: look for Perl in configure.
	  tests: fix sed portability issues
	  tests: diff -u is not portable

2012-10-09  Akim Demaille  <akim@lrde.epita.fr>

	c++: api.location.type
	This feature was introduced in 95a2de5695670ae0df98cb3c42141cad549f0204
	(which is part of 2.5), but not documented.  Give it a proper name, and
	make it public.

	* data/c++.m4, data/lalr1.cc, data/glr.cc, data/java.m4: Use
	api.location.type instead of location_type.
	* src/muscle-tab.c (muscle_percent_variable_update): Map the latter to
	the former.
	* tests/local.at: Adjust.
	* tests/calc.at: Use api.location.type.
	Leave tests/java.at with location_type, at least for the time being,
	to cover both names.
	* doc/bison.texi: Document api.location.type.
	(User Defined Location Type): New.
	* NEWS: Update.

2012-10-09  Akim Demaille  <akim@lrde.epita.fr>

	muscles: a function for backward compatibility
	Based on commit 171ad99d6421935a278656be6dc7161591835d00 from master.

	* src/muscle-tab.c (muscle_percent_variable_update): New.
	(muscle_percent_define_insert): Use it.
	Define the variables with their initial value.

2012-10-09  Akim Demaille  <akim@lrde.epita.fr>

	maint: more macros
	* src/output.c (ARRAY_CARDINALITY): Move to...
	* src/system.h: here.
	(STREQ, STRNEQ): new.

2012-10-08  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: warnings with clang
	* NEWS: here.

2012-10-08  Akim Demaille  <akim@lrde.epita.fr>

	warnings: avoid warnings from clang
	Fix the following warning

	  parse-gram.c:2078:14: error: equality comparison with extraneous parentheses
	                        [-Werror,-Wparentheses-equality]
	    if (((yyn) == (-91)))
	         ~~~~~~^~~~~~~~
	  parse-gram.c:2078:14: note: remove extraneous parentheses around the
	                        comparison to silence this warning
	    if (((yyn) == (-91)))
	        ~      ^       ~
	  parse-gram.c:2078:14: note: use '=' to turn this equality comparison into
	                        an assignment
	    if (((yyn) == (-91)))
	               ^~
	               =
	  1 error generated.

	and the following one:

	  input.cc:740:1: error: function declared 'noreturn' should not return
	                         [-Werror,-Winvalid-noreturn]
	  static void yyMemoryExhausted (yyGLRStack* yystackp)
	    __attribute__ ((__noreturn__));
	  static void
	  yyMemoryExhausted (yyGLRStack* yystackp)
	  {
	    YYLONGJMP (yystackp->yyexception_buffer, 2);
	  }
	  ^
	  1 warning and 1 error generated.

	This is Apple clang version 3.1 (tags/Apple/clang-318.0.61).

	* data/c.m4 (b4_table_value_equals): Use (!!(A == B)) instead of (A == B)
	to avoid this warning.
	Any reasonable compiler should generate the same code.
	* src/uniqstr.h (UNIQSTR_EQ): Likewise.
	* data/glr.c (LONGJMP): abort after longjmp to pacify clang.

2012-10-08  Akim Demaille  <akim@lrde.epita.fr>

	tests: no longer disable -O compiler options
	Tests are running without -O since
	f377f69fec28013c79db4efe12bbb9d48987fb2c because some warnings (about
	yylval not being initialized) show only when GCC is given -O2.  The
	previous patch fixes the warnings. Run the test suite with compiler
	options unmodified.

	* tests/atlocal.in (O0CFLAGS, O0CXXFLAGS): Remove, use CFLAGS and
	CXXFLAGS.

2012-10-08  Paul Eggert  <eggert@cs.ucla.edu>

	yacc.c: initialize yylval in pure-parser mode
	See http://lists.gnu.org/archive/html/bison-patches/2012-08/msg00024.html
	(spreading over September and October).

	* data/yacc.c (YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN)
	(YY_IGNORE_MAYBE_UNINITIALIZED_END, YYLVAL_INITIALIZE):
	New macros.  Use them to suppress an unwanted GCC diagnostic.

2012-10-08  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: style changes
	* data/yacc.c, data/glr.c: Prefer Title case for (CPP) macro arguments.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: document exception safety
	* NEWS: here.
	* doc/bison.texi (Destructor Decl, C++ Parser Interface): and there.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: check exception safety of error handling
	* tests/c++.at (Exception safety): Don't use swap here, it
	is useless.
	Cover more test cases: yyerror, YYERROR, YYABORT, and
	error recovery.
	(Object): Instead of just keeping a counter of instances, keep
	a list of them.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: check (and fix) %printer exception safety
	* tests/c++.at (Exception safety): Let the parser support the --debug
	option.
	On 'p', throw an exception from the %printer.
	* data/lalr1.cc (yyparse): Do not display the values we discard, as it
	uses %printer, which might have thrown the exception.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: check (and fix) %initial-action exception safety
	* data/lalr1.cc: Check size > 1, rather than size != 1, when cleaning
	the stack, as at the beginning, size is 0.
	* tests/c++.at (Exception safety): Check exception safety in
	%initial-action.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: fix exception safety
	lalr1.cc does not reclaim its memory when ended by an exception.

	Reported by Oleksii Taran:
	http://lists.gnu.org/archive/html/help-bison/2012-09/msg00000.html

	* data/lalr1.cc (yyparse): Protect the whole yyparse by a try-catch
	block that cleans the stack and the lookahead.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: check exception safety.
	* tests/c++.at (Exception safety): New.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: indentation fixes.
	* data/lalr1.cc (yyparse): here.
	Untabify a block of code.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: don't leave macros define to nothing
	* data/lalr1.cc (YY_SYMBOL_PRINT, YY_REDUCE_PRINT, YY_STACK_PRINT):
	Define to something so that, for instance, "if (foo) YY_SYMBOL_PRINT"
	is valid even when !YYDEBUG.

2012-10-06  Akim Demaille  <akim@lrde.epita.fr>

	tests: minor improvements
	* tests/c++.at: Space changes.
	Use AT_YYERROR_DEFINE.
	* tests/local.at (AT_YYERROR_DEFINE): Issue errors on unknown languages.

2012-10-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: use $PERL instead of perl
	* tests/atlocal.in (PERL): New.
	Sort.
	* tests/calc.at, tests/input.at, tests/local.at, tests/regression.at,
	* tests/skeletons.at, tests/synclines.at, tests/torture.at: here.

2012-10-05  Akim Demaille  <akim@lrde.epita.fr>

	build: look for Perl in configure.
	Bison uses "/usr/bin/perl" or "perl" in several places, and it does
	not appear to be a problem.  But, at least to make it simpler to
	change PERL on the make command line, check for perl in configure.

	* configure.ac (PERL): New.
	* doc/Doxyfile.in, doc/Makefile.am, tests/bison.in: Use it.

2012-10-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix sed portability issues
	Reported by Didier Godefroy,
	<http://lists.gnu.org/archive/html/bug-bison/2012-10/msg00005.html>.

	* tests/calc.at (AT_CHECK_SPACES): Use Perl.

2012-10-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: diff -u is not portable
	Reported by Didier Godefroy
	<http://lists.gnu.org/archive/html/bug-bison/2012-10/msg00006.html>.

	* tests/existing.at (AT_LALR1_DIFF_CHECK): Skip if diff -u does not
	work.

2012-10-04  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* origin/maint:
	  maint: word changes
	  lalr1.cc: fix test suite portability
	  maint: fix an erroneous include
	  tests: check that headers are self contained
	  doc: add missing documentation for --report

2012-10-04  Akim Demaille  <akim@lrde.epita.fr>

	scan-skel: use the scanner to reject all invalid directives
	* src/scan-skel.l: Use a simpler and more consistent pattern escaping
	scheme.
	Catch all the invalid directives here by just removing the previous
	catch-all-but-alphabetical rule.

2012-10-04  Theophile Ranquet  <theophile.ranquet@gmail.com>

	scan-skel: recognize the @directives directly in scanner
	* src/scan-skel.l (at_directive, at_init): New.
	(at_ptr): New, function pointer used to call the right at_directive
	function (at_basename, etc.).
	(outname): Rename as...
	(out_name): this, for consistency with out_lineno.

2012-10-04  Theophile Ranquet  <theophile.ranquet@gmail.com>

	scan-skel: split @directive functions
	* src/scan-skel.l (at_directive_perform): Split as...
	(at_basename, at_complain, at_output): these.

2012-10-04  Theophile Ranquet  <theophile.ranquet@gmail.com>

	errors: support indented context info in m4 macros
	* TODO: Address the issue, so remove it.
	* data/bison.m4: Use b4_error with [[note]] rather than a complain_at
	for context information.
	* src/complain.c (complain_args): Take an additional argument, an
	indentation pointer, to allow the dispatching of context information.
	* src/complain.h (complain_args): Adjust prototype.
	* src/scan-skel.l (at_directive_perform): Recognize the new @note mark.
	* tests/input.at: Adjust.

2012-10-04  Theophile Ranquet  <theophile.ranquet@gmail.com>

	errors: factor b4_error @directives
	Instead of @complain, @warn, and @fatal, use a unique @complain
	directive. This directive's first argument is "complain", "warn", etc.

	* data/bison.m4 (m4_error): Here.
	* src/scan-skel.l (at_directive_perform): Adjust.
	(flag): Replace the switch by safer and more explicit if branches.

2012-10-04  Theophile Ranquet  <theophile.ranquet@gmail.com>

	errors: pointerize complain_at_indent
	* src/complain.c (complain_at_indent): Rename as...
	(complaint_indent): This, and take the location as a pointer.
	* src/complain.h, src/muscle-tab.c, src/reader.c, src/scan-code.l,
	src/symtab.c: Adjust.

2012-10-04  Akim Demaille  <akim@lrde.epita.fr>

	maint: word changes
	* README-hacking (Typical errors): Improve wording.

2012-10-04  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: fix test suite portability
	Reported by Rob Vermaas' Hydra build farm on x86_64-darwin 10.2.0 with
	G++ 4.6.3.

	* tests/headers.at (Several parsers): Include AT_DATA_SOURCE_PROLOGUE
	in the files to compile.
	* data/location.cc: Do not include twice string and iostream (once
	by position.hh, and then by location.hh).
	* README-hacking (Typical errors): Some hints for other maintainers.

2012-10-03  Theophile Ranquet  <theophile.ranquet@gmail.com>

	maint: fix an erroneous include
	This fixes test 130 (Several parsers).

	* data/location.cc: Include <iostream> rather than <iosfwd> since
	we really need << on strings for instance.
	* NEWS: Document this.

2012-10-03  Akim Demaille  <akim@lrde.epita.fr>

	tests: check that headers are self contained
	Reported by Alexandre Duret-Lutz.

	* tests/headers.at (Several parsers): here.

2012-10-03  Akim Demaille  <akim@lrde.epita.fr>

	doc: add missing documentation for --report
	* doc/bison.texi (Bison Options): Document --report's "solved", "all",
	and "none".

2012-10-01  Akim Demaille  <akim@lrde.epita.fr>

	build: use gnulib's non-recursive-gnulib-prefix-hack
	Suggested by Jim Meyering.

	* etc/prefix-gnulib-mk: Remove, as it is now provided by...
	* bootstrap.conf (modules): the non-recursive-gnulib-prefix-hack module.
	* build-aux/.gitignore, configure.ac, m4/.gitignore: Adjust.

2012-10-01  Akim Demaille  <akim@lrde.epita.fr>

	warnings: simplify the m4 interface
	* data/bison.m4 (error_at): Replace...
	(error): this.
	(b4_warn, b4_complain, b4_fatal): Bounce to their _at equivalent,
	with empty location.
	* src/scan-skel.l (at_directive_perform): Simplify accordingly.

2012-10-01  Theophile Ranquet  <theophile.ranquet@gmail.com>

	warnings: separate flags_argmatch
	This function is now a mere iterator that calls flag_argmatch,
	a new function, that matches a single option parameter.

	* src/getargs.c (flag_argmatch): New, taken from...
	(flags_argmatch): Here.

2012-10-01  Theophile Ranquet  <theophile.ranquet@gmail.com>

	warnings: refactoring
	The code here was too confusing, this seems more natural.

	* src/complain.c (error_message): Move the indentation check and the category
	output to complains. Also, no longer take a 'warnings' argument.
	(complains): Factor calls to error_message.

2012-10-01  Theophile Ranquet  <theophile.ranquet@gmail.com>

	formatting changes
	* src/complain.c: Here.

2012-10-01  Theophile Ranquet  <theophile.ranquet@gmail.com>

	warnings: organize variadic complaints call
	Move the dispatch of variadic complains to complain.c, rather than do
	it in a scanner.

	* src/complain.h, src/complain.c (complain_args): New.
	* src/scan-skel.l (at_directive_perform): Use it.

2012-10-01  Theophile Ranquet  <theophile.ranquet@gmail.com>

	warnings: fusion of complain and complain_at
	These functions are very similar, and keeping them seperate makes
	future improvements difficult, so merge them.

	This impacts 89 calls.

	* src/bootstrap.conf: Adjust.
	* src/complain.c (complain, complain_at): Merge into...
	(complain): this.
	(complain_args): Adjust.
	* src/complain.h, src/conflicts.c, src/files.c, src/getargs.c,
	* src/gram.c, src/location.c, src/muscle-tab.c, src/parse-gram.y,
	* src/reader.c, src/reduce.c, src/scan-code.l, src/scan-gram.l,
	* src/scan-skel.l, src/symlist.c, src/symtab.c:
	Adjust.

2012-10-01  Theophile Ranquet  <theophile.ranquet@gmail.com>

	warnings: remove spurious suffixes on context
	Rectify a bug that introduced suffixes out of place.

	* src/complainc.c (complains): Handle all three special warning bits.
	* src/scan-code.l (show_sub_message): Remove useless argument.
	* tests/named-refs.at: Adjust.

2012-10-01  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  headers: move CPP guards into YY_*_INCLUDED to avoid collisions
	  minor changes.

2012-10-01  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  gnulib: update
	  errors: indent "user token number redeclaration" context

2012-10-01  Akim Demaille  <akim@lrde.epita.fr>

	headers: move CPP guards into YY_*_INCLUDED to avoid collisions
	See <http://lists.gnu.org/archive/html/bug-bison/2012-09/msg00016.html>.

	* data/c.m4 (b4_cpp_guard): Prepend YY_ and append _INCLUDED.
	* tests/headers.at: Adjust.
	* NEWS, doc/bison.texi: Document.

2012-10-01  Akim Demaille  <akim@lrde.epita.fr>

	minor changes.
	* NEWS: Word changes.
	* doc/bison.texi: Spell check.
	Fix minor issues.
	* tests/headers.at: Comment and formatting changes.

2012-09-28  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-09-28  Theophile Ranquet  <theophile.ranquet@gmail.com>

	errors: indent "user token number redeclaration" context
	This is the continuation of the work on the readability of errors
	context.

	* src/symtab.c (user_token_number_redeclaration): Use
	complain_at_indent to output with increased indentation level.
	* tests/input:at: Apply this change.

2012-09-27  Theophile Ranquet  <theophile.ranquet@gmail.com>

	errors: don't display "warnings treated as errors"
	This line doesn't add any meaningful information anymore, the appended
	[-Werror=CATEGORY] is enough.  It is actually more insightful, as it
	allows to distinguish warnings treated as errors from those that
	aren't.  This line is also removed by gcc 4.8.

	* src/complain.c (set_warnings_issued): The only action left was
	checking if the error bit corresponding to the warning issued was set,
	and that function was only called once. Therefore, remove it, and do
	its job directly in the caller...
	(complains): here.
	* src/complains.h: Adjust.
	* tests/input.at: Adjust.
	* NEWS: Document this change.

2012-09-27  Akim Demaille  <akim@lrde.epita.fr>

	errors: change output, and improve -y coherence
	The prefix of warnings treated as errors is now "error: ". Also, their
	suffix now reflects the changes in the Werror option format.

	An output for -Werror=other used to be:
	  bison: warnings being treated as errors
	  input.y:1.1: warning: stray ',' treated as white space [-Wother]

	It is now:
	  bison: warnings being treated as errors
	  input.y:1.1: error: stray ',' treated as white space [-Werror=other]

	The line "warnings being treated as errors" no longer adds any info,
	it will be removed in a forthcoming change.

	* NEWS: Add entry "Enhancement of the -Werror"
	* doc/bison.texi: Move the warnings-as-error to a new bullet.
	* src/complain.c (complains): Refactor, change the prefix of warnings
	that are treated as errors.
	(warnings_print_categories): Support for [-Werror=CATEGORY] display
	* src/getargc.c (getargs): -y implies -Werror=yacc
	* tests/input.at: Update expected --yacc output for coherence.

2012-09-27  Theophile Ranquet  <theophile.ranquet@gmail.com>

	errors: introduce the -Werror=CATEGORY option
	This new option is a lot more flexible than the previous one. Its
	details will be discussed in the NEWS and info file, in a forthcoming
	change.

	If no category is specified (ie: used as simply "-Werror"), the
	functionality is the same as before.

	* src/complain.c (errors_flag): New variable.
	(set_warning_issued): Accept warning categories as an argument.
	* src/complain.h (Wall): Better definition.
	* src/getargs.c (flags_argmatch): Support for the new format.
	(usage): Update -Werror to -Werror[=CATEGORY] format.

	* src/complain.c (errors_flag): New variable.
	(set_warning_issued): Accept warning categories as an argument.
	* src/complain.h (Wall): Better definition.
	* src/getargs.c (flags_argmatch): Support for the new format.
	(usage): Update -Werror to -Werror=[CATEGORY] format.

2012-09-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* maint:
	  warnings: introduce -Wdeprecated in the usage info
	  errors: prefix the output with "error: "
	  errors: indent "invalid value for %define" context
	  errors: indent "%define var" redefinition context
	  errors: indent "symbol redeclaration" context
	  errors: indent "result type clash" error context

2012-09-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	warnings: introduce -Wdeprecated in the usage info
	The deprecated warning, introduced some time ago, was not displayed in
	the usage message. This patch addresses the issue.

	* src/getargs.c (usage): Insert here.

2012-09-26  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-09-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  regen
	  yacc: fix handling of CPP guards when no header is generated
	  gnulib: update

2012-09-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	errors: prefix the output with "error: "
	This improves readability. This is also what gcc does.

	* NEWS: Document this change.
	* src/complain.c (complain_at): Prefix all errors with "error: ".
	(complain_at_indent, warn_at_indent): Do not prefix the context
	information of errors, which are basically just indented errors.
	* tests/conflicts.at, tests/glr-regression.at, tests/input.at,
	tests/named-refs.at, tests/output.at, tests/push.at,
	tests/regression.at, tests/skeletons.at: Apply this change.

2012-09-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	errors: indent "invalid value for %define" context
	This is the continuation of the work on the readability of errors
	    context.

	For example, what used to be:
	  input.y:1.9-29: invalid value for %define variable 'foo' : 'bar'
	  input.y:1.9-29: accepted value: 'most'

	is now:
	  input.y:1.9-29: invalid value for %define variable 'foo' : 'bar'
	  input.y:1.9-29:     accepted value: 'most'

	* src/muscle-tab.c (muscle_percent_define_check_values): Use
	complain_at_indent to output with increased indentation level.
	* tests/input:at: Apply this change.

2012-09-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	errors: indent "%define var" redefinition context
	This is the continuation of the work on the readability of errors
	context.

	For example, what used to be:
	  input.y:2.9-11: %define variable 'var' redefined
	  input.y:1.9-11: previous definition

	is now:
	  input.y:2.9-11: %define variable 'var' redefined
	  input.y:1.9-11:     previous definition

	* src/muscle-tab.c (muscle_percent_define_insert): Use
	complain_at_indent to output with increased indentation level.
	* tests/input.at: Apply this change.

2012-09-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	errors: indent "symbol redeclaration" context
	This is the continuation of the work on the readability of errors
	context.

	For example, what used to be:
	  input.y:5.10-24: %printer redeclaration for <field2>
	  input.y:3.11-25: previous declaration

	is now:
	  input.y:5.10-24: %printer redeclaration for <field2>
	  input.y:3.11-25:     previous declaration

	* NEWS: Document this change.
	* src/symtab.c (symbol_redeclaration, semantic_type_redeclaration,
	user_token_number_redeclaration, default_tagged_destructor_set,
	default_tagless_destructor_set, default_tagged_printer_set,
	default_tagless_printer_set): Use complain_at_indent to
	output with increased indentation level.
	* tests/input.at: Apply this change.

2012-09-26  Theophile Ranquet  <ranquet@lrde.epita.fr>

	errors: indent "result type clash" error context
	This used to be the format of the error report:

	  input.y:6.5-10: result type clash on merge function 'merge': [...]
	  input.y:2.4-9: previous declaration

	In order to distinguish the actual error from the context provided, we
	rather this new output:

	  input.y:6.5-10: result type clash on merge function 'merge': [...]
	  input.y:2.4-9:     previous declaration

	Another patch will introduce an "error: " prefix to all non-indented
	lines, giving yet better readability to the reports.

	* src/complain.h (SUB_INDENT): Move to here.
	* src/reader.c (record_merge_function_type): Use complain_at_indent to
	output with increased indentation level.
	* src/scan-code.l (SUB_INDENT): Remove from here.
	* tests/glr-regression.at: Apply this change.

2012-09-25  Akim Demaille  <akim@lrde.epita.fr>

	warnings: use the regular interface for s/r and r/r conflicts
	The current routines used to display s/r and r/r conflicts are both
	inconvenient from the programmer point of view (they do not use the
	warning infrastructure) and for the user (the messages are rather
	terse, not necessarily pleasant to read, and because they don't use
	the same routines, they look different).

	It was due to the belief (dating back to the initial checked-in
	version of Bison) that, at some point, POSIX Yacc mandated the format
	for these messages.  Today, the Open Group's manual page for Yacc,
	<http://pubs.opengroup.org/onlinepubs/009695399/utilities/yacc.html>,
	explicitly states that the format of these messages is unspecified.
	See commit be7280480c175bed203883f524c7dcd6cf37c13d and
	<http://lists.gnu.org/archive/html/bison-patches/2002-12/msg00027.html>.

	For a discussion on the chosen warning format, see
	http://lists.gnu.org/archive/html/bison-patches/2012-09/msg00039.html

	In an effort to factor the handling of errors and warnings, use the
	Bison warning routines to report these messages.

	* src/conflicts.c (conflicts_print): Rewrite with clearer sections
	about S/R and then R/R conflicts.
	(conflict_report): Remove, inlined in its sole
	caller...
	(conflicts_output): here.
	* tests/conflicts.at, tests/existing.at, tests/glr-regression.at,
	* tests/reduce.at, tests/regression.at: Adjust the expected results.
	* NEWS: Update.

2012-09-25  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-09-25  Akim Demaille  <akim@lrde.epita.fr>

	yacc: fix handling of CPP guards when no header is generated
	When no header was to be generated, Bison would issue:

	  /* In a future release of Bison, this section will be replaced
	     by #include "".  */
	  #ifndef YY_
	  # define YY_

	It now properly generates nothing.

	* data/c.m4 (b4_cpp_guard_open, b4_cpp_guard_close): Issue nothing when
	the file name is empty.
	* data/yacc.c: Do not generate the above comment when there is no header
	to generate.
	* NEWS: Update.

2012-09-25  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-09-21  Akim Demaille  <akim@lrde.epita.fr>

	conflicts: refactor the counting routines
	* src/conflicts.c (count_sr_conflicts, count_rr_conflicts): Rename as...
	(count_sr_conflicts, count_rr_conflicts): these.
	Use size_t for counts.
	(count_sr_conflicts, count_rr_conflicts): New.
	Use them.

2012-09-21  Akim Demaille  <akim@lrde.epita.fr>

	%expect-rr is for GLR only
	* src/conflicts.c (conflicts_print): Complain about %expect-rr if not
	in GLR mode, regardless of the number of reduce/reduce conflicts.
	* tests/conflicts.at (%expect-rr non GLR): New test.
	* NEWS: Update.

2012-09-21  Akim Demaille  <akim@lrde.epita.fr>

	TODO: lalr1.cc master vs maint
	* TODO: here.

2012-09-21  Akim Demaille  <akim@lrde.epita.fr>

	c++: coding style fixes
	* data/lalr1.cc, tests/c++.at: Formatting changes.

2012-09-21  Akim Demaille  <akim@lrde.epita.fr>

	Revert "introduced a GCC-like -Werror=type"
	This reverts commit 981c53e257f1974854edc4f6ad0e88c7f18e2bea.

2012-09-21  Akim Demaille  <akim@lrde.epita.fr>

	Revert "made previous commit less hairy"
	This reverts commit fd01e1d05ea3e627033d148b5400b99a18ac7ba3.

2012-09-21  Akim Demaille  <akim@lrde.epita.fr>

	Revert "new Werror report format fixed in a test"
	This reverts commit 41511178a71ebaf81bde7ffc682c575537af45cb.

2012-09-21  Theophile Ranquet  <ranquet@lrde.epita.fr>

	new Werror report format fixed in a test
	* tests/input.at : replaced [-Wyacc] with [-Werror=yacc]

	todo: fix the other failed test of the suite, tests/conflicts.at:1554

2012-09-21  Theophile Ranquet  <ranquet@lrde.epita.fr>

	made previous commit less hairy
	* src/getargs.c : here

2012-09-20  Theophile Ranquet  <ranquet@lrde.epita.fr>

	introduced a GCC-like -Werror=type
	* src/complain.h : errors_flag variable
	* src/complain.c : actual stuff happens here
	* src/conflits.c : differentiated SR and RR conflicts
	* src/getargs.c : flags_argmatch recognizes the new -Werror format

2012-09-04  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-09-04  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  maint: remove useless file
	  update files to ignore
	  remove useless include
	  use locale-indep. c_is* functions for parsing, not isspace, isprint etc
	  gnulib: update
	  --help: include a place to report translation issues
	  tests: style changes
	  tests: fix push-pull test
	  yacc.c: style changes

2012-09-04  Akim Demaille  <akim@lrde.epita.fr>

	maint: remove useless file
	* externals/bootstrap.cfg: Remove.
	This file was used by a specific build system.
	It was added to the master repository by accident.

2012-09-04  Akim Demaille  <akim@lrde.epita.fr>

	update files to ignore
	* doc/.gitignore: Don't ignore split info files as we don't split our
	info file.
	See <http://lists.gnu.org/archive/html/bug-bison/2012-08/msg00006.html>.

2012-09-04  Akim Demaille  <akim@lrde.epita.fr>

	remove useless include
	* src/system.h: Don't include sys/types.h.
	Reported by Eric Blake,
	<http://lists.gnu.org/archive/html/bug-bison/2012-09/msg00002.html>.
	(FUNCTION_PRINT): Remove, unused.

2012-09-03  Jim Meyering  <meyering@redhat.com>

	use locale-indep. c_is* functions for parsing, not isspace, isprint etc
	* src/parse-gram.y: Include "c-ctype.h".
	(add_param): Parse with c_isspace, not isspace.
	* src/parse-gram.c: Likewise.
	* src/scan-gram.l: Include c-ctype.h, not ctype.h.
	(SC_ESCAPED_STRING,SC_ESCAPED_CHARACTER): Use c_isspace and c_isprint,
	not ctype.h's locale-dependent functions.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	--help: include a place to report translation issues
	http://lists.gnu.org/archive/html/bug-bison/2012-08/msg00007.html
	shows that it is useful to help users report translation issues.
	While at it, include other informative bits that the coreutils shows.

	* src/getargs.c (usage): Report more URLs where the user can
	refer to.
	Mostly copied/pasted from coreutils' emit_ancillary_info function.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	news: style changes
	* NEWS: Minor improvements.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	use -Wdeprecated for obsolete %define variable names
	* src/muscle-tab.c (muscle_percent_variable_update): Here.
	* tests/input.at (%define backward compatibility): Update expectations.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	introduce -Wdeprecated
	GCC seems to be using "deprecated" consistently over "obsoleted", so
	use -Wdeprecated rather than -Wobsolete.

	* src/complain.h (warnings): Add Wdeprecated.
	* src/complain.c (warnings_print_categories): Adjust.
	* src/getargs.c: Likewise.
	* doc/bison.texi: Document it.

	* src/scan-code.l: Use this category for the trailing ';' support.
	* tests/actions.at: Adjust expected output.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	undefined but unused is a warning
	* src/symtab.c (symbol_check_defined): Undeclared symbols are only
	a warning.
	* tests/input.at (Undeclared symbols used for a printer or destructor):
	Rename as...
	(Undefined symbols): this, and check this case.
	* NEWS: Doc it.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: %defines is no longer mandatory
	* data/glr.cc: No longer require %defines.
	When it is not given, define the position and location classes instead
	of including their headers.
	(b4_shared_declarations): Use the original parse-params.
	* data/glr.c (b4_shared_declarations): Define only if undefined.
	* tests/actions.at, tests/calc.at: No longer force the use of %defines
	for glr.cc.
	* NEWS: Doc it.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	todo: check push parsers

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	style: remove useless C++ provisio
	* src/complain.h: here.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	parser: style changes
	* src/parse-gram.y: Avoid deprecated directives.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	doc: address a fixme
	* doc/bison.texi (Calc++ Parser): Add a cross-reference.

2012-09-03  Akim Demaille  <akim@lrde.epita.fr>

	style changes
	* data/glr.cc, tests/actions.at: Fix comments.
	* src/symtab.h, src/symtab.c: Fix indentation/comments.
	* src/symlist.c: Fix indentation.

2012-08-31  Akim Demaille  <akim@lrde.epita.fr>

	tests: style changes
	* tests/torture.at (AT_DATA_STACK_TORTURE): M4 style changes to
	improve readability.
	Fix an assertion which, because of a <= instead of ==, did not check
	new_status as visibly meant.
	(get_args): New.

2012-08-31  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix push-pull test
	* tests/torture.at: %push-pull-parser is no longer supported.

2012-08-31  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: style changes
	* data/yacc.c: (yytoken): Define with initial value.

2012-08-12  Akim Demaille  <akim@lrde.epita.fr>

	refactoring: define variables with a value
	* src/muscle-tab.c: Where possible, fuse definition and initial assignment.

2012-08-12  Akim Demaille  <akim@lrde.epita.fr>

	minor refactoring: shorten variable names
	* src/scan-skel.l (at_directive_argc, at_directive_argv)
	(AT_DIRECTIVE_ARGC_MAX): Rename as...
	(argc, argv, ARGC_MAX): these, as there is no possible confusion.
	(flags): New.
	(QPUTS): Remove, inline its only use.

2012-08-12  Akim Demaille  <akim@lrde.epita.fr>

	obstacks: simplifications
	* src/system.h (obstack_finish0): New.
	Use it to simplify several uses.
	* src/muscle-tab.h (MUSCLE_INSERTF): New.
	* src/muscle-tab.c: Use obstack_printf where simpler.

2012-08-12  Akim Demaille  <akim@lrde.epita.fr>

	minor refactoring in user code scanning
	* src/scan-code.l (show_sub_message, show_sub_messages): Instead of a
	Boolean, take a "warnings" argument.
	Avoid storing printf-like format strings in a variable, so that GCC
	can check them.

2012-08-12  Akim Demaille  <akim@lrde.epita.fr>

	minor refactoring in user code scanning
	* src/scan-code.l (show_sub_message): New, extracted from...
	(show_sub_messages): here.

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	tests: strengthen the trailing spaces check
	* tests/calc.at: here.
	* data/glr.c: Fix accordingly.

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* origin/maint:
	  maint: post-release administrivia
	  version 2.6.2
	  NEWS: update.
	  yacc: remove trailing end of line at end of file
	  thanks: fix a contributor name
	  gnulib: update
	  tests: synch line -> syncline, for consistency
	  tests: synclines: style changes
	  tests: synclines: fix perl invocation
	  regen
	  c++: trailing end-of-lines in %parse-param
	  tests: simplify

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	remove support for lint
	Basically revert commit 12ce2df60d16961eaa03a5aa009eeaa645e4e1cb.
	http://lists.gnu.org/archive/html/bison-patches/2012-08/msg00004.html

	* data/c.m4, data/glr.c, data/yacc.c (YYID): Remove.
	No longer use ARGSUSED.
	* src/getargs.c: Restore simpler inclusion of getopt.h (anyway, since
	then we now use gnulib which certainly protects us from such issues).

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: renamings after knr removal
	* data/c.m4 (b4_yydestruct_generate, b4_yy_symbol_print_generate):
	Rename as...
	(b4_yydestruct_define, b4_yy_symbol_print_define): these, for consistency.
	* data/glr.c, data/glr.cc, data/yacc.c: Adjust.

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-08-03  Akim Demaille  <akim@lrde.epita.fr>

	version 2.6.2
	* NEWS: Record release date.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	c++: fix a comment
	* data/c++.m4: Be sure to attach a ';' to its declaration, otherwise
	it appears in the preceding comment.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: simplify after knr removal
	* data/c.m4 (b4_yydestruct_generate, b4_yy_symbol_print_generate):
	They no longer need an argument, it has a single possible value.
	* data/glr.c, data/yacc.c: Adjust.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: renamings after knr removal
	* data/c.m4 (b4_c_comment_, b4_c_args, b4_c_function_def)
	(b4_c_function_decl, b4_c_formals, b4_c_call, b4_c_arg): Rename as...
	(b4_comment, b4_args, b4_function_define, b4_function_declare,
	b4_formals, b4_function_call, b4_arg): these.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/yacc.c: Adjust.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: b4_args -> b4_join to prepare forthcoming changes
	* data/bison.m4 (b4_args, _b4_args): Rename as...
	(b4_join, _b4_join): these.
	* data/c++.m4, data/lalr1.cc, data/variant.hh: Adjust.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	YYPARSE_PARAM: drop support
	* data/yacc.c: No longer support it.
	* doc/bison.texi, tests/headers.at: Adjust.
	* NEWS: Document.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: remove K&R C support
	* data/c.m4 (b4_c_modern, b4_c_knr_formal_names, b4_c_knr_formal_decls)
	(b4_c_knr_formal_decl, b4_c_formal_names, b4_c_formal_decls)
	(b4_c_formal_decl): Remove.
	(b4_c_ansi_formal_names, b4_c_ansi_formal_decls, b4_c_ansi_formal_decl):
	Rename as...
	(b4_c_formal_names, b4_c_formal_decls, b4_c_formal_decl):
	these.
	* data/glr.c, data/glr.cc, data/yacc.c: Adjust.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: update.
	* NEWS: Catch up with the other changes from 2.6.1.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	yacc: remove trailing end of line at end of file
	There are still spurious spaces at the end of some lines.  But this is
	addressed in the master branch, and I am reluctant to try to backport
	this.

	* data/yacc.c, data/glr.c, data/lalr1.cc, data/glr.cc: here.
	* tests/calc.at (AT_CHECK_SPACES): New.
	Use it.
	Be sure not to introduce trailing empty lines in the *.y files.
	* NEWS: Doc it.
	* cfg.mk (syntax-check): Remove the exception.

2012-08-02  Akim Demaille  <akim@lrde.epita.fr>

	thanks: fix a contributor name
	* THANKS: On his request.

2012-08-01  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-08-01  Akim Demaille  <akim@lrde.epita.fr>

	tests: synch line -> syncline, for consistency
	* tests/synclines.at: Do it, as "syncline" is used consistently
	everywhere else in Bison.

2012-08-01  Akim Demaille  <akim@lrde.epita.fr>

	tests: synclines: style changes
	* tests/synclines.at (AT_TEST_SYNCLINE): Rename as...
	(AT_TEST): this.
	Use pushdef/popdef.
	Formatting changes.
	Use '+' instead of '*' where appropriate.

2012-08-01  Akim Demaille  <akim@lrde.epita.fr>

	tests: synclines: fix perl invocation
	Reported by Summum Bonum.

	* tests/synclines.at: Fix Perl invocation: its -f is not like sed's.

2012-08-01  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-08-01  Akim Demaille  <akim@lrde.epita.fr>

	c++: trailing end-of-lines in %parse-param
	* src/parse-gram.y (add_param): No only skip ' ' and '\t', skip all
	leading and trailing spaces.
	* tests/regression.at (Lex and parse params): Check it.
	* NEWS: Document it.

2012-08-01  Akim Demaille  <akim@lrde.epita.fr>

	tests: simplify
	* tests/regression.at: Remove useless compilations: AT_FULL_COMPILE
	includes the compilation by bison.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	todo: more items
	* TODO: $ in the epilogue, and obstack_copy.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	Merge branch 'maint'
	* maint:
	  use obstack_printf
	  scanner: restore a missing start condition
	  gnulib: update
	  maint: post-release administrivia
	  version 2.6.1
	  gnulib: update
	  maint: fix some syntax-check issues
	  tests: do not depend on __cplusplus to decide for C++ or C output

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	tests: comment changes
	* tests/actions.at, tests/input.at: here.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	tests: really check the set of generated files
	* tests/output.at (AT_CHECK_OUTPUT): It used to check that the
	expected files are indeed generated, but it did not check that
	there are no additional ones.
	Do that, and adjust expectations (in particular alphabetical order).

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: do not create stack.hh without %defines
	* data/stack.hh (b4_stack_define): New.
	* data/lalr1.cc: Use it when %defines is not passed.
	* tests/output.at: Adjust expected output.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: location.hh and position.hh are not generated without %defines
	* data/location.cc (b4_position_define, b4_location_define): New.
	(location.hh, position.hh): Generate only if %defines.
	* data/lalr1.cc: therefore, define these classes when locations are
	needed, but headers are not generated.
	* tests/output.at: Check that these files are not generated.
	* NEWS: Document.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: no longer require %defines.
	* data/lalr1.cc: Generate the parser header only when %defines is
	passed.
	* tests/calc.at: Check it.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: style changes
	* data/glr.c, data/lalr1.cc: Use more consistent comments,
	and YY_NULL declaration.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc, lalr1.cc: define b4_shared_declarations
	* data/glr.cc, data/lalr1.cc: here.
	The name is no longer right, but at least it is consistent with
	the other skeletons.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: no longer require location support
	* data/glr.cc: Use b4_locations_if where appropriate.
	* data/lalr1.cc: M4 quotation changes to highlight code duplication
	with glr.cc.
	* tests/calc.at: Check glr.cc with and without %location.
	While at it, fuse multiple %parse-params into one.
	* tests/actions.at: Simplify.
	* NEWS: Doc this.
	Some other wording changes.

2012-07-31  Akim Demaille  <akim@lrde.epita.fr>

	use obstack_printf
	This is not just nicer, it is also much safer, since we were
	using sprintf...

	* bootstrap.conf: Require it.
	* src/system.h (obstack_fgrow1, obstack_fgrow2, obstack_fgrow3)
	(obstack_fgrow4): Remove.
	Adjust dependencies.

2012-07-30  Akim Demaille  <akim@lrde.epita.fr>

	scanner: restore a missing start condition
	$ flex src/scan-skel.l
	src/scan-skel.l:145: multiple <<EOF>> rules for start condition SC_AT_DIRECTIVE_ARGS
	src/scan-skel.l:145: multiple <<EOF>> rules for start condition SC_AT_DIRECTIVE_SKIP_WS
	This is warning, and it seems there are no means to make it an error.

	* src/scan-skel.l: Restore the start-condition INITIAL for an <<EOF>>
	clause.

2012-07-30  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-07-30  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-07-30  Akim Demaille  <akim@lrde.epita.fr>

	version 2.6.1
	* NEWS: Record release date.

2012-07-30  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix some syntax-check issues
	* cfg.mk: Nuke the following warnings which are confused by our
	text reports (that state that the error token is number 256).
	  prohibit_magic_number_exit
	  ../../doc/bison.texi:8170:error (256)
	  ../../tests/conflicts.at:570:error (256)
	  ../../tests/conflicts.at:673:error (256)
	  ../../tests/conflicts.at:811:error (256)
	  ../../tests/conflicts.at:1154:error (256)
	  ../../tests/regression.at:281:error (256)
	  ../../tests/regression.at:582:error (256)
	  maint.mk: use EXIT_* values rather than magic number

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	tests: do not depend on __cplusplus to decide for C++ or C output
	Since we do support compiling C code with a C++ compiler.

	* tests/actions.at (Qualified $$ in actions): Use AT_SKEL_CC_IF.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint: (29 commits)
	  regen
	  synclines: remove spurious empty line
	  also support $<foo>$ in the %initial-action
	  skeletons: b4_dollar_pushdef and popdef to simpify complex definitions
	  regen
	  printer/destructor: translate only once
	  factor the handling of m4 escaping
	  news: schedule the removal of the ";" hack
	  style changes in the scanners
	  regen
	  support $<tag>$ in printers and destructors
	  scan-code: factor the handling of the type in $<TYPE>$
	  muscles: fix another occurrence of unescaped type name
	  glr.cc: fix the handling of yydebug
	  gnulib: update
	  formatting changes
	  tests: fix an assertion
	  tests: adjust to GCC 4.8, which displays caret errors
	  be sure to properly escape type names
	  obstack_quote: escape and quote for M4
	  muscles: shuffle responsabilities
	  muscles: make private functions static
	  muscles: rename private functions/macros
	  obstack_escape: escape M4 characters
	  remove dead macro
	  maint: style changes
	  doc: avoid problems with case insensitive file systems
	  configure: fix botched quoting
	  news: fix typo.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	synclines: remove spurious empty line
	* data/bison.m4 (b4_syncline): Do not start with an empty line.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	also support $<foo>$ in the %initial-action
	scan-code.l is already passing argument to b4_dollar_dollar for the
	initial acton, but its definition (of b4_dollar_dollar) does not use
	this argument.

	Generalize this definition, and use it for the %initial-action too.

	* data/c.m4 (b4_dollar_dollar_, b4_dollar_pushdef, b4_dollar_popdef):
	Instead of expecting a pointer, require a value, and use ".".
	Since they are now generic enough, move to...
	* data/c-like.m4: this new file.
	* data/c.m4, data/java.m4: Load it.
	* data/glr.c, data/lalr1.cc, data/lalr1.java, data/yacc.c: Use
	b4_dollar_pushdef for the %initial-action.
	* tests/actions.at: Check that.
	* data/Makefile.am: Adjust.
	* NEWS, doc/bison.texi: Document.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: b4_dollar_pushdef and popdef to simpify complex definitions
	M4 is really making it uselessly hard to define macros that define
	macros.
	* data/c.m4 (b4_dollar_pushdef, b4_dollar_popdef): New.
	Use it.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	printer/destructor: translate only once
	Currently "%printer {...} a b c d e f" translates the {...} six times.
	Not only is this bad for time and space, it also issues six times the
	same warnings.

	* src/symlist.h, src/symlist.c (symbol_list_destructor_set)
	(symbol_list_printer_set): Take the action as code_props instead of
	const char *.
	* src/parse-gram.y: Translate these actions here.
	* src/scan-code.h: Comment change.
	* tests/input.at: Check that warnings are issued only once.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	factor the handling of m4 escaping
	The conversion from @ to @@ and so forth is coded is too many
	different places.  Factor, a bit.

	* src/scan-code.l: Instead of duplicating the logic of obstack_escape,
	use it.
	It sure is less efficient, but the cost is negligible.
	This allows to factor rules that are alike.
	And to factor some start-condition clauses.
	* tests/input.at (Stray $ or @): New.
	* NEWS: Document it.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	news: schedule the removal of the ";" hack
	scan-code.l is significantly more complex because of this.

	* NEWS: Doc it.

2012-07-27  Akim Demaille  <akim@lrde.epita.fr>

	style changes in the scanners
	* src/scan-code.l, src/scan-skel.l: Use a more traditional indentation
	style for start-conditions.
	Prefer "continue" to a comment, for empty actions.
	Strip useless {}.
	Remove useless start-condition clauses.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	support $<tag>$ in printers and destructors
	* src/scan-code.l (SC_SYMBOL_ACTION): Accept $<tag>$, not just $$.
	* data/c.m4 (b4_dollar_dollar_): New.
	(b4_symbol_actions): Let b4_dollar_dollar use b4_dollar_dollar_.
	* NEWS, doc/bison.texi: Document it.
	* tests/actions.at: Check this for C and C++.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	scan-code: factor the handling of the type in $<TYPE>$
	* src/scan-code.l (fetch_type_name): New.
	(handle_action_dollar): Use it.
	(gt_ptr): Remove, useless.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	muscles: fix another occurrence of unescaped type name
	* src/output.c (quoted_output): Split into...
	(quoted_output, string_output): these.
	Use the former when outputting a type_name.
	* tests/input.at: Check this case.
	* src/symtab.h: Comment changes.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: fix the handling of yydebug
	* data/glr.cc (yydebug_): Remove, unused.
	(set_debug_level, debug_level): Work on yydebug instead.
	* doc/bison.texi, NEWS: Document this.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	formatting changes
	* src/symtab.h: here.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix an assertion
	* tests/local.at (AT_YYLEX_DEFINE): Be sure to check the array
	against its length, not its size in bytes.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: adjust to GCC 4.8, which displays caret errors
	With GCC 4.8, the tests on synclines are skipped.  Transform

	  input.y:1:2: error: #error "1"
	   #error "1"
	    ^

	into

	  input.y:1: #error "1"

	* tests/synclines.at (AT_SYNCLINES_COMPILE): Do it, using Perl instead of
	sed.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	be sure to properly escape type names
	* src/scan-code.l: Use obstack_quote when passing type_name to m4.
	* tests/input.at (Code injection): New.
	* NEWS: Document it.
	Thanks to Paul Eggert for the wording.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	obstack_quote: escape and quote for M4
	* src/system.h (obstack_quote): New.
	* src/muscle-tab.c: Use it instead of obstack_escape where applicable.
	* src/scan-code.l: Since obstack_quote supports NULL, leave type_name
	as NULL instead of defaulting to "".

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	muscles: shuffle responsabilities
	* src/muscle-tab.c (muscle_boundary_grow): Be in charge of quotation,
	instead of leaving this to the caller.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	muscles: make private functions static
	* src/muscle-tab.h, src/muscle-tab.c (muscle_boundary_grow)
	(muscle_location_grow): Now static.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	muscles: rename private functions/macros
	* src/muscle-tab.c (MUSCLE_COMMON_DECODE, muscle_string_decode)
	(muscle_location_decode): Not related to muscles, rename as...
	(COMMON_DECODE, string_decode, location_decode): these.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	obstack_escape: escape M4 characters
	* src/muscle-tab.h (MUSCLE_OBSTACK_SGROW): This is not related to
	muscles, so move to, and rename as...
	* src/system.h (obstack_escape): this.
	Adjust dependencies.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	remove dead macro
	* src/system.h (DEFAULT_TMPDIR): Remove, unused.

2012-07-26  Akim Demaille  <akim@lrde.epita.fr>

	maint: style changes
	* src/scan-code.l: Remove useless braces.
	Formatting changes.
	Prefer NULL to 0.
	* src/muscle-tab.c, src/system.h: Formatting changes.

2012-07-24  Akim Demaille  <akim@lrde.epita.fr>

	doc: avoid problems with case insensitive file systems
	makeinfo --html generates index.html, and the node "Index" will result
	in Index.html.  On case insensitive file systems, such as on Mac OS X
	by default, this results in a single, invalid, file (Texinfo 4.13).
	See http://lists.gnu.org/archive/html/bug-texinfo/2012-07/msg00032.html

	* doc/bison.texi (Index): Rename as...
	(Index of Terms): this.

2012-07-24  Stefano Lattarini  <stefano.lattarini@gmail.com>  (tiny change)

	configure: fix botched quoting
	* configure.ac: In the AC_SUBST call on 'VALGRIND_PREBISON'.  Without
	this change, when running ./configure, I see:

	    ...
	    checking for valgrind... valgrind
	    ./configure: line 35221: -q: command not found
	    checking for Java compiler... gcj -C -fsource=1.3 -ftarget=1.4
	    ...

2012-07-24  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-07-24  Akim Demaille  <akim@lrde.epita.fr>

	yystype, yyltype: remove.
	* data/c.m4: here.
	* NEWS: Doc it.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	regen

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	YYFAIL: remove.
	* data/lalr1.java, data/yacc.c, src/scan-code.l: Remove YYFAIL support.
	* NEWS, TODO: Update.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	todo: update.
	* TODO: obsolete items.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	regen.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	space changes.
	* data/bison.m4 (b4_symbol_action): Remove spurious eol in the output.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	parser: fix %printer usage.
	* src/parse-gram.y: Instead of stderr, using yyo.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	parser: factor the handling of code_props
	* src/parse-gram.y: Now that %printer and %destructor are treated
	equally, let...
	(code_props_type): handle them.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	parser: factor handling of type tags
	* src/parse-gram.y: Now that <*> and <> are processed like regular
	tags, let...
	(tag): handle them.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	regen.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	simplify the handling of <> and <*>'s code_props.
	Currently they are treated in separated variables, contrary to other
	<TYPE> code_props.  This duplicates code (and messages for translators)
	uselessly, as demonstrated by the fact that thanks to this patch, now
	useless <*> and <> code_props are reported like the others.

	* src/parse-gram.y (generic_symlist_item): Treat "<*>" and "<>" as regular
	type tags.
	* src/symlist.h, src/symlist.c (symbol_list_default_tagged_new)
	(symbol_list_default_tagless_new,SYMLIST_DEFAULT_TAGGED)
	(SYMLIST_DEFAULT_TAGLESS): Remove.
	* src/symtab.h, src/symtab.c (default_tagged_code_props)
	(default_tagless_code_props, default_tagged_code_props_set)
	(default_tagless_code_props_set): Remove.
	(symbol_code_props_get): Default to <*> or <>'s code_props.

	* tests/actions.at: Complete expected errors: there are new warnings.
	* tests/input.at: Likewise.
	(Useless printers or destructors): Extend.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	allow modification on retrieved code_props.
	The logic to compute the %printer or %destructor to used (i.e., a
	code_props) is implemented twice: one, of course, in
	symbol_code_props_get, and another time in symbol_check_defined to
	record the fact that a code_props is used (so that we can reported
	unused ones).  Let the former use the latter.

	I would probably use "mutable" in C++ and keep these guys const,
	but this is C.  And casting away constness triggers warnings.

	* src/scan-code.h, src/scan-code.l (code_props_none): Is not const.
	* src/symtab.h, src/symtab.c (symbol_code_props_get): The symbol
	is not const.
	(symbol_check_defined): Use it.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	maint: regen.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix bison's own header guards.
	Because I'm using a VPATH build with an absolute srcdir, I have
	GRAM__USERS_AKIM_SRC_GNU_BISON_SRC_PARSE_GRAM_H.  Before, I was using
	a relative srcdir, and had GRAM_______SRC_PARSE_GRAM_H (coming from
	../../).  Let it be GRAM_SRC_PARSE_GRAM_H.

	* tests/bison.in: Do not depend on the value of $top_srcdir for
	Bison itself.
	If we were to use relative paths from .c to .y, we would not have
	this problem.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	maint: add missing const.
	* src/symtab.h, src/symtab.c (symbol_print): here.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	style changes.
	* src/parse-gram.y, src/symtab.c: Space changes.
	* src/symtab.h: Comment changes.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	autoconf: update.
	* submodules/autoconf: here.
	No significant changes for our use of m4sugar.m4.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	output: no longer use b4_tokens.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/lalr1.java, data/yacc.c:
	Since the previous commit, b4_tokens_define and the like no longer need
	b4_tokens.
	* src/output.c (token_definitions_output): Remove.

2012-07-22  Akim Demaille  <akim@lrde.epita.fr>

	output: use the token list to define the yytokentype
	There are currently two systems used to pass information about tokens to
	m4: the original one, and another, which is used for instance for
	printers and destructors, variants etc.  Move to using only the latter.

	* data/bison.m4 (b4_symbol_map, b4_token_visible_if)
	(b4_token_has_definition, b4_any_token_visible_if, b4_token_format): New.
	* data/c++.m4, data/c.m4, data/glr.c, data/java.m4: Adjust to use them.

2012-07-20  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix VPATH issue
	* examples/test: With an absolute VPATH build, "../" is incorrect.

2012-07-20  Akim Demaille  <akim@lrde.epita.fr>

	news: fix typo.
	* NEWS: here.
	Reported by Ben Pfaff.

2012-07-19  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  maint: update gnu-web-doc-update.
	  maint: post-release administrivia
	  version 2.6
	  maint: prepare for release 2.6
	  maint: post-release administrivia
	  version 2.5.91
	  maint: prepare NEWS.
	  maint: fix spaces.
	  tests: adjust to case where the C compiler is actually a C++ compiler
	  tests: fix dependencies
	  doc: fix Texinfo command
	  maint: Valgrind on OS X.
	  tests: be sure that backups are safe.
	  maint: dead comment.
	  tests: refactor for legibility.
	  tests: refactor the bison invocations.
	  maint: fix syntax-check ignore patterns.
	  gnulib: update
	  gnulib: update.
	  gnulib: update

2012-07-19  Akim Demaille  <akim@lrde.epita.fr>

	maint: update gnu-web-doc-update.
	* gnulib: here.

2012-07-19  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-07-19  Akim Demaille  <akim@lrde.epita.fr>

	version 2.6
	* NEWS: Record release date.

2012-07-19  Akim Demaille  <akim@lrde.epita.fr>

	maint: prepare for release 2.6
	* NEWS: here.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	version 2.5.91
	* NEWS: Record release date.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	maint: prepare NEWS.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix spaces.
	* build-aux/Makefile.am: here.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	tests: adjust to case where the C compiler is actually a C++ compiler
	* tests/atlocal.in (CC_IS_CXX): New.
	* tests/headers.at (Several parsers): Use it.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix dependencies
	* tests/Makefile.am: we need atconfig and atlocal to be up to date
	when calling testsuite.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix Texinfo command
	* doc/bison.texi: In parens, use @pxref.

2012-07-18  Akim Demaille  <akim@lrde.epita.fr>

	maint: Valgrind on OS X.
	* configure.ac (VALGRIND_PREBISON): New.
	* tests/Makefile.am (maintainer-check-valgrind): Use it.
	* etc/darwin11.4.0.supp: New.
	* configure.ac, etc/Makefile.am: Use it.
	* configure.ac: Disable Valgrind on Mac OS X.
	* README-hacking: Explain why.

2012-07-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: be sure that backups are safe.
	* tests/local.at (at_save_special_files): here.

2012-07-17  Akim Demaille  <akim@lrde.epita.fr>

	maint: dead comment.
	* etc/README: here.

2012-07-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: refactor for legibility.
	* tests/local.at (AT_BISON_CHECK_WARNINGS, AT_BISON_CHECK_WARNINGS_):
	New.

2012-07-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: refactor the bison invocations.
	* tests/local.at (m4_null_if, AT_BISON_CHECK_): New.

2012-07-17  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix syntax-check ignore patterns.
	* cfg.mk: here.

2012-07-17  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update

2012-07-16  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update.
	* gnulib: Update so that gitlog-to-changelog support --srcdir.
	* Makefile.am: Use it.

2012-07-10  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update
	* bootstrap, build-aux/.gitignore, gnulib, m4/.gitignore: update.

2012-07-06  Akim Demaille  <akim@lrde.epita.fr>

	maint: minor fixes
	* NEWS: restore missing entry.
	* cfg.mk: Adjust to *.texinfo -> *.texi.
	* src/symtab.c: Spaces fixes.

2012-07-06  Akim Demaille  <akim@lrde.epita.fr>

	tests: address g++-4.8 warnings.
	list.yy: In function 'yy::parser::symbol_type yylex()':
	list.yy:107:29: error: typedef 'token' locally defined but not used
	  [-Werror=unused-local-typedefs]
	   typedef yy::parser::token token;
	                             ^

	* tests/c++.at (AT_CHECK_VARIANTS): here.

2012-07-06  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  maint: update release instructions
	  maint: post-release administrivia
	  version 2.5.90
	  build: fix gen-ChangeLog call.
	  gnulib: update.
	  tests: fix SKIP_IF for Java.
	  api.prefix: incompatible with %name-prefix.
	  api.prefix: strengthen the tests and fix push-parsers.
	  skeletons: style changes.
	  NEWS: minor changes.
	  api.prefix: improve the documentation for YYDEBUG.
	  gnulib: update.

2012-07-06  Akim Demaille  <akim@lrde.epita.fr>

	maint: update release instructions
	* README-hacking: here.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	version 2.5.90
	* NEWS: Record release date.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	build: fix gen-ChangeLog call.
	* Makefile.am: Be sure to catch errors, and fix option name

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update.
	* gnulib/build-aux/do-release-commit-and-tag: Fix.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix SKIP_IF for Java.
	* tests/local.at (AT_JAVA_COMPILE): here.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	api.prefix: incompatible with %name-prefix.
	* data/bison.m4: Make it incompatible.
	* tests/input.at: Check that it is.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	api.prefix: strengthen the tests and fix push-parsers.
	* tests/calc.at: Check api.prefix in addition to %name-prefix.
	* tests/headers.at: Check push parsers and pure interface.
	* tests/local.at: Use YYLTYPE renamed.
	* data/yacc.c (b4_declare_yyparse_push_): Handle api.prefix.
	* doc/bison.texi: Style changes.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: style changes.
	* data/bison.m4: Define default values after having defined
	the support macros.
	Kill a dead comment.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: minor changes.
	* NEWS: style changes.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	api.prefix: improve the documentation for YYDEBUG.
	* doc/bison.texi: Explain how api.prefix is applied to YYDEBUG.

2012-07-05  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update.
	* bootstrap, gnulib: Update.
	* cfg.mk (syntax-check): Don't check "error" usage in bison.texi.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  tests: headers.at: strengthen.
	  glr.cc: do not override C++ definitions by C macros.
	  YYLLOC_DEFAULT: factor, and don't export it in headers.
	  api.prefix: do not use #define to handle YYSTYPE_IS_TRIVIAL etc.
	  tests: portability fixes.
	  c++: fewer #includes in the headers.
	  glr.cc: formatting changes.
	  tests: more logs.
	  api.prefix: also rename YYDEBUG.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	tests: headers.at: strengthen.
	* tests/headers.at (Several headers): Be stricter when checking
	the exported macros.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: do not override C++ definitions by C macros.
	* data/glr.c: here.
	* data/glr.cc: Fix overquotation.
	* tests/headers.at: Comment changes.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	YYLLOC_DEFAULT: factor, and don't export it in headers.
	* data/c++.m4, data/c.m4 (b4_yylloc_default_define): New.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/yacc.c: Use it.
	* data/glr.cc: Do not define YYLLOC_DEFAULT in the header file,
	but in the implementation one.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	api.prefix: do not use #define to handle YYSTYPE_IS_TRIVIAL etc.
	The following mixture is insane:

	  #define YYSTYPE_IS_TRIVIAL PREFIX_STYPE_IS_TRIVIAL
	  #if (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)

	since, of course YYSTYPE_IS_TRIVIAL is defined.  Instead we could
	define YYSTYPE_IS_TRIVIAL as PREFIX_STYPE_IS_TRIVIAL only when the
	later is defined, but let's avoid stacking CPP on top of M4: rather, use

	  #if (defined PREFIX_STYPE_IS_TRIVIAL && PREFIX_STYPE_IS_TRIVIAL)

	* data/glr.c, data/yacc.c: Use YYSTYPE_IS_TRIVIAL, YYSTYPE_IS_DECLARED,
	YYLTYPE_IS_TRIVIAL and YYLTYPE_IS_DECLARED under their api.prefix-renamed
	name.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	tests: portability fixes.
	Reported by Hydra.

	* tests/headers.at (Several headers): Be sure to include config.h
	in the files to compile.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	c++: fewer #includes in the headers.
	* data/lalr1.cc: Define YY_NULL in the *.cc file, it is not needed
	in the header.
	* data/location.cc: iosfwd suffices.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: formatting changes.
	* data/glr.cc: here.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	tests: more logs.
	* tests/headers.at (Several parsers): Here.

2012-07-04  Akim Demaille  <akim@lrde.epita.fr>

	api.prefix: also rename YYDEBUG.
	The testsuite in master has shown weird errors for the "Mulitple
	Parsers" tests: the caller of p5.parse() received some apparently
	random value, while tracing p5.parse() showed that the function was
	consistently returning 0.

	It happens when mixing several parser headers, some generated without
	%debug, others with.  In particular the C++ parser was generated with
	%debug, i.e., with:

	  #ifndef YYDEBUG
	  # define YYDEBUG 1
	  #endif

	and compiled separatedly.  Yet, its header was included after the one
	of another parser, this time without %debug, i.e., with

	  #ifndef YYDEBUG
	  # define YYDEBUG 0
	  #endif

	in its header.  As a result, the parser was compiled with YYDEBUG set,
	but its header was used without.  Since the layout of the objects are
	then completely different, boom.

	Therefore, do not change the value of YYDEBUG.  Rather, use it as a
	default value for <API.PREFIX>DEBUG.

	* data/c.m4 (b4_YYDEBUG_define): New.
	(b4_declare_yydebug): Rename as...
	(b4_yydebug_declare): this, for consistency.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/yacc.c: Use it.
	* NEWS: Document it.

2012-07-02  Akim Demaille  <akim@lrde.epita.fr>

	formatting changes.
	* data/lalr1.cc: here.

2012-07-02  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: spell fixes.
	* NEWS: here.
	Reported by Stefano Lattarini.

2012-07-02  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  NEWS: spell check.
	  api.prefix.

2012-07-02  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: spell check.
	* NEWS: here.

2012-06-29  Akim Demaille  <akim@lrde.epita.fr>

	api.prefix.
	* data/c.m4 (b4_api_prefix, b4_api_PREFIX): New.
	(b4_prefix, b4_union_name, b4_token_enums, b4_declare_yylstype): Use them.
	* data/glr.c, data/yacc.c, data/glr.cc, data/lalr1.cc: Use them to change
	the prefix of exported preprocessor symbols.
	* src/getargs.c (usage): Ditto.
	* tests/headers.at (Several parsers): New.
	* tests/local.at (AT_API_PREFIX): New.
	AT_YYSTYPE, AT_YYLTYPE): Adjust.
	* doc/bison.texi (Multiple Parsers): Move documentation of %name-prefix to...
	(Table of Symbols): here.
	(Multiple Parsers): Document api.prefix.
	(%define Summary): Point to it.
	Use @code for variable names.
	(Bison Options): -p/--name-prefix are obsoleted.
	* NEWS: Announce api.prefix.

2012-06-29  Victor Santet  <victor.santet@epita.fr>

	warnings: display warnings categories
	* src/complain.c (error_message): Call 'warnings_print_categories'.
	* src/gram.c (grammar_rules_useless_report): Display itself warning
	category.
	* tests/actions.at, tests/conflicts.at, tests/existing.at,
	tests/input.at, tests/named-refs.at, tests/output.at, tests/reduce.at,
	tests/regression.at, tests/skeletons.at: Adjust.
	* NEWS: Document this.

2012-06-29  Victor Santet  <victor.santet@epita.fr>

	warnings: be ready to print warnings categories
	A function to print warnings categories, like -Wyacc, -Wother, etc.

	* src/complain.h, src/complain.c (print_warning_categories): New function.
	* src/output.c (ARRAY_CARDINALITY): Move it to file 'src/system.h'.
	* src/complain.h (enum warnings): New value, 'silent', "complain"
	must not display the warning type.

2012-06-29  Akim Demaille  <akim@lrde.epita.fr>

	maint: prepare forthcoming changes
	* src/gram.c (rule_rhs_print): Do not print new line anymore.
	(rule_print): Make it static.
	* src/closure.c, src/derives.c, src/gram.c: Adjust.

2012-06-29  Victor Santet  <victor.santet@epita.fr>

	style changes
	* src/complain.c, src/reader.c, src/reduce.c, src/main.c:
	Fix indentation.
	Simplify a bit.

2012-06-28  Akim Demaille  <akim@lrde.epita.fr>

	regen.

2012-06-28  Victor Santet  <victor.santet@epita.fr>

	warnings: factoring: complaints
	* src/complain.c (error_message): Accept warning categories (an integer) as
	argument.
	Location is a 'const location *' instead of 'location *'.
	(ERROR_MESSAGE): Delete it.
	* src/complain.c, src/complain.h (complains): New function.
	(complain, complain_at, complain_at_indent): Generic functions for
	complaints. Call 'complains'.
	(warn_at, warn_at_indent, warn, yacc_at, midrule_value_at)
	(fatal_at, fatal): Delete them. Adjust dependencies.
	* src/complain.h (enum warnings): New fields 'complaint' and 'fatal'.
	* bootstrap.conf (XGETTEXT_OPTIONS): Adjust.

2012-06-28  Victor Santet  <victor.santet@epita.fr>

	warnings: move them to complain.c.
	* src/getargs.h, src/getargs.c (warnings, warnings_flags): Move to...
	* src/complain.h, src/complain.c: Here.

2012-06-28  Victor Santet  <victor.santet@epita.fr>

	warnings: rename the categories
	Forthcoming changes will use the warning categories much more often,
	so shortening them will improve readability.

	* src/complain.c, src/complain.h, src/conflicts.c,
	* src/getargs.c, src/getargs.h, src/gram.c (enum warnings):
	s/warnings_/W/g.

2012-06-28  Akim Demaille  <akim@lrde.epita.fr>

	fix merge.
	* data/bison.m4: Use b4_error_verbose_if after it was defined.

2012-06-28  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  tests: use the generalized default yylex.
	  tests: AT_YYERROR_DEFINE: prepare for list of ints.
	  skeletons: no longer define YYLSP_NEEDED.
	  c++: do not export YYTOKEN_TABLE and YYERROR_VERBOSE.

2012-06-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: use the generalized default yylex.
	* tests/actions.at, tests/glr-regression.at, tests/regression.at: here.

2012-06-28  Akim Demaille  <akim@lrde.epita.fr>

	tests: AT_YYERROR_DEFINE: prepare for list of ints.
	* tests/local.at (AT_YYERROR_DEFINE): Don't add quotes, check their
	presence to detect char/int types.
	* tests/actions.at, tests/conflicts.at, tests/glr-regression.at,
	* tests/push.at, tests/regression.at: Adjust.

2012-06-27  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: no longer define YYLSP_NEEDED.
	* data/c.m4, data/glr.cc: here.
	* NEWS, TODO: Adjust.

2012-06-27  Akim Demaille  <akim@lrde.epita.fr>

	c++: do not export YYTOKEN_TABLE and YYERROR_VERBOSE.
	* src/output.c (prepare_symbols): Do not define b4_token_table.
	(prepare): Define b4_token_table_flag.
	* data/bison.m4 (b4_token_table_if): New.
	Arm it when error-verbose.
	* data/glr.c, data/yacc.c (YYTOKEN_TABLE): Remove.
	Use m4.
	* data/lalr1.cc: Likewise.
	(YYERROR_VERBOSE): Remove.
	* NEWS, doc/bison.texi: Document this.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  maint: use *.texi.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	maint: use *.texi.
	This is more consistent with the other packages, and Automake-NG
	supports only *.texi.

	* doc/bison.texinfo: Rename as...
	* doc/bison.texi: this.
	* doc/Makefile.am, examples/calc++/Makefile.am: Adjust.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  tests: do not output m4 set up.
	  tests: use the generic yyerror function.
	  tests: use assert instead of plain abort.
	  tests: improve the generic yylex implementation.
	  tests: generalize the compilation macros.
	  tests: fix confusion between api.prefix and name-prefix.
	  maint: gitignores.
	  yacc: work around the ylwrap limitation.

2012-06-26  Victor Santet  <victor.santet@epita.fr>

	warnings: raise warning for useless printers or destructors
	* src/scan-code.h (code_props): Add field 'is_used'.
	(CODE_PROPS_NONE_INIT): Adjust.
	* src/scan-code.l (code_props_plain_init, code_props_symbol_action_init)
	(code_props_rule_action_init): Instead of implementing several
	times the initialization of the code_props structures,
	use code_props_none_init.
	* src/symtab.c (symbol_check_defined): If a symbol does not have a
	destructor (resp. printer) but has a type which has a destructor (resp.
	printer), then set field 'is_used' to true.
	(semantic_type_check_defined): If a type has a destructor (resp. printer)
	but all symbols of this type have already a destructor (resp. printer),
	then raise a warning.
	* tests/input.at (Useless printers or destructors): New.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: do not output m4 set up.
	* tests/local.at (AT_BISON_OPTION_PUSHDEFS, AT_BISON_OPTION_POPDEFS):
	Use a diversion to avoid outputting comments etc.
	Removes 17k lines from testsuite (10% of the number of lines).

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: use the generic yyerror function.
	* tests/actions.at (_AT_CHECK_PRINTER_AND_DESTRUCTOR): Factor.
	Use AT_YYERROR_DEFINE.
	Therefore, instead of using stdout, use and check stderr.
	* tests/glr-regression.at (Uninitialized location when reporting ambiguity):
	Use AT_YYERROR_DEFINE.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: use assert instead of plain abort.
	* tests/actions.at, tests/calc.at, tests/conflicts.at,
	* tests/cxx-type.at, tests/glr-regression.at, tests/input.at,
	* tests/named-refs.at, tests/regression.at, tests/torture.at,
	* tests/local.at:
	Prefer assert to abort.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: improve the generic yylex implementation.
	* tests/local.at (AT_YYSTYPE, AT_YYLTYPE): New.
	(AT_YYLEX_FORMALS): Use them.
	(AT_YYLEX_DEFINE): Be independent of the location implementation.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: generalize the compilation macros.
	* tests/local.at (AT_COMPILE, AT_COMPILE_CXX): If OUTPUT ends with ".o",
	then append the "natural" extension for the input file (.c or .cc).
	If there is no source, pass -c.
	* tests/headers.at, tests/input.at, tests/regression.at: Adjust.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix confusion between api.prefix and name-prefix.
	* tests/local.at (AT_NAME_PREFIX): Take api.prefix into account.
	(AT_API_PREFIX): Rename as...
	(AT_API_prefix): this.
	Do not take %name-prefix into account.
	Fix misuses.

2012-06-26  Akim Demaille  <akim@lrde.epita.fr>

	maint: gitignores.

2012-06-25  Victor Santet  <victor.santet@epita.fr>

	warnings: useless semantic types
	* src/symtab.h (symbol_list): Represent semantic types as structure
	'semantic_type'.
	* src/symlist.c (symbol_list_type_new): Allocate this structure.
	(symbol_list_code_props_set): Set this semantic type's status to used if it
	was not declared.
	* src/symtab.c (semantic_types_sorted): New.
	(semantic_type_new): Set the new semantic type's location appropriately.
	(symbol_check_defined): If a symbol has a type, then set this type's status
	to "declared".
	(semantic_type_check_defined, semantic_type_check_defined_processor): Same
	as symbol_check_defined and symbol_check_defined_processor, but for semantic
	types.
	(symbol_check_defined): Check semantic types usefulness.
	* src/symtab.h (semantic_type): New fields 'location' and 'status'.
	* src/symtab.h, src/symtab.c (semantic_type_new)
	(semantic_type_from_uniqstr, semantic_type_get): Accept a location as a
	supplementary argument.
	* tests/input.at (Unassociated types used for printer of destructor): New.
	* tests/c++.at (AT_CHECK_VARIANTS): Fix an error caught by this commit.

2012-06-25  Akim Demaille  <akim@lrde.epita.fr>

	yacc: work around the ylwrap limitation.
	* data/yacc.c (b4_shared_declarations): Include the header guards.
	Do not include the header in the *.c file, duplicate it.
	* NEWS (Future Changes): Extend, and announce the forthcoming change
	about the use of the parser header.

2012-06-25  Akim Demaille  <akim@lrde.epita.fr>

	fix for printers and destructors.
	The previous "code_props: factor more" patch sends has_%printer
	etc. to m4, instead of has_printer.

	* src/output.c (prepare_symbol_definitions): Fix value of pname.

2012-06-25  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  tests: more uniformity.
	  tests: handle locations in a more generic way.
	  tests: handle locations in the generic yyerror functions.
	  tests: fix AT_CHECK_CALC.
	  tests: improve infrastructure
	  tests: factor.
	  skeletons: minor style changes
	  tests: AT_LANG.
	  c skeletons: factor the declaration of yylloc and yylval.
	  news: condemn YYPARSE_PARAM and YYLEX_PARAM.
	  maint: regen.

2012-06-22  Akim Demaille  <akim@lrde.epita.fr>

	code_props: factor more.
	* src/symtab.h, src/symtab.c (code_props_type_string): No longer static.
	* src/output.c (CODE_PROPS): Remove, we can now iterate on both the
	destructor and the printer.
	(SET_KEY2): New.

2012-06-22  Victor Santet  <victor.santet@epita.fr>

	maint: factor the handling of %printer and %destructor
	There is too much code duplication between %printer and %destructor.
	We used to have two functions for each action: the first one for
	destructors, the second one for printers. Factor using a
	'code_props_type', and an array of code_props instead of two
	members.

	* src/symlist.h, src/symlist.c (symbol_list_destructor_set)
	(symbol_list_printer_set): Fuse into...
	(symbol_list_code_props_set): this.
	* src/symtab.h, src/symtab.c (default_tagged_destructor)
	(default_tagged_printer): Fuse into...
	(default_tagged_code_props): this.
	(default_tagless_destructor, default_tagless_printer)
	(default_tagless_code_props): Likewise.
	(code_props_type_string): new.
	(symbol_destructor_set, symbol_destructor_get, semantic_type_destructor_set)
	(default_tagged_destructor_set, default_tagless_destructor_set)
	(symbol_printer_set, symbol_printer_get, semantic_type_printer_set)
	(default_tagged_printer_set, default_tagless_printer_set): Replace by...
	(symbol_code_props_set, symbol_code_props_get, semantic_type_code_props_set)
	(default_tagged_code_props_set, default_tagless_code_props_set): these.
	* src/parse-gram.y (grammar_declaration): Adjust.
	* src/output.c (CODE_PROP, grammar_declaration): Ditto.
	* src/reader.c (symbol_should_be_used): Ditto.

2012-06-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: more uniformity.
	* tests/local.at (AT_LEX_FORMALS, AT_LEX_ARGS, AT_LEX_PRE_FORMALS)
	(AT_LEX_PRE_ARGS): Rename as...
	(AT_YYLEX_FORMALS, AT_YYLEX_ARGS, AT_YYLEX_PRE_FORMALS)
	(AT_YYLEX_PRE_ARGS): these, for consistency.
	(AT_API_PREFIX): Take %name-prefix into account.
	(AT_YYLEX_PROTOTYPE): New.
	Use it.
	* tests/actions.at, tests/calc.at, tests/cxx-type.at: Adjust to
	use them.

2012-06-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: handle locations in a more generic way.
	* tests/local.at (AT_YYERROR_PROTOTYPE): New.
	Use it.
	* tests/cxx-type.at: Extensive revamp to use a more traditional
	quotation scheme, and to use the generic yyerror implementation.
	Prefer Autotest macros to CPP macros.
	* tests/java.at: .

2012-06-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: handle locations in the generic yyerror functions.
	* tests/local.at (AT_YYERROR_DECLARE_EXTERN, AT_YYERROR_DECLARE)
	(AT_YYERROR_DEFINE): Handle locations for C and C++.
	* tests/calc.at: Use it for C++ (as C has extra arguments which
	are not yet handled by AT_BISON_OPTION_PUSHDEFS).
	* tests/actions.at: Adjust.

2012-06-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix AT_CHECK_CALC.
	* tests/calc.at (AT_CHECK_CALC): Contrary to its documentation,
	the test was skipped if given a second argument.
	Unused feature, remove it.

2012-06-22  Akim Demaille  <akim@lrde.epita.fr>

	tests: improve infrastructure
	* tests/local.at (AT_LANG): Use c++ instead of cxx for C++.
	Adjust dependencies.
	(AT_YYERROR_DECLARE_EXTERN, AT_YYERROR_DECLARE): Issue nothing
	for C++/Java.
	(AT_YYERROR_DEFINE): Use m4_case.
	(AT_JAVA_COMPILE): Use AT_SKIP_IF.

2012-06-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: factor.
	* tests/glr-regression.at, tests/output.at, tests/push.at,
	* tests/regression.at, tests/torture.at, tests/actions.at:
	Use AT_YYLEX_* and AT_YYERROR_*.

2012-06-21  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: minor style changes
	* data/glr.c, data/yacc.c: here.

2012-06-21  Akim Demaille  <akim@lrde.epita.fr>

	tests: AT_LANG.
	* tests/local.at (AT_BISON_OPTION_PUSHDEFS, AT_BISON_OPTION_POPDEFS):
	Define/undefine AT_LANGE
	(AT_LANG_COMPILE): New.
	(AT_FULL_COMPILE): Use AT_LANG.

2012-06-21  Victor Santet  <victor.santet@epita.fr>

	symtab: refactoring
	Prepares forthcoming changes.

	* src/symtab.c (symbols_do): Accept the hash table and the sorted
	list as arguments. Adjust dependencies.

2012-06-21  Akim Demaille  <akim@lrde.epita.fr>

	maint: address syntax-check issues.
	* examples/calc++/local.mk: Space changes.
	* src/files.c: Avoid unmarked_diagnostics.
	* src/output.c: Remove useless include.

2012-06-21  Akim Demaille  <akim@lrde.epita.fr>

	c skeletons: factor the declaration of yylloc and yylval.
	There is one difference: now, even without --defines, we generate
	extern declarations for these variables.  The factoring is worth it.
	* data/c.m4 (b4_declare_yylstype): Declare them.
	* data/glr.c, data/yacc.c: Adjust.

2012-06-21  Akim Demaille  <akim@lrde.epita.fr>

	news: condemn YYPARSE_PARAM and YYLEX_PARAM.
	* NEWS: here.
	(Bison 1.875): Add %parse-param and %lex-param.
	* doc/bison.texinfo: Spello.

2012-06-20  Akim Demaille  <akim@lrde.epita.fr>

	fix warnings for useless %printer/%destructor
	The previous commit, which turns into a warning what used to be an
	error:

	    %printer {} foo;
	    %%
	    exp: '0';

	has two shortcomings: the warning is way too long (foo is reported
	to be useless later), and besides, it also turns into a warning much
	more serious errors:

	   %printer {} foo;
	   %%
	   exp: foo;

	Reduce the amount to warnings in the first case, restore the error in
	the second.

	* src/symtab.h (status): Add a new inital state: undeclared.
	* src/symtab.c (symbol_new): Initialize to undeclared.
	(symbol_class_set): Simplify the logic of the code that neutralize
	the "redeclared" warning after the "redefined" one.
	(symbol_check_defined): "undeclared" is also an error.
	* src/reader.c (grammar_current_rule_symbol_append): Symbols appearing
	in a rule are "needed".
	* src/symlist.c (symbol_list_destructor_set, symbol_list_printer_set):
	An unknown symbol appearing in a %printer/%destructor is "used".
	* src/reduce.c (nonterminals_reduce): Do not report as "useless" symbols
	that are not used (e.g., those that for instance appeared only in a
	%printer).
	* tests/input.at (Undeclared symbols used for a printer or destructor):
	Improve the cover the cases described above.

2012-06-20  Akim Demaille  <akim@lrde.epita.fr>

	gitignore: test-driver.

2012-06-20  Akim Demaille  <akim@lrde.epita.fr>

	maint: style changes.
	* src/reduce.c (reduce_grammar_tables): Define variables with their
	initial value.

2012-06-20  Akim Demaille  <akim@lrde.epita.fr>

	news: fixes.
	* NEWS: Fix spelling.

2012-06-20  Victor Santet  <victor.santet@epita.fr>

	warnings: used but undeclared symbols are warnings
	We used to raise an error if a symbol appears only in a %printer or
	%destructor.  Make it a warning.

	* src/symtab.h (status): New enum.
	(symbol): Replace the binary "declared" with the three-state "status".
	Adjust dependencies.
	* src/symtab.c (symbol_check_defined): Needed symbols are an error,
	whereas "used" are simply warnings.
	* src/symlist.c (symbol_list_destructor_set, symbol_list_printer): Set
	symbol status to 'used' when associated to destructors or printers.
	* input.at (Undeclared symbols used for a printer or destructor): New.

2012-06-20  Akim Demaille  <akim@lrde.epita.fr>

	maint: regen.
	* Makefile.am (regen): New target.

2012-06-20  Akim Demaille  <akim@lrde.epita.fr>

	regen.

2012-06-20  Akim Demaille  <akim@lrde.epita.fr>

	maint: regen.
	* Makefile.am (regen): New target.

2012-06-19  Akim Demaille  <akim@lrde.epita.fr>

	tests: enhance AT_YYERROR_DEFINE.
	* tests/local.at: Handle the fact that locations are no longer
	needed with lalr1.cc.

2012-06-19  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  maint: formatting changes.
	  tests: support api.prefix.
	  tests: pacify font-lock-mode.
	  tests: remove test covered elsewhere.
	  tests: factor the declaration/definition of yyerror and yylex.
	  regen.
	  tests: portability issues.
	  tests: call the parser from another compilation unit.
	  glr.c, yacc.c: declare yydebug in the header.
	  skeletons: use header guards.
	  tests: improve AT_FULL_COMPILE.
	  tests: reorder.
	  tests: strengthen the test on generated headers inclusion
	  yacc.c: instead of duplicating y.tab.h inside y.tac.c, include it.
	  yacc.c: factor.

2012-06-19  Akim Demaille  <akim@lrde.epita.fr>

	maint: formatting changes.
	* NEWS: Fix indentation of code snippets.
	Untabify.

2012-06-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: support api.prefix.
	* tests/local.at (AT_BISON_OPTION_PUSHDEFS, AT_BISON_OPTION_POPDEFS):
	Define AT_API_PREFIX.
	(AT_YYERROR_DEFINE, AT_YYERROR_DECLARE_EXTERN, AT_YYLEX_DECLARE_EXTERN)
	(AT_YYLEX_DEFINE): Use it.
	* tests/input.at, tests/regression.at, tests/torture.at: Add
	AT_BISON_OPTION_PUSHDEFS/POPDEFS.

2012-06-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: pacify font-lock-mode.
	* tests/local.at: here.

2012-06-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: remove test covered elsewhere.
	* tests/headers.at (%union and --defines): Remove, pretty useless and
	insignificant.

2012-06-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: factor the declaration/definition of yyerror and yylex.
	* tests/local.at (AT_YYERROR_DECLARE, AT_YYERROR_DECLARE_EXTERN)
	(AT_YYERROR_DEFINE, AT_YYLEX_DECLARE, AT_YYLEX_DECLARE_EXTERN)
	(AT_YYLEX_DEFINE): New.
	Must be used inside AT_BISON_OPTION_PUSHDEFS/POPDEFS pair.
	* tests/actions.at, tests/conflicts.at, tests/glr-regression.at,
	* tests/headers.at, tests/input.at, tests/named-refs.at,
	* tests/regression.at, tests/skeletons.at, tests/synclines.at,
	* tests/torture.at: Use them.

2012-06-17  Akim Demaille  <akim@lrde.epita.fr>

	regen.

2012-06-17  Akim Demaille  <akim@lrde.epita.fr>

	tests: portability issues.
	* tests/calc.at (AT_CALC_MAIN): Missing include reported by Hydra.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	tests: call the parser from another compilation unit.
	In order to improve the testing of %defines, which exports the
	interface of the generated parser, change the calc.at tests so that
	when %defines is passed, main will be in another compilation unit.  It
	loads the generated header.

	* tests/calc.at (AT_CALC_MAIN): New.
	Includes the definition of the global variables.
	Therefore, now declare them from the %requires section of the parser.
	Adjust to yydebug and yyparse being renamed by %name-prefix.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	glr.c, yacc.c: declare yydebug in the header.
	* data/c.m4 (b4_declare_yydebug): New.
	* data/glr.c, data/yacc.c (b4_shared_declarations): Use it.
	Remove the corresponding code from the parser body.
	* NEWS: Doc this.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: use header guards.
	* data/glr.c, data/glr.cc, data/yacc.c: here.
	* NEWS: Document it.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	tests: improve AT_FULL_COMPILE.
	* tests/local.at: Accept a third argument.
	Simplify quotation pattern.
	Calls for better refactoring, but will suffice for a while.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	tests: reorder.
	* tests/calc.at (power): Move its definition, as a preparation for
	forthcoming changes.
	And space changes.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	tests: strengthen the test on generated headers inclusion
	* tests/headers.at (AT_TEST_CPP_GUARD_H): Accept Bison directives.
	(Invalid CPP headers): Check glr.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: instead of duplicating y.tab.h inside y.tac.c, include it.
	This is already what glr.c and lalr1.cc do.

	* data/yacc.c: here.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	maint: xfdopen, and scope reduction.
	* src/files.h, src/files.c (xfdopen): New.
	* src/output.c (output_skeleton): Use it.
	Reduce the scope of argv.

2012-06-15  Akim Demaille  <akim@lrde.epita.fr>

	maint: space changes
	* configure.ac, src/complain.c: space changes.

2012-06-13  Akim Demaille  <akim@lrde.epita.fr>

	yacc.c: factor.
	yacc.c used to include two almost identical sections: one for the *.h
	file, and another for the *.c file.  The main difference is that in
	the *.c file we used the yy* names (as %name-prefix is handled by
	"#define yy* <prefix>*" before), while the *.hh used <prefix>* names.
	Keep only the later.  If this is troublesome, b4_shared_declarations
	can easily take the desired prefix as argument.

	* data/yacc.c (b4_shared_declarations): New.
	Use it to factor duplicated declarations.

2012-06-13  Stefano Lattarini  <stefano.lattarini@gmail.com>  (tiny change)

	cosmetics: prettify names for compiled object for bison
	* src/local.mk (src_bison_SHORTNAME): Define to "bison".

2012-06-13  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: spello.
	* data/lalr1.cc: Reported by Gilles Espinasse.

2012-06-13  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  skeletons: factor yacc.c and glr.c.
	  glr.c: minor refactoring.
	  tests: remove all the -On flags.
	  maint: fix spello.
	  maint: improve release procedure instructions.
	  gnulib: update readme-release.
	  maint: cfg.mk: manual title.
	  maint: cfg.mk: simplify
	  maint: post-release administrivia

2012-06-12  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: factor yacc.c and glr.c.
	yacc.c and glr.c share common declarations.  Their YYLTYPE are exactly
	equal, and their YYSTYPE are sufficiently alike to be fused (its
	declaration was protected by YYSTYPE_IS_DECLARED in yacc.c, but not in
	glr.c).  Besides, yacc.c duplicated the definitions of YYLTYPE and
	YYSTYPE (*.h/*.c).

	* data/c.m4 (b4_declare_yylstype): New.
	* data/yacc.c, data/glr.c: Use it.

2012-06-12  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: minor refactoring.
	* data/glr.c (b4_shared_declarations): Move from the generated file
	section, to the M4 prologue.

2012-06-12  Akim Demaille  <akim@lrde.epita.fr>

	tests: remove all the -On flags.
	* tests/atlocal.in: Here.
	Reported by Gilles Espinasse.

2012-06-12  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix spello.
	* README-hacking: Here.
	* THANKS: Reported by Gilles Espinasse.

2012-06-12  Akim Demaille  <akim@lrde.epita.fr>

	maint: improve release procedure instructions.
	* gnulib: Update, in particular (README-release).
	* bootstrap.conf: don't require gendocs, provided by gnu-web-doc-update,
	provided by readme-release.
	* README-hacking: Update accordingly.

2012-06-07  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update readme-release.
	* gnulib (readme-release): Now includes the modules it promotes.
	* bootstrap.conf: Simplify accordingly.

2012-06-07  Akim Demaille  <akim@lrde.epita.fr>

	maint: cfg.mk: manual title.
	* cfg.mk (manuel_title): New.

2012-06-07  Akim Demaille  <akim@lrde.epita.fr>

	maint: cfg.mk: simplify
	* cfg.mk: Remove bits provided by maint.mk.

2012-06-07  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	maint: an envvar equal to "00" is 0.
	* src/output.c (prepare): here.
	Reported by Paul Eggert.

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	maint: don't use mbsr?chr.
	Basically, revert ba60c39547a445dee3e07920931b4d7a81843868's move to
	mbs* functions, which was prompted by -DGNULIB_POSIXCHECK.  See
	<http://lists.gnu.org/archive/html/bison-patches/2012-05/msg00052.html>
	and following.

	* bootstrap.conf: No longer ask for them.
	* src/files.c, src/getargs.c, src/location.c,
	* src/parse-gram.c, src/parse-gram.y, src/scan-gram.l,
	* src/symtab.c: s/mbs(r?chr)/str$1/g.

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	maint: use xconcat-filename.
	* bootstrap.conf (gnulib_modules): Request it.
	* src/output.h, src/output.c (compute_pkgdatadir): Rename as...
	(pkgdatadir): this.
	Adjust dependencies.
	* src/output.c (output_skeleton): Reduce the scope of "in".
	Use xconcatenated_filename to simplify the construction of the
	qualified paths to m4sugar.m4, bison.m4, and the selected skeleton.
	There are a few minor differences: the new code uses strchr instead of
	mbschr (but this was not really justified), and the new code does not
	garantee a single slash even if $BISON_PKGDATADIR ends with several
	(which was considered more accurate).  See the discussion at
	<http://lists.gnu.org/archive/html/bison-patches/2012-05/msg00052.html>.

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	maint: minor simplification
	* src/output.c (prepare): Assign use_push_for_pull_flag's value at its
	declaration.

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  version 2.5.1
	  NEWS: prepare for 2.5.1.
	  maint: update release procedure
	  maint: fix comment typos
	  maint: post-release administrivia

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	version 2.5.1
	* NEWS: Record release date.

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: prepare for 2.5.1.
	* NEWS: Be compliant with do-release-commit-and-tag.

2012-06-05  Akim Demaille  <akim@lrde.epita.fr>

	maint: update release procedure
	* bootstrap.conf: Request do-release-commit-and-tag and readme-release.
	* README-hacking: Adjust.

2012-06-05  Jim Meyering  <meyering@redhat.com>

	maint: fix comment typos
	Using http://github.com/lyda/misspell-check, massage its
	output into sed commands to perform the suggested changes.
	Initially, I filtered out the THRU->Through changes, because
	that failed to retain capitalization in the grammar token.
	Instead, do this manually, beforehand:

	sed -i s/THRU/THROUGH/ tests/existing.at
	git ls-files|misspellings -f -|perl -nl \
	  -e '/^(.*?)\[(\d+)\]: (\w+) -> "(.*?)"$/ or next;' \
	  -e '($file,$n,$l,$r)=($1,$2,$3,$4); $q="'\''"; $r=~s/$q/$q\\$q$q/g;'\
	  -e 'print "sed -i $q${n}s!$l!$r!$q $file"'|bash

2012-05-24  Akim Demaille  <akim@lrde.epita.fr>

	build: regen.

2012-05-24  Akim Demaille  <akim@lrde.epita.fr>

	Merge tag 'v2.5.1_rc2'
	Bison 2.5.1_rc2.

	* tag 'v2.5.1_rc2': (34 commits)
	  Bison 2.5.1_rc2.
	  doc: fixes.
	  build: fix ChangeLog generation.
	  c++: compute the header guards.
	  skeletons: remove support for unused directive.
	  lalr1.cc: improve Doxygen documentation.
	  lalr1.cc: extract stack.hh.
	  news: convert to double quotes.
	  space changes.
	  build: do not prototype flex-generated functions.
	  build: fix ChangeLog generation.
	  Bison 2.5.1_rc1.
	  tests: save/restore Autotest special files when checking XML support.
	  tests: AT_SAVE_SPECIAL_FILES / AT_RESTORE_SPECIAL_FILES.
	  tests: honor TESTSUITEFLAGS in all the check targets.
	  build: do not enable c++ warnings on 0 when nullptr is not supported.
	  maint: update gnulib.
	  build: config.in.h.
	  build: move silent rules.
	  glr.c: reduce variable scopes.
	  maint: maintainer-release-check.
	  maint: shush a syntax-check.
	  maint: prefer "commit message" to "log entry".
	  command line: fix minor leaks.
	  maint: we no longer maintain the ChangeLog.
	  maint: fix the generation of the synclines for bison's parser.
	  maint: regen.
	  maint: import the xmemdup0 gnulib module.
	  maint: remove left-over gnulib modules.
	  maint: ignore files imported by autopoint.
	  build: AC_PROG_LEX: use more readable variable names.
	  maint: regen src/parse-gram.[ch]
	  maint: simplify parse-gram.y
	  maint: s/strncpy/memcpy/, when equivalent

2012-05-23  Akim Demaille  <akim@lrde.epita.fr>

	maint: post-release administrivia
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* cfg.mk (old_NEWS_hash): Auto-update.

2012-05-23  Akim Demaille  <akim@lrde.epita.fr>

	Bison 2.5.1_rc2.
	* NEWS: Update.

2012-05-23  Akim Demaille  <akim@lrde.epita.fr>

	doc: fixes.
	* doc/bison.texinfo: Fix errors spotted by syntax-check.

2012-05-23  Akim Demaille  <akim@lrde.epita.fr>

	build: fix ChangeLog generation.
	* gnulib: Update to get newest gitlog-to-changelog.
	* bootstrap: Update.
	* Makefile.am (gen-ChangeLog): Fix for Bison's git log style.

2012-05-21  Akim Demaille  <akim@lrde.epita.fr>

	c++: compute the header guards.
	This is a frequent request.  Recently pointed out by Wei Song,
	<http://lists.gnu.org/archive/html/help-bison/2012-05/msg00002.html>.

	* data/c.m4 (b4_tocpp, b4_cpp_guard, b4_cpp_guard_open)
	(b4_cpp_guard_close): New.
	* data/lalr1.cc, data/location.cc, data/stack.hh: Use them.
	* TODO (Header Guards): Move to...
	* NEWS: here.
	Formatting changes.

2012-05-21  Akim Demaille  <akim@lrde.epita.fr>

	skeletons: remove support for unused directive.
	* src/scan-skel.l (@dir_prefix@): Remove support, has never been
	used, not even in the commit that introduced it,
	2b81e969ea04c1a6502928ba7e847ec8ff7dcb2f.

2012-05-21  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: improve Doxygen documentation.
	* data/location.cc: Qualify file names with directory name.

2012-05-21  Akim Demaille  <akim@lrde.epita.fr>

	lalr1.cc: extract stack.hh.
	See commit 51bacae6b58fd5c6cce861f00440dc917384625e.
	* data/stack.hh: New, extracted from...
	* data/lalr1.cc: here.
	* data/Makefile.am: Adjust.

2012-05-21  Akim Demaille  <akim@lrde.epita.fr>

	news: convert to double quotes.
	* NEWS: Convert from `quoted' to "quoted".
	Reported by Stefano Lattarini.
	http://lists.gnu.org/archive/html/bison-patches/2012-05/msg00039.html

2012-05-21  Akim Demaille  <akim@lrde.epita.fr>

	space changes.
	* src/flex-scanner.h: Indent nested cpp directives.

2012-05-21  Akim Demaille  <akim@lrde.epita.fr>

	build: do not prototype flex-generated functions.
	Some versions of Flex, possibly modified by the distribution package
	maintainers, have incompatible signatures.  Since newer versions of
	Flex prototype their functions, avoid the conflicts in that case.
	Reported by Stefano Lattarini.
	<http://lists.gnu.org/archive/html/bug-bison/2012-05/msg00012.html>.

	* src/flex-scanner.h (FLEX_VERSION_GT): New.
	Use it to issue prototypes for flex-generated functions only for
	versions up to 2.5.31, in accordance with the comment.
	See commit dc9701e848f27ae64b6ddcf809580998667d60f2.
	Use it to define yylex_destroy when needed.

2012-05-16  Akim Demaille  <akim@lrde.epita.fr>

	build: fix ChangeLog generation.
	* Makefile.am (gen-ChangeLog): Fix for VPATH builds.

2012-05-14  Akim Demaille  <akim@lrde.epita.fr>

	Bison 2.5.1_rc1.
	* NEWS: Update.
	* src/parse-gram.c, src/parse-gram.h: Regen.

2012-05-11  Akim Demaille  <akim@lrde.epita.fr>

	tests: save/restore Autotest special files when checking XML support.
	Currently the test 248, "parse-gram.y: LALR = IELR", fails
	BISON_TEST_XML is set.

	* tests/local.at (AT_BISON_CHECK_XML): Belt: Save/restore files.
	* tests/regression.at (parse-gram.y: LALR = IELR): Suspenders: Don't
	rely on expout.
	Each one of these changes suffices.

2012-05-11  Akim Demaille  <akim@lrde.epita.fr>

	tests: AT_SAVE_SPECIAL_FILES / AT_RESTORE_SPECIAL_FILES.
	Some of our macros play with expout and other Autotest special files,
	which may break their callers (e.g., currently TESTSUITEFLAGS='248
	BISON_TEST_XML=1' fails).

	There is already some support for this.  Expand it to be ready to use
	it elsewhere.

	* tests/local.at (AT_RESTORE_SPECIAL_FILES, AT_SAVE_SPECIAL_FILES)
	(at_save_special_files, at_restore_special_files): New.
	(AT_BISON_CHECK_NO_XML): Use them.

2012-05-11  Akim Demaille  <akim@lrde.epita.fr>

	tests: honor TESTSUITEFLAGS in all the check targets.
	* tests/Makefile.am (installcheck-local): Simplify.
	(maintainer-check-posix, maintainer-check-valgrind): Honor
	$(TESTSUITEFLAGS).

2012-05-11  Akim Demaille  <akim@lrde.epita.fr>

	build: do not enable c++ warnings on 0 when nullptr is not supported.
	* configure.ac (WARN_CXXFLAGS): Enable -Wzero-as-null-pointer-constant
	only when nullptr is supported..

2012-05-11  Akim Demaille  <akim@lrde.epita.fr>

	maint: update gnulib.
	* bootstrap, gnulib: Update.

2012-05-09  Akim Demaille  <akim@lrde.epita.fr>

	build: config.in.h.
	Historically we used config.hin (where everybody else used
	config.h.in) to please DOS.  Now that we use gnulib, there are already
	tons of files with several dots, especially *.in.h.

	* configure.ac: Rename config.hin as config.in.h.

2012-05-09  Akim Demaille  <akim@lrde.epita.fr>

	build: move silent rules.
	* tests/Makefile.am: In the generation of the test suite.

2012-05-09  Akim Demaille  <demaille@gostai.com>

	glr.c: reduce variable scopes.
	* data/glr.c: Where appropriate, fuse variable declarations followed
	by assignments by variable declarations with a value.
	Where appropriate, introduce new scopes to limit variable spans.

2012-05-08  Akim Demaille  <akim@lrde.epita.fr>

	maint: maintainer-release-check.
	* tests/Makefile.am (maintainer-release-check): New.
	* Makefile.am (MAINTAINER_CHECKS): New.
	Support maintainer-release-check.
	* README-hacking: Document it, and syntax-check too.

2012-05-08  Akim Demaille  <akim@lrde.epita.fr>

	maint: shush a syntax-check.
	* cfg.mk: lib/timevar is not planned to be gnulib'ed, as it comes
	from GCC.

2012-05-08  Akim Demaille  <akim@lrde.epita.fr>

	maint: prefer "commit message" to "log entry".
	* README-hacking: here.
	Suggested by Stefano Lattarini.

2012-05-08  Akim Demaille  <akim@lrde.epita.fr>

	command line: fix minor leaks.
	* src/getargs.c (getargs): Free pointers before allocating them new
	content.

2012-05-08  Akim Demaille  <akim@lrde.epita.fr>

	maint: we no longer maintain the ChangeLog.
	* .gitattributes: No need to merge it.
	* README-hacking: Update release instructions.

2012-05-06  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix the generation of the synclines for bison's parser.
	* tests/bison.in: Import from master the changes that make
	this script generate synclines that are independant of the
	builddir/srcdir user's set up.

2012-05-06  Akim Demaille  <akim@lrde.epita.fr>

	maint: regen.
	* src/parse-gram.c, src/parse-gram.h: Regen.

2012-05-06  Akim Demaille  <akim@lrde.epita.fr>

	maint: import the xmemdup0 gnulib module.
	* bootstrap.conf: Require this module.
	* src/parse-gram.y: Include xmemdup0.h.

2012-05-06  Akim Demaille  <akim@lrde.epita.fr>

	maint: remove left-over gnulib modules.
	* bootstrap.conf (gnulib_modules): Remove pipe-posix.
	* lib/.gitignore, m4/.gitignore: Remove files that we no longer use.

2012-05-06  Akim Demaille  <akim@lrde.epita.fr>

	maint: ignore files imported by autopoint.
	* m4/.gitignore: here.

2012-05-06  Akim Demaille  <akim@lrde.epita.fr>

	build: AC_PROG_LEX: use more readable variable names.
	* m4/flex.m4 (AC_PROG_LEX): Prefer LEX_IS_FLEX to FLEX.
	Prefer true/false to yes/no for such variables.
	* configure.ac: Adjust.

2012-05-06  Jim Meyering  <meyering@redhat.com>

	maint: regen src/parse-gram.[ch]

2012-05-06  Jim Meyering  <meyering@redhat.com>
	    Akim Demaille  <akim@lrde.epita.fr>

	maint: simplify parse-gram.y
	* src/parse-gram.y (add_param): Use xmemdup0 in place of
	xmalloc+memcpy, and strspn in place of an open-coded loop.

2012-05-06  Jim Meyering  <meyering@redhat.com>

	maint: s/strncpy/memcpy/, when equivalent
	* src/output.c (output_skeleton): Use memcpy, not strncpy,
	since the source is known to fit in the destination buffer.
	* src/parse-gram.y (%skeleton): Likewise.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: formatting changes.
	* data/glr.c: Fix indentation.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/master'
	* origin/master:
	  glr.c: untabify.
	  glr.cc: untabify.
	  glr.cc: formatting changes.
	  glr.cc: remove unused signature.
	  glr.cc: properly declare locations are const where appropriate.
	  doc: fix @xref.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: untabify.
	* data/glr.c: here.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: untabify.
	* data/glr.cc: here.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: formatting changes.
	* data/glr.cc: Fit in 80 columns.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: remove unused signature.
	* data/glr.cc (yydestruct_): Not used, remove.
	It is yydestruct which is used.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	glr.cc: properly declare locations are const where appropriate.
	* data/glr.cc (yyerror): The location is const.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix @xref.
	* doc/bison.texinfo: here.

2012-05-04  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint: (22 commits)
	  tests: ignore code coverage/profiling failure messages
	  doc: fix some invalid @ref.
	  build: fix previous commit.
	  install-pdf: fix.
	  NEWS: Update.
	  %printer: support both yyo and yyoutput.
	  doc: mfcalc: demonstrate %printer.
	  tests: style changes.
	  build: require Flex.
	  build: flex.m4: check for Flex.
	  build: flex.m4: quote properly.
	  build: flex.m4.
	  build: autoconf: update.
	  glr: eliminate last bits of unwanted locations.
	  NEWS: 2.6 will drop K&R.
	  TODO: remove dead items.
	  TODO: import from master.
	  gnulib: update.
	  maint: update NEWS.
	  doc: fix index.
	  doc: fix documentation of YYERROR.
	  c++: more YY_NULL

2012-05-02  Akim Demaille  <akim@lrde.epita.fr>

	tests: ignore code coverage/profiling failure messages
	The Hydra buildfarm provides code coverage analysis.  For some reason,
	in some test cases, code coverage data seem to be incompatible, and
	generate error messages at parser run-time.  Ignore these messages so
	that (i) these tests do pass, (ii) coverage results be provided by
	Hydra.

	* tests/local.at (AT_PARSER_CHECK): Ignore messages for failed merges
	of code coverage/profiling results.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix some invalid @ref.
	* doc/bison.texinfo: Fix incorrect @ref uses.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	build: fix previous commit.
	* bootstrap: Update from gnulib.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	install-pdf: fix.
	* gnulib: Fix install-pdf in po/ and runtime-po/.
	Reported by Hans Aberg.
	Fixed by Joel E. Denny.
	http://lists.gnu.org/archive/html/bug-bison/2011-05/msg00008.html

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: Update.
	* NEWS: Spell check.
	(%printer): is now documented.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	%printer: support both yyo and yyoutput.
	lalr1.cc used to support yyo, but not yyoutput.  Support both,
	but document only yyoutput (at least until there is some consensus
	on this).

	* data/c.m4 (yy_symbol_value_print): Also support yyo.
	* data/glr.cc  (yy_symbol_value_print_): Support both yyo and yyoutput.
	* data/lalr1.cc: Also support yyoutput.
	* doc/bison.texinfo: Explicitly use yyoutput in the examples.
	* examples/mfcalc/mfcalc.test: Test the -p option.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	doc: mfcalc: demonstrate %printer.
	* doc/bison.texinfo (Printer Decl): New.
	Number mfcalc.y snippets so that they are output in
	the proper order.
	(The mfcalc Main): Use yydebug.
	(Debugging): Simplify the text.
	(Enabling Traces, Mfcalc Traces, The YYPRINT Macro): New.
	(Table of Symbols): Document YYPRINT and YYFPRINTF.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	tests: style changes.
	* tests/input.at: Use "print" in %printer instead of "destroy".
	It is unused, so we don't care, yet it is less surprising.
	* tests/actions.at: Comment changes.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	%printer: support both yyo and yyoutput.
	lalr1.cc used to support yyo, but not yyoutput.  Support both,
	but document only yyoutput (at least until there is some consensus
	on this).

	* data/c.m4 (yy_symbol_value_print): Also support yyo.
	* data/glr.cc  (yy_symbol_value_print_): Support both yyo and yyoutput.
	* data/lalr1.cc: Also support yyoutput.
	* doc/bison.texinfo: Explicitly use yyoutput in the examples.
	* examples/mfcalc/mfcalc.test: Test the -p option.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	doc: mfcalc: demonstrate %printer.
	* doc/bison.texinfo (Printer Decl): New.
	Number mfcalc.y snippets so that they are output in
	the proper order.
	(The mfcalc Main): Use yydebug.
	(Debugging): Simplify the text.
	(Enabling Traces, Mfcalc Traces, The YYPRINT Macro): New.
	(Table of Symbols): Document YYPRINT and YYFPRINTF.

2012-04-16  Akim Demaille  <akim@lrde.epita.fr>

	tests: style changes.
	* tests/input.at: Use "print" in %printer instead of "destroy".
	It is unused, so we don't care, yet it is less surprising.
	* tests/actions.at: Comment changes.

2012-04-10  Akim Demaille  <akim@lrde.epita.fr>

	build: require Flex.
	* configure.ac: Require Flex.

2012-04-10  Akim Demaille  <akim@lrde.epita.fr>

	build: flex.m4: check for Flex.
	* m4/flex.m4 (_AC_PROG_LEX_YYTEXT_DECL): Check that $LEX
	supports some of the Flex options, and exclusive start conditions.
	Define FLEX to 'yes'/'', as AC_PROG_CC does for GCC.

2012-04-10  Akim Demaille  <akim@lrde.epita.fr>

	build: flex.m4: quote properly.
	* m4/flex.m4: Use quotes more systematically.

2012-04-10  Akim Demaille  <akim@lrde.epita.fr>

	build: flex.m4.
	* m4/flex.m4: New.
	An exact copy of what is in Autoconf currently.

2012-04-10  Akim Demaille  <akim@lrde.epita.fr>

	build: autoconf: update.
	* submodules/autoconf: Update.
	There are no changes in data/m4sugar/foreach.m4, and the
	changes in data/m4sugar/m4sugar.m4 are minor.

2012-04-10  Akim Demaille  <akim@lrde.epita.fr>

	glr: eliminate last bits of unwanted locations.
	* data/glr.c (YYLTYPE): Do not define when locations are
	not demanded.
	Adjust all dependencies.

2012-04-10  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: 2.6 will drop K&R.
	* NEWS: here.
	(glr.c): Fix a spello.

2012-04-09  Akim Demaille  <akim@lrde.epita.fr>

	TODO: remove dead items.
	* TODO (Documentation, %printer, Java): Remove, already done (or just
	waiting for approval).
	(Fortran, BTYacc): Remove, there does not seem to be demand.

2012-04-09  Akim Demaille  <akim@lrde.epita.fr>

	TODO: import from master.
	* TODO: Copy the current version.

2012-04-08  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix bison wrapper.
	* tests/bison.in (PERL): Fix.

2012-04-08  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix some invalid @ref.
	* doc/bison.texinfo: Fix incorrect @ref uses.

2012-04-08  Akim Demaille  <akim@lrde.epita.fr>

	build: extexi: support out-of-order blocks.
	* examples/extexi (%file_output): Remove.
	(&process): Accept "FILE: BLOCK-NUM" requests.

2012-04-08  Akim Demaille  <akim@lrde.epita.fr>

	build: look for Perl in configure.
	Bison uses "/usr/bin/perl" or "perl" in several places, and it does
	not appear to be a problem.  But, at least to make it simpler to
	change PERL on the make command line, check for perl in configure.

	* configure.ac (PERL): New.
	* doc/Doxyfile.in, doc/local.mk, examples/local.mk,
	* tests/bison.in: Use it.

2012-04-08  Akim Demaille  <akim@lrde.epita.fr>

	maint: rewrite extexi in Perl.
	* examples/extexi: Rewrite in Perl.
	* examples/local.mk (extract): Adjust.

2012-04-07  Akim Demaille  <akim@lrde.epita.fr>

	build: simplify clean.
	* doc/local.mk (CLEANFILES): Since the previous commit,
	there a no longer such files.
	* Makefile.in (CLEANFILES): Initialize here.

2012-04-07  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update.
	* bootstrap.conf (bootstrap_sync): True again.
	It was disabled while waiting for changes to be integrated
	in gnulib's bootstrap, which was done long ago.
	* bootstrap, gnulib: Update.

2012-04-04  Akim Demaille  <akim@lrde.epita.fr>

	maint: update NEWS.
	* NEWS: Fix entry about __attribute__.
	Reorder by "decreasing" order of importance.

2012-04-04  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix index.
	http://lists.gnu.org/archive/html/bison-patches/2012-04/msg00006.html

	* doc/bison.texinfo: Avoid using @def* variant with more
	than the defined entity as main entity, as it results in
	an incorrect index.  For instance, don't document
	{return YYERROR;}, which results in a single index entry
	"return YYERROR;", but rather as typed function whose
	return type is "type", and whose argument list is ";".

2012-04-04  Akim Demaille  <akim@lrde.epita.fr>

	doc: fix documentation of YYERROR.
	* doc/bison.texinfo (Table of Symbols): Fix the documentation
	of YYERROR by copying that from "Action Features".

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	build: fix distcheck issues.
	For some reason it seems that texi2dvi -o no longer forces --clean
	mode, so we have stray TeX compilation files staying in top_builddir
	since TeX is run from there.

	While at it, upgrade the generation of the (completely obsolete)
	reference card.  Target PDF.

	* doc/local.mk (TEXI2DVI): Pass --build-dir.
	(CLEANDIRS): More accurate.
	(doc/refcard.dvi): Replace with...
	(doc/refcard.pdf): this.
	Adjust dependencies.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	build: don't rely on $< in non-pattern rules.
	* doc/local.mk, tests/local.mk: here.
	Reported by Stefano Lattarini.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	doc: upgrade Doxyfile.
	* doc/Doxyfile.in: Run doxygen -u.
	Prompted by Tim Landscheidt.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	doc: help Doxygen find our files.
	* doc/Doxyfile.in (INCLUDE_PATH): here.

2012-04-01  Tim Landscheidt  <tim@tim-landscheidt.de>

	Fix Doxygen generation and clean-up.
	* doc/Doxyfile.in: Amend OUTPUT_DIRECTORY.
	* doc/local.mk (html-local): Amend working directory.
	(CLEANDIRS): Fix "html", remove "latex".

2012-04-01  Tim Landscheidt  <tim@tim-landscheidt.de>

	Fix Doxygen comment.
	* src/InadequacyList.h: s#</t>#</tt>#.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	c++: more YY_NULL
	Caught by maintainer-check-g++.
	* data/glr.c, data/lalr1.cc, data/yacc.c, tests/cxx-type.at,
	* tests/glr-regression.at, tests/push.at:
	When simple to do, avoid expliciting the null ptr.
	Otherwise use YY_NULL.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	c++: more YY_NULL
	Caught by maintainer-check-g++.
	* data/glr.c, data/lalr1.cc, data/yacc.c, tests/cxx-type.at,
	* tests/glr-regression.at, tests/push.at:
	When simple to do, avoid expliciting the null ptr.
	Otherwise use YY_NULL.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'origin/maint'
	* origin/maint:
	  bump to 2012 in skeletons.
	  build: remove ancient Autoconf tests.
	  doc: c++: complete the location documentation.
	  c++: locations: provide convenience constructors.
	  c++: locations: remove useless "inline".
	  glr: do not use locations when they are not requested
	  c++: use nullptr for C++11.
	  build: simplify and improve the compiler warnings for tests.
	  gnulib: update.
	  maint: formatting changes.
	  NEWS: update.
	  Java: Fix syntax error handling without error token.
	  tests: beware of -pedantic on large #line numbers.
	  tests: when using the C++ compiler, use its flags too.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	bump to 2012 in skeletons.
	* data/glr.c, data/glr.cc, data/lalr1.cc, data/lalr1.java,
	* data/location.cc, data/yacc.c: Bump copyright year ranges.

2012-04-01  Akim Demaille  <akim@lrde.epita.fr>

	build: remove ancient Autoconf tests.
	lib/subpipe.c was removed in 47fa574761319b0a422691223c9b8a9a72f36aa2.

	* m4/subpipe.m4: Remove.
	* configure.ac (BISON_PREREQ_SUBPIPE): Remove.

2012-03-31  Akim Demaille  <akim@lrde.epita.fr>

	doc: c++: complete the location documentation.
	* data/location.cc (position::initialize, location::initialize):
	Also accept line and column, with default values.
	* doc/bison.texinfo (C++ position, C++ location): New nodes.
	Describe more thoroughly these classes.
	Fix several Texinfo misuses.

2012-03-31  Akim Demaille  <demaille@gostai.com>

	c++: locations: provide convenience constructors.
	* data/location.cc (position::position): Accept file, line and
	column as arguments with default values.
	Always qualify initial line and column literals as unsigned.
	(location::location): Provide convenience constructors.

2012-03-31  Akim Demaille  <akim@lrde.epita.fr>

	c++: locations: remove useless "inline".
	* data/location.cc: "inline" is implicit when defining
	methods in the class definition.

2012-03-31  Akim Demaille  <akim@lrde.epita.fr>

	glr: do not use locations when they are not requested
	When the test suite runs with -O2 and warnings enabled, G++
	complains of locations being used, but not initialized.
	The simplest is to not use locations.

	* data/glr.c (b4_locuser_formals, b4_locuser_args): New.
	Use them when locations should not be used.
	Use b4_locations_if where appropriate.
	(yyuserAction): Modify the order to the arguments to make
	it more alike the other routines, and to make use of
	b4_locuser_args simpler.

2012-03-31  Akim Demaille  <akim@lrde.epita.fr>

	c++: use nullptr for C++11.
	C++11 introduces "nullptr" which plays the role of C's NULL, in
	replacement of "0".  Fix the C++ skeletons to avoid warnings about
	uses of "0" in place of "nullptr", and improve C skeletons to also use
	this "nullptr" when compiled with a C++11 compiler.

	* configure.ac: More C++ warnings.
	* NEWS (2.5.1): Document this.
	* data/c++.m4, data/c.m4 (b4_null_define): New.
	(b4_null): Use YY_NULL instead of 0.
	* data/glr.c, data/lalr1.cc, data/location.cc, data/yacc.c:
	Call b4_null_define/b4_null where appropriate.
	Use YY_NULL instead of NULL.
	* data/location.cc (initialize): Accept a default argument,
	YY_NULL.
	* tests/actions.at, tests/calc.at: Adjust.

	* data/glr.c, lib/libiberty.h, src/system.h (__attribute__):
	Do not disable it when __STRICT_ANSI__ is defined, as, for
	instance, it disables the __attribute__((unused)) which
	protects us from some compiler warnings.
	This was already done elsewhere in Bison, in 2001, see
	4a0d89369599a2cea01f4fbdf791f426a02cb5a3.
	* tests/regression.at: Adjust output.

2012-03-30  Akim Demaille  <akim@lrde.epita.fr>

	build: simplify and improve the compiler warnings for tests.
	* configure.ac (warn_common, warn_c, warn_cxx): New.
	Use them to compute independently the options supported
	by the C and C++ compilers.
	Don't AC_SUBST the variables passed to gl_WARN_ADD: it
	does it for us.
	(WARN_CFLAGS_TEST, WARN_CXXFLAGS_TEST): Don't aggregate
	$WARN_CFLAGS and $WARN_CXXFLAGS in them now, leave it
	to atlocal.in.
	(O0CFLAGS, O0CXXFLAGS): Move their definition to...
	* tests/atlocal.in: here.
	Be more systematic between C and C++.
	Reorder to factor between variables.
	Propagate all of the variables when --compile-c-with-cxx.

2012-03-30  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update.

2012-03-30  Akim Demaille  <akim@lrde.epita.fr>

	maint: formatting changes.
	* src/system.h: Indent CPP directives using cppi.

2012-03-27  Akim Demaille  <akim@lrde.epita.fr>

	NEWS: update.
	* NEWS: Java fixes, more about the doc changes, liby issues.

2012-03-27  Tim Landscheidt  <tim@tim-landscheidt.de>

	Java: Fix syntax error handling without error token.
	* data/lalr1.java (YYParser::parse): Here.
	* tests/java.at: Add test case.

2012-03-24  Akim Demaille  <akim@lrde.epita.fr>

	tests: beware of -pedantic on large #line numbers.
	* tests/local.at (AT_TEST_TABLES_AND_PARSE): Don't pass -pedantic
	when compiling large canonical-LR parsers.
	Reported by Tys Lefering.
	http://lists.gnu.org/archive/html/bug-bison/2012-03/msg00025.html

2012-03-24  Akim Demaille  <akim@lrde.epita.fr>

	tests: when using the C++ compiler, use its flags too.
	* tests/local.at: Go for colors.
	(--compile-c-with-cxx): New option.
	We used to pass "CC=$CXX" as command line argument,
	but it was not possible to adjust CFLAGS accordingly
	in atlocal, since it is loaded before assignments on
	the command line are honored (so that the command line
	takes precedence).
	* tests/atlocal.in: Implement it.
	* tests/local.mk: Use it.

2012-03-24  Akim Demaille  <akim@lrde.epita.fr>

	tests: style changes in the Makefile.
	* tests/local.mk: Prefer passing variable assignment by
	the command line, instead of the environment, so that it
	is reported in the logs.
	Prefer single quotes for shell literal strings.

2012-03-24  Akim Demaille  <akim@lrde.epita.fr>

	tests: beware of -pedantic on large #line numbers.
	* tests/local.at (AT_TEST_TABLES_AND_PARSE): Don't pass -pedantic
	when compiling large canonical-LR parsers.
	Reported by Tys Lefering.
	http://lists.gnu.org/archive/html/bug-bison/2012-03/msg00025.html

2012-03-24  Akim Demaille  <akim@lrde.epita.fr>

	tests: when using the C++ compiler, use its flags too.
	* tests/local.at: Go for colors.
	(--compile-c-with-cxx): New option.
	We used to pass "CC=$CXX" as command line argument,
	but it was not possible to adjust CFLAGS accordingly
	in atlocal, since it is loaded before assignments on
	the command line are honored (so that the command line
	takes precedence).
	* tests/atlocal.in: Implement it.
	* tests/local.mk: Use it.

2012-03-24  Akim Demaille  <akim@lrde.epita.fr>

	tests: fix dependencies.
	* tests/local.mk (check_SCRIPTS): Add atlocal and atconfig so
	that they are properly updated before running tests.
	(RUN_TESTSUITE_deps): New.
	Use it to factor the dependencies of "*-check" targets,
	especially those that don't bounce to the regular
	"check-local" target, since then they don't benefit from the
	proper dependencies (such as atlocal).

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	Merge remote-tracking branch 'fsf/maint'
	* fsf/maint: (404 commits)
	  doc: update the --verbose report format.
	  doc: spell check.
	  doc: stmt, not stmnt.
	  doc: save width.
	  doc: reformat grammar snippets.
	  doc: use only @example, not @smallexample.
	  doc: style changes.
	  doc: minor fixes to "Understanding" section
	  tests: minor fixes/simplifications
	  tests: be robust to quote style.
	  maint: update gnulib.
	  tests: be robust to POSIXLY_CORRECT being defined.
	  doc: fix environment issues.
	  regen.
	  tests: fix regressions.
	  glr: fix ambiguity reports.
	  doc: stylistic improvements.
	  maint: address sc_prohibit_doubled_word.
	  maint: address sc_prohibit_always-defined_macros.
	  maint: address sc_bindtextdomain, sc_program_name and sc_prohibit_HAVE_MBRTOWC.
	  ...

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: spell fix.
	* doc/bison.texinfo: here.
	Reported by Tim Landscheidt.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: update the --verbose report format.
	* doc/bison.texinfo (Understanding): Adjust to match the
	current format.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: spell check.
	* doc/bison.texinfo: here.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: stmt, not stmnt.
	* doc/bison.texinfo: s/stmnt/stmt/g.  This is a
	much more common abbreviation for "statement".

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: save width.
	* doc/bison.texinfo (Language and Grammar): Use the same
	layout for an example in all the versions, i.e., keep
	as general case what used to be used only for Info.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: reformat grammar snippets.
	* doc/bison.texinfo: Convert the grammar examples to
	use a narrower style.  This helps fitting into the
	@smallbook constraints.
	http://lists.gnu.org/archive/html/bison-patches/2012-03/msg00011.html

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: use only @example, not @smallexample.
	* doc/bison.texinfo: Convert all @smallexamples into @examples.
	Adjust layout where needed.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: style changes.
	* doc/bison.texinfo: Avoid line width issues with TeX.
	Upgrade ancient messages.
	Move some comments to better looking places.
	Add more @group.
	(Mfcalc Symbol Table): Reduce variable scopes.
	Prefer size_t for sizes.
	Prefer declarations with an initial value.
	Fix a @group environment.

2012-03-19  Paul Eggert  <eggert@cs.ucla.edu>

	doc: minor fixes to "Understanding" section
	* doc/bison.texinfo (Understanding): Minor wording fixes and
	improvements.  Fixes problems reported in
	<https://savannah.gnu.org/patch/?4306>.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: update the --verbose report format.
	* doc/bison.texinfo (Understanding): Adjust to match the
	current format.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: spell check.
	* doc/bison.texinfo: here.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: stmt, not stmnt.
	* doc/bison.texinfo: s/stmnt/stmt/g.  This is a
	much more common abbreviation for "statement".

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: save width.
	* doc/bison.texinfo (Language and Grammar): Use the same
	layout for an example in all the versions, i.e., keep
	as general case what used to be used only for Info.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: reformat grammar snippets.
	* doc/bison.texinfo: Convert the grammar examples to
	use a narrower style.  This helps fitting into the
	@smallbook constraints.
	http://lists.gnu.org/archive/html/bison-patches/2012-03/msg00011.html

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: use only @example, not @smallexample.
	* doc/bison.texinfo: Convert all @smallexamples into @examples.
	Adjust layout where needed.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	doc: style changes.
	* doc/bison.texinfo: Avoid line width issues with TeX.
	Upgrade ancient messages.
	Move some comments to better looking places.
	Add more @group.
	(Mfcalc Symbol Table): Reduce variable scopes.
	Prefer size_t for sizes.
	Prefer declarations with an initial value.
	Fix a @group environment.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	c.m4: better newline control with b4_parse_param_use.
	* data/c.m4: Use m4_ifvaln instead of m4_ifval where
	applicable.
	(b4_parse_param_use): Switch order between two nested
	"if"s to avoid useless empty lines.
	Adjust callers to avoid useless lines.

2012-03-19  Akim Demaille  <akim@lrde.epita.fr>

	glr.c: remove (broken) support for YYPRINT.
	YYPRINT uses yytoknum which glr does not define.  Since YYPRINT
	is considered obsolete, and did not work, don't fix its support,
	remove it from glr.c.

	* data/c.m4 (yy_symbol_value_print): Use YYPRINT only for yacc.c.
	* TODO: Done.

2012-03-17  Paul Eggert  <eggert@cs.ucla.edu>

	doc: minor fixes to "Understanding" section
	* doc/bison.texinfo (Understanding): Minor wording fixes and
	improvements.  Fixes problems reported in
	<https://savannah.gnu.org/patch/?4306>.

2012-03-15  Akim Demaille  <akim@lrde.epita.fr>

	TODO: update.

2012-03-15  Akim Demaille  <akim@lrde.epita.fr>

	gnulib: update.

2012-03-13  Akim Demaille  <demaille@gostai.com>

	tests: minor fixes/simplifications
	* tests/local.at (AT_BISON_CHECK_NO_XML): Simplify sed programs,
	quotation, and default value assignments.
	Ensure a proper value to the numeric variables.
	Reported by Lie Yan.
	http://lists.gnu.org/archive/html/bug-bison/2012-03/msg00000.html

2012-03-13  Akim Demaille  <akim@lrde.epita.fr>

	maint: fix distcheck.
	* examples/local.mk (MAINTAINERCLEANFILES): Complete, and rename as...
	(CLEANFILES): this,
	* examples/calc++/local.mk, examples/mfcalc/local.mk,
	* examples/rpcalc/local.mk (CLEANFILES): Add the generated files.

2012-03-13  Akim Demaille  <demaille@gostai.com>

	tests: minor fixes/simplifications
	* tests/local.at (AT_BISON_CHECK_NO_XML): Simplify sed programs,
	quotation, and default value assignments.
	Ensure a proper value to the numeric variables.
	Reported by Lie Yan.
	http://lists.gnu.org/archive/html/bug-bison/2012-03/msg00000.html

2012-03-09  Akim Demaille  <demaille@gostai.com>

	tests: be robust to POSIXLY_CORRECT being defined.
	* tests/local.at (AT_BISON_CHECK_NO_XML): Check if
	POSIXLY_CORRECT is defined, not if it is defined to 1.
	Reported by Lie Yan.
	http://lists.gnu.org/archive/html/bug-bison/2012-03/msg00000.html

2012-03-09  Akim Demaille  <demaille@gostai.com>

	tests: be robust to quote style.
	See <http://lists.gnu.org/archive/html/bug-bison/2012-01/msg00120.html>.

	* src/main.c (main): Define the quoting style we use.
	* tests/atlocal.in: Use ASCII style quotes during the tests.

2012-03-09  Akim Demaille  <demaille@gostai.com>

	maint: update gnulib.
	* gnulib: update.
	* src/scan-gram.l: Don't use the (former version of) STREQ.

2012-03-09  Akim Demaille  <demaille@gostai.com>

	tests: remove quote magic from the bison test wrapper.
	Basically, revert 4c4d35394d1bdb4dc3392482ab002bc111a3378f.

	* tests/bison.in: Leave bison's stderr as is.

2012-03-09  Akim Demaille  <demaille@gostai.com>

	tests: be robust to quote style.
	See <http://lists.gnu.org/archive/html/bug-bison/2012-01/msg00120.html>.

	* src/main.c (main): Define the quoting style we use.
	* tests/atlocal.in: Use ASCII style quotes during the tests.

2012-03-09  Akim Demaille  <demaille@gostai.com>

	avoid direct strncmp calls.
	Before this change, bison would accept either .tab and _tab equivalently,
	whatever the current platform.  Besides, it was not obeying everywhere
	to the possible definition of TAB_EXT to something else than .tab.

	For consistency, handle only TAB_EXT (".tab" on non DJGPP platforms).
	Support for "_tab" is neither documented, nor tested.

	* src/system.h (STRNCMP_LIT): New.
	From Jim Meyering.
	(STRPREFIX_LIT): New.
	* src/files.c, src/getargs.c: Use it.

2012-03-06  Akim Demaille  <demaille@gostai.com>

	tests: be robust to POSIXLY_CORRECT being defined.
	* tests/local.at (AT_BISON_CHECK_NO_XML): Check if
	POSIXLY_CORRECT is defined, not if it is defined to 1.
	Reported by Lie Yan.
	http://lists.gnu.org/archive/html/bug-bison/2012-03/msg00000.html

2012-02-24  Akim Demaille  <demaille@gostai.com>

	build: comment changes.
	* Makefile.am, examples/calc++/local.mk, examples/local.mk,
	* examples/mfcalc/local.mk, examples/rpcalc/local.mk,
	* lib/local.mk, src/local.mk, tests/local.mk:
	Make the copyright licenses more uniform.

2012-02-24  Akim Demaille  <demaille@gostai.com>

	build: fix more example extraction issues.
	* Makefile.am (dist_TESTS): New.
	(TESTS, EXTRA_DIST): Run and ship them.
	* examples/calc++/local.mk: examples/calc++/calc++.stamp no longer
	        exists, don't try to ship it.
	(.yy.stamp): New recipe.
	Use it.
	* examples/calc++/local.mk, examples/mfcalc/local.mk,
	* examples/rpcalc/local.mk:
	Don't ship the sources.
	Adjust the CPPFLAGS: there is nothing left in srcdir.
	(MAINTAINERCLEANFILES): Remove, now we are in builddir.
	(TESTS): Rename as...
	(dist_TESTS): this.

2012-02-24  Akim Demaille  <demaille@gostai.com>

	maint: fix example extraction issues.
	calc++: don't rely on Automake to compile a C++ parser.

	Basically, revert commit 609b3d8096fb0cc1fa4d908b6e1a860ced260bda,
	Automake 1.11.3 is not safe enough for C++ parser.

	* examples/calc++/calc++-parser.hh: Remove.
	* examples/calc++/local.mk (examples/calc++/calc++-parser.stamp):
	New.

	examples: factor the extractions into a single step

	extexi had to be run in the extraction directory.  Now, it can be
	given the files with expected output directory.  This allows to
	use $(*_extracted) variables (before we had to list again their
	members, but limited to their base names).  In turn, this also
	allows fusing the extraction recipes into a single one.

	Also, it is currently too hard (or requires too much duplication,
	since Make wants all the occurrences of the files to be prefixed with
	$(srcdir)/, which is something Automake cannot support for *_SOURCES)
	to work in the source tree.  So extract, and compile scanners and parsers
	in the build tree.

	* examples/extexi (basename): New.
	(BEGIN): Now "file_wanted" maps base name to extracted file name.
	* examples/calc++/local.mk, examples/mfcalc/local.mk,
	* examples/rpcalc/local.mk: Fuse extraction rules into...
	* examples/local.mk: Here.
	(extract, extracted): New.

2012-02-23  Akim Demaille  <demaille@gostai.com>

	maint: use STREQ/STRNEQ.
	* doc/bison.texinfo: Space change.
	* src/system.h (STREQ, STRNEQ): New.
	* src/files.c, src/ielr.c, src/lalr.c, src/muscle-tab.c,
	* src/output.c, src/print.c, src/print_graph.c,
	* src/reader.c, src/scan-skel.l, src/tables.c,
	* src/uniqstr.c:
	Use them.
	* src/scan-gram.l: Do not use streq.h, use system.h's STREQ.
	* cfg.mk: The documentation is an exception.

2012-02-23  Akim Demaille  <demaille@gostai.com>

	doc: fix environment issues.
	* doc/bison.texinfo: Do not use @verbatim, in particular when
	we use @group inside.
	Use @quotation instead of @display for frequently asked questions,
	it looks much nicer.

2012-02-23  Akim Demaille  <demaille@gostai.com>

	doc: fix environment issues.
	* doc/bison.texinfo: Do not use @verbatim, in particular when
	we use @group inside.
	Use @quotation instead of @display for frequently asked questions,
	it looks much nicer.

2012-02-23  Akim Demaille  <demaille@gostai.com>

	regen.
	* src/parse-gram.h, src/parse-gram.c: regen.

2012-02-23  Akim Demaille  <demaille@gostai.com>

	tests: fix regressions.
	Exit status 63 is documented for version-mismatch.
	* bootstrap.conf (gnulib_modules): Remove sysexits.
	* src/system.h (EX_MISMATCH): Define.
	* src/parse-gram.y (version_check): Use it instead of EX_CONFIG.

	Missing includes.
	* tests/calc.at, tests/named-refs.at: Include assert.h.

2012-02-22  Akim Demaille  <demaille@gostai.com>

	maint: gitignore.
	* examples/mfcalc/.gitignore, examples/rpcalc/.gitignore: Fix.

2012-02-21  Akim Demaille  <demaille@gostai.com>

	regen.
	* src/parse-gram.c, src/parse-gram.h: regen.

2012-02-21  Akim Demaille  <demaille@gostai.com>

	tests: fix regressions.
	Exit status 63 is documented for version-mismatch.
	* bootstrap.conf (gnulib_modules): Remove sysexits.
	* src/system.h (EX_MISMATCH): Define.
	* src/parse-gram.y (version_check): Use it instead of EX_CONFIG.

	Missing includes.
	* tests/calc.at, tests/named-refs.at: Include assert.h.

2012-02-21  Akim Demaille  <demaille@gostai.com>

	tests: post-process stderr to normalize quotes.
	* tests/bison.in: Save bison's stderr, and convert gettextized
	quotes to plain ASCII.

2012-02-21  Akim Demaille  <demaille@gostai.com>

	glr: fix ambiguity reports.
	* tests/glr-regression.at (Ambiguity reports): New.

2012-02-21  Akim Demaille  <demaille@gostai.com>

	glr: fix ambiguity reports.
	Fix a regression introduced in commit
	783aa653f4ca70a75919c8516b950494c612cbfe.

	* tests/glr-regression.at (Ambiguity reports): New.
	* data/glr.c (yyreportTree): Fix an offset error.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	doc: stylistic improvements.
	* doc/bison.texinfo: Prefer "continue" to empty loop bodies.
	Add some @group/@end group to avoid poor page breaks.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address sc_prohibit_doubled_word.
	* data/yacc.c, doc/bison.texinfo: Reword to avoid having to
	disable that check.
	* cfg.mk: No longer skip this test.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address sc_prohibit_always-defined_macros.
	* cfg.mk: No longer skip it, except where EXIT_SUCCESS is used
	as a witness for stdlib.h.
	Skip this test when appropriate.
	* data/yacc.c: Drop a note about why EXIT_SUCCESS is defined here.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address sc_bindtextdomain, sc_program_name and sc_prohibit_HAVE_MBRTOWC.
	* bootstrap.conf (gnulib_modules): Require progname.
	* src/complain.c, src/getargs.c, src/getargs.h, src/main.c: Use it.
	* cfg.mk (exclude): New.
	Use it.
	Skip lib/main.c for bindtextdomain and set_program_name.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: remove stray file.
	* config.hin: Remove.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	doc: stylistic improvements.
	* doc/bison.texinfo: Prefer "continue" to empty loop bodies.
	Add some @group/@end group to avoid poor page breaks.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	doc: check the rpcalc.
	* doc/bison.texinfo: Tag rpcalc.y snippets.
	Add missing includes.
	(Rpcalc Rules): Don't issue leading tabs.
	Complete an Info menu.
	Use @result.
	* examples/rpcalc/local.mk: New.
	* examples/rpcalc/rpcalc.test: New.
	* examples/local.mk: Use them.
	* examples/mfcalc/mfcalc.test: Remove dup test.
	* examples/test: Disable debug traces.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	regen.
	* src/parse-gram.c, src/parse-gram.h: Regen.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address sc_prohibit_doubled_word.
	* data/yacc.c, doc/bison.texinfo: Reword to avoid having to
	disable that check.
	* cfg.mk: No longer skip this test.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address sc_prohibit_always-defined_macros.
	* cfg.mk: No longer skip it, except where EXIT_SUCCESS is used
	as a witness for stdlib.h.
	Skip this test when appropriate.
	* data/yacc.c: Drop a note about why EXIT_SUCCESS is defined here.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address sc_bindtextdomain, sc_program_name and sc_prohibit_HAVE_MBRTOWC.
	* bootstrap.conf (gnulib_modules): Require progname.
	* src/complain.c, src/getargs.c, src/getargs.h, src/main.c: Use it.
	* cfg.mk (exclude): New.
	Use it.
	Skip lib/main.c for bindtextdomain and set_program_name.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: remove stray file.
	* config.hin: Remove.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	bitset: fix an incorrect error message.
	* lib/bitset_stats.c: here.
	Reported by Stefano Lattarini.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address some syntax-issues remaining after cherry-picking from master.
	* cfg.mk: Skip bison generated files, 2.5 is generating trailing
	blanks.  This is already fixed in master.
	* tests/conflicts.at, tests/java.at: Fix white space issues.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	regen.
	* src/parse-gram.c, src/parse-gram.h: Regen.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	bitset: fix an incorrect error message.
	* lib/bitset_stats.c: here.
	Reported by Stefano Lattarini.

2012-02-19  Jim Meyering  <meyering@redhat.com>

	maint: reenable sc_m4_quote_check
	* cfg.mk (local-checks-to-skip): Reenable sc_m4_quote_check.
	* m4/dmalloc.m4: Add quotes.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: remove trailing empty lines.
	* cfg.mk: No longer skip sc_prohibit_empty_lines_at_EOF, except
	for parse-gram.h (generated).
	* examples/mfcalc/.gitignore, lib/.gitignore, m4/.gitignore,
	* po/.gitignore, runtime-po/.gitignore: Remove trailing/leading
	empty lines.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: avoid "magic number exit".
	* cfg.mk (local-checks-to-skip): No longer skip it.
	* bootstrap.conf (gnulib_modules): Add sysexits.
	* doc/bison.texinfo, etc/bench.pl.in, src/parse-gram.y,
	* src/system.h, tests/calc.at, tests/named-refs.at: Use assert
	where appropriate instead of "if (...) exit".
	Use symbolic exit status elsewhere.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: fix some syntax-check issues.
	* cfg.mk (local-checks-to-skip): Remove
	sc_prohibit_quotearg_without_use, sc_prohibit_strcmp,
	sc_unmarked_diagnostics, sc_useless_cpp_parens.
	(sc_unmarked_diagnostics): Skip DJGPP.
	* data/yacc.c, src/LR0.c, src/closure.c,
	* src/flex-scanner.h, src/gram.c, src/lalr.c,
	* src/print-xml.c, src/print.c, src/print_graph.c,
	* src/reader.c, src/reduce.c, src/tables.c:
	Don't use parens with cpp's defined.
	Remove useless includes.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: address a couple of syntax-check errors.
	* cfg.mk (local-checks-to-skip): Remove sc_error_message_period
	and sc_error_message_uppercase.
	Address the uncovered issues.
	* po/POTFILES.in: Add missing files.
	* src/symtab.c: Remove useless includes.
	* lib/bitset_stats.c, src/files.c, tests/glr-regression.at: Use
	conformant error messages.

2012-02-19  Akim Demaille  <demaille@gostai.com>

	maint: gnulib: upgrade.

2012-02-18  Akim Demaille  <demaille@gostai.com>

	maint: remove trailing empty lines.
	* cfg.mk: No longer skip sc_prohibit_empty_lines_at_EOF, except
	for parse-gram.h (generated).
	* examples/mfcalc/.gitignore, lib/.gitignore, m4/.gitignore,
	* po/.gitignore, runtime-po/.gitignore: Remove trailing/leading
	empty lines.

2012-02-18  Akim Demaille  <demaille@gostai.com>

	maint: regen.
	* src/parse-gram.c, src/parse-gram.h: regen.

2012-02-18  Akim Demaille  <demaille@gostai.com>

	maint: avoid "magic number exit".
	* cfg.mk (local-checks-to-skip): No longer skip it.
	* bootstrap.conf (gnulib_modules): Add sysexits.
	* doc/bison.texinfo, etc/bench.pl.in, src/parse-gram.y,
	* src/system.h, tests/calc.at, tests/named-refs.at: Use assert
	where appropriate instead of "if (...) exit".
	Use symbolic exit status elsewhere.

2012-02-18  Akim Demaille  <demaille@gostai.com>

	maint: fix some syntax-check issues.
	* cfg.mk (local-checks-to-skip): Remove
	sc_prohibit_quotearg_without_use, sc_prohibit_strcmp,
	sc_unmarked_diagnostics, sc_useless_cpp_parens.
	(sc_unmarked_diagnostics): Skip DJGPP.
	* data/yacc.c, src/LR0.c, src/closure.c,
	* src/flex-scanner.h, src/gram.c, src/lalr.c,
	* src/print-xml.c, src/print.c, src/print_graph.c,
	* src/reader.c, src/reduce.c, src/tables.c:
	Don't use parens with cpp's defined.
	Remove useless includes.

2012-02-18  Akim Demaille  <demaille@gostai.com>

	maint: address a couple of syntax-check errors.
	* cfg.mk (local-checks-to-skip): Remove sc_error_message_period
	and sc_error_message_uppercase.
	Address the uncovered issues.
	* po/POTFILES.in: Add missing files.
	* src/symtab.c: Remove useless includes.
	* lib/bitset_stats.c, src/files.c, tests/glr-regression.at: Use
	conformant error messages.

2012-02-18  Akim Demaille  <demaille@gostai.com>

	maint: gnulib: upgrade.

2012-02-17  Akim Demaille  <demaille@gostai.com>

	doc: mfcalc: fix includes.
	* doc/bison.texinfo: math.h is needed early.

2012-02-17  Akim Demaille  <demaille@gostai.com>

	examples: factor the test suite.
	* examples/mfcalc/test, examples/calc++/test: Extract the
	common bits into...
	* examples/test: here.
	(cwd): New.
	Use it to avoid a race on the temporary directory.
	Reported by Jim Meyering.
	* examples/mfcalc/test, examples/calc++/test: Rename into...
	* examples/mfcalc/mfcalc.test, examples/calc++/calc++.test: these.
	* examples/calc++/local.mk, examples/mfcalc/local.mk,
	* examples/local.mk: Adjust.

2012-02-17  Akim Demaille  <demaille@gostai.com>

	examples: fix the test suites.
	* examples/calc++/test, examples/mfcalc/test (me): Be more
	meaningfull: include the example name.
	(prog): Factor.
	(run): Avoid printf, use echo.
	Add missing parens.
	(cleanup): New.
	Call it on trap.
	Remove the previous "rm" that did the cleanup.
	Move into a private directory to avoid concurrency issues.
	Reported by Jim Meyering.

2012-02-17  Jim Meyering  <meyering@redhat.com>

	examples: link mfcalc with -lm for uses of pow, cos, atan, etc.
	* examples/mfcalc/local.mk (examples_mfcalc_mfcalc_LDADD): Define.

2012-02-16  Akim Demaille  <demaille@gostai.com>

	mfcalc: extract and exercise.
	* examples/mfcalc/local.mk, examples/mfcalc/test: New,
	based on calc++'s ones.
	* examples/local.mk: Include mfcalc/local.mk.

2012-02-16  Akim Demaille  <demaille@gostai.com>

	calc++: factor for other extracted tests.
	* Makefile.am (TESTS, check_PROGRAMS): Initialize here.
	* examples/local.mk (doc, extexi): Define here.
	* examples/calc++/local.mk: Adjust accordingly.
	* configure.ac: Ask for parallel-tests (for the way the logs
	are handled).
	* examples/calc++/test: As a consequence, always be verbose.
	($prog): New.
	(run): Use it.
	Sort the tests in a more natural order (simplest first).

2012-02-16  Akim Demaille  <demaille@gostai.com>

	doc: mfcalc: send errors to stderr.
	* doc/bison.texinfo (Mfcalc Lexer): New.
	(Mfcalc Main): Move the definition of main and yyerror here, for
	clarity.
	Let yyerror report on stderr.

2012-02-16  Akim Demaille  <demaille@gostai.com>

	doc: fix mfcalc code.
	* doc/bison.texinfo (Multi-function Calc): Add missing includes.
	Fix the rendering of the result: use @result and remove the
	initial tabulation in the actual code.
	Fix stylistic issues: avoid the , operator.
	Add extexi mark-up.
	* examples/extexi: Also support @smallexample.

2012-02-16  Akim Demaille  <demaille@gostai.com>

	tests: c++: stylistic changes.
	* tests/c++.at: Don't use void for incoming arguments.
	Prefer cstdlib to stdlib.h.

2012-02-16  Jim Meyering  <meyering@redhat.com>

	tests: avoid c++ failure due to lack of getenv decl
	* tests/c++.at (Syntax error as exception): Avoid spurious failure
	at least when compiling with g++-4.7.x due to lack of declaration
	of getenv.  Include <stdlib.h>.

2012-02-15  Akim Demaille  <demaille@gostai.com>

	maint: rely on Automake for parsers.
	* Makefile.am (AM_YFLAGS): Automake looks for "-d" alone.
	Move other options in here.
	(BISON): New.
	(YACC): Use it.
	(bison_SOURCES): Now that automake can see `-d' in AM_YFLAGS,
	we can rely on it to compile and ship the parser header
	files.

	Based on commit 737406a32c201471699bfa0843d1f432f3ec29ab and
	commit 3d6ca339083c278d907c9f030f4ba6bc5ecb07f2.

2012-02-15  Akim Demaille  <demaille@gostai.com>

	maint: trust Automake for parser headers.
	* examples/calc++/local.mk, src/local.mk: Now that automake
	can see `-d' in AM_YFLAGS, we can rely on it to compile
	and ship the parser header files.

2012-02-15  Akim Demaille  <demaille@gostai.com>

	maint: help Automake reading Yacc flags.
	* Makefile.am (AM_YFLAGS): Automake looks for "-d" alone.

2012-02-15  Akim Demaille  <demaille@gostai.com>

	calc++: rely on Automake.
	Rely on $(YACC) being the bison being built, and let Automake do the
	rest.  It turned out to be much more difficult than anticipated, for
	various reasons, including some bad behavior from Automake 1.11.2
	which (i) generates calc++-parser.h instead of calc++-parser.hh, and
	(ii) leaves an #include "y.tab.h" in the generated parser instead
	of #include "calc++-parser.h".

	The authors of Automake appear to be aware of the problem,
	http://lists.gnu.org/archive/html/automake/2011-05/msg00008.html
	so a simple work around will suffice for the time being.

	* examples/calc++/y.tab.h, examples/calc++/calc++-parser.hh: New.
	To work around Automake 1.11.2 issues.
	* examples/calc++/local.mk: Remove all the rules for compilation
	with bison, leave them to Automake.
	So provide it with "calc++-parse.yy" as a source file.
	(calc_sources_generated, calc_sources_extracted): Rename as.
	(calc_generated, calc_extracted): these.
	(calc_sources): New.
	Fix them.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: tidy the Makefile a bit.
	* src/local.mk: Put yacc related variables together.
	(AUTOMAKE_OPTIONS): Move to...
	* Makefile.am: here.
	Remove an old Emacs mode request which disables Automake support.
	* src/local.mk (YACC, AM_YFLAGS): Move to...
	* Makefile.am: here, as they will be used by other local.mks.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: de-recurse the handling of examples
	The directory was still using a local Makefile.am because it provides
	"scoped" Make variables: these examples are not meant to use the same
	CPPFLAGS etc.  If we were to use the same -I set, we'd pick up
	gnulib's stdio.h for instance, which we do not want for these simple
	examples.

	Yet, as a result, the dependencies are less accurate, there is code
	duplication, etc.  This is especially perceptible when trying to
	extract more examples from the documentation, as will be done in
	forthcoming changes.

	In order to make the tuning of CPPFLAGS easier, discard the predefined
	-I from Automake.

	* examples/calc++/Makefile.am: Rename as...
	* examples/calc++/local.mk: this.
	Adjust the paths which are now rooted in top_srcdir/top_builddir.
	Handle BISON_CXX_WORKS here, instead of the too crude previous
	approach that completely discarded the whole directory.
	($(BISON)): Remove now useless bouncing recipe.
	(calc___CPPFLAGS): New.
	Stay away from -Ilib.
	* Makefile.am, configure.ac, examples/local.mk,
	* examples/calc++/test: Adjust.

	* configure.ac: Pass nostdinc to Automake.
	* src/local.mk, lib/local.mk (AM_CPPFLAGS): Move to...
	* Makefile.am: here.

	* src/local.mk, examples/calc++/Makefile.am (BISON, BISON_IN): Factor
	to...
	* Makefile.am: here.
	* tests/local.mk: Use it.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	variant: fix the example.
	* examples/variant.yy: Adjust to "assert" being now
	"parse.assert".

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: more authors.
	* AUTHORS: here.
	Suggested by Tys Lefering.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: add license headers.
	* examples/calc++/test, examples/variant.yy, AUTHORS, THANKS,
	* tests/atlocal.in, tests/bison.in: Add license headers.
	Reported by Tys Lefering.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: remove obsolete file.
	* etc/make-ChangeLogs: Remove (used for rcs to cvs migration!).
	Reported by Tys Lefering.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: more authors.
	* AUTHORS: here.
	Suggested by Tys Lefering.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: add license headers.
	* examples/calc++/test, examples/variant.yy, AUTHORS, THANKS,
	* tests/atlocal.in, tests/bison.in: Add license headers.
	Reported by Tys Lefering.

2012-02-14  Akim Demaille  <demaille@gostai.com>

	maint: remove obsolete file.
	* etc/make-ChangeLogs: Remove (used for rcs to cvs migration!).
	Reported by Tys Lefering.

2012-02-10  Akim Demaille  <demaille@gostai.com>

	lalr1.cc: also handle syntax_error when calling yylex.
	* data/lalr1.cc (parse): Catch syntax_error around yylex and
	forward them to errlab1.
	* tests/c++.at (Syntax error as exception): Check support for
	syntax exceptions raised by the scanner.
	* NEWS, doc/bison.texinfo: Document it.

2012-02-10  Akim Demaille  <demaille@gostai.com>

	tests: lalr1.cc: check syntax_error.
	* tests/c++.at (Syntax error as exception): New.

2012-02-10  Akim Demaille  <demaille@gostai.com>

	tests: don't require locations uselessly.
	* tests/c++.at (Syntax error discarding no lookahead): Contrary to
	2.5, C++ parsers can work without locations.

2012-02-10  Akim Demaille  <demaille@gostai.com>

	maint: more silent rules.
	* tests/local.mk (TESTSUITE_AT): Include plackage.m4.
	Adjust dependencies.
	Make testsuite.at its first argument.
	(package.m4): Be silent.
	(testsuite): Be silent.
	Use $<.

2012-02-10  Akim Demaille  <demaille@gostai.com>

	skeletons: simplify the protections against "unused" warnings.
	* data/c.m4 (b4_parse_param_use): Also accept optional arguments
	to "use".
	Simplify callers.
	* data/glr.c (yyuserAction): Simplify use of b4_parse_param_use.
	(yy_reduce_print): Don't use b4_parse_param_use, as all the arguments
	_are_ used.
	* data/lalr1.cc (YY_SYMBOL_PRINT): Even when disabled, "use" the
	symbol argument.
	This neutralizes a warning in yypush_ when there are no symbols
	with a semantic values.
	(yy_destroy_): Remove useless "use" of yymsg.

2012-02-10  Akim Demaille  <demaille@gostai.com>

	glr: formatting changes.
	* data/glr.c: Split long strings.

2012-02-08  Akim Demaille  <demaille@gostai.com>

	use a more consistent quoting style.
	See <http://lists.gnu.org/archive/html/bug-bison/2012-01/msg00120.html>.
	Use quotearg as often as possible instead of leaving the choice of
	the quotes to the translators.  Use shorter messages.  Factor similar
	messages to a single format, to make localization easier.

	* src/files.c, src/getargs.c, src/muscle-tab.c, src/reader.c
	* src/scan-code.l, src/scan-gram.l, src/symtab.c:
	Use quote() or quotearg_colon() on printf arguments instead of
	quotes in the format string.
	* data/bison.m4: Keep sync with the changes in muscle-tab.c.

	* tests/skeletons.at, tests/input.at, tests/regression.at: Adjust
	expected messages.

2012-02-08  Akim Demaille  <demaille@gostai.com>

	use a more consistent quoting style.
	See <http://lists.gnu.org/archive/html/bug-bison/2012-01/msg00120.html>.
	Use quotearg as often as possible instead of leaving the choice of
	the quotes to the translators.  Use shorter messages.  Factor similar
	messages to a single format, to make localization easier.

	* src/files.c, src/getargs.c, src/muscle-tab.c, src/reader.c
	* src/scan-code.l, src/scan-gram.l, src/symtab.c:
	Use quote() or quotearg_colon() on printf arguments instead of
	quotes in the format string.
	* data/bison.m4: Keep sync with the changes in muscle-tab.c.

	* tests/skeletons.at, tests/input.at, tests/regression.at: Adjust
	expected messages.

2012-01-31  Jim Meyering  <meyering@redhat.com>

	maint: reenable sc_m4_quote_check
	* cfg.mk (local-checks-to-skip): Reenable sc_m4_quote_check.
	* m4/dmalloc.m4: Add quotes.

2012-01-31  Jim Meyering  <meyering@redhat.com>

	maint: force "make syntax-check" to pass by skipping failing tests
	* cfg.mk (local-checks-to-skip): Skip all currently-failing tests.
	Remove changelog-check; it's long gone.

2012-01-31  Akim Demaille  <demaille@gostai.com>

	maint: remove stray debug code.
	* src/Makefile.am (echo): Remove.

2012-01-31  Akim Demaille  <demaille@gostai.com>

	maint: space changes.
	* src/Makefile.am: Use 2 leading spaces for variable definition
	spreading over several lines.

2012-01-31  Akim Demaille  <demaille@gostai.com>

	maint: more silent-rules.
	* doc/local.mk, src/local.mk, examples/calc++/Makefile.am: Use
	$(AM_V_GEN) and $(AM_V_at) where appropriate.

2012-01-31  Jim Meyering  <meyering@redhat.com>

	do not ignore errors like ENOSPC,EIO when writing to stdout
	Standard output was never explicitly closed, so we could not
	detect failure.  Thus, bison would ignore the errors of writing
	to a full file system and getting an I/O error on write, but only
	for standard output, e.g., for --print-localedir, --print-datadir,
	--help and some verbose output.
	Now, "bison --print-datadir > /dev/full" reports the write failure:
	bison: write error: No space left on device
	Before, it would exit 0 with no diagnostic, implying success.
	This is not an issue for "--output=-" or the other FILE-accepting
	command-line options, because unlike most other GNU programs,
	an output file argument of "-" is treated as the literal "./-",
	rather than standard output.
	* bootstrap.conf (gnulib_modules): Add closeout.
	* src/main.c: Include "closeout.h".
	Use atexit to ensure we close stdout.
	* .gitignore: Ignore new files pulled in via gnulib-tool.

2012-01-31  Akim Demaille  <demaille@gostai.com>

	maint: more silent-rules.
	* doc/local.mk, src/local.mk, examples/calc++/Makefile.am: Use
	$(AM_V_GEN) and $(AM_V_at) where appropriate.

2012-01-29  Jim Meyering  <meyering@redhat.com>

	do not ignore errors like ENOSPC,EIO when writing to stdout
	Standard output was never explicitly closed, so we could not
	detect failure.  Thus, bison would ignore the errors of writing
	to a full file system and getting an I/O error on write, but only
	for standard output, e.g., for --print-localedir, --print-datadir,
	--help and some verbose output.
	Now, "bison --print-datadir > /dev/full" reports the write failure:
	bison: write error: No space left on device
	Before, it would exit 0 with no diagnostic, implying success.
	This is not an issue for "--output=-" or the other FILE-accepting
	command-line options, because unlike most other GNU programs,
	an output file argument of "-" is treated as the literal "./-",
	rather than standard output.
	* bootstrap.conf (gnulib_modules): Add closeout.
	* src/main.c: Include "closeout.h".
	Use atexit to ensure we close stdout.
	* .gitignore: Ignore new files pulled in via gnulib-tool.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	tests: fix expected output.
	* tests/actions.at (YYBACKUP): here.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	tests: fix expected output.
	* tests/actions.at (YYBACKUP): here.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	maint: fix configure.ac
	Fix commit 1890a2a816dab86c23cc1d0af8fac3986335deb7.

	* configure.ac: Fix variable assignment.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	yacc: fix YYBACKUP.
	Reported by David Kastrup:
	https://lists.gnu.org/archive/html/bug-bison/2011-10/msg00002.html.

	* data/yacc.c (YYBACKUP): Accept rhs size.
	Restore the proper state value.
	* TODO (YYBACKUP): Make it...
	* tests/actions.at: a new test case.
	* NEWS, THANKS: Update.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	maint: update TODO.
	* TODO (Labeling the symbols): Remove, it's done ("Name references").

2012-01-26  Akim Demaille  <demaille@gostai.com>

	maint: update THANKS.
	* THANKS: Update Tys's address, on his request.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	maint: fix --gcc-warnings support.
	* configure.ac: Use enable_gcc_warnings instead of enableval,
	which is valid only with AC_ARG_ENABLE.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	maint: silent-rules.
	* configure.ac: Ask for silent-rules support.
	Enable it by default.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	maint: remove trailing blanks.
	* src/scan-code.l: Here.

2012-01-26  Akim Demaille  <demaille@gostai.com>

	yacc: fix YYBACKUP.
	Reported by David Kastrup:
	https://lists.gnu.org/archive/html/bug-bison/2011-10/msg00002.html.

	* data/yacc.c (YYBACKUP): Accept rhs size.
	Restore the proper state value.
	* TODO (YYBACKUP): Make it...
	* tests/actions.at: a new test case.
	* NEWS, THANKS: Update.

2012-01-25  Akim Demaille  <demaille@gostai.com>

	maint: update TODO.
	* TODO (Labeling the symbols): Remove, it's done ("Name references").

2012-01-25  Akim Demaille  <demaille@gostai.com>

	maint: update THANKS.
	* THANKS: Update Tys's address, on his request.

2012-01-25  Akim Demaille  <demaille@gostai.com>

	maint: fix --gcc-warnings support.
	* configure.ac: Use enable_gcc_warnings instead of enableval,
	which is valid only with AC_ARG_ENABLE.

2012-01-25  Akim Demaille  <demaille@gostai.com>

	maint: silent-rules.
	* configure.ac: Ask for silent-rules support.
	Enable it by default.

2012-01-25  Paul Eggert  <eggert@cs.ucla.edu>

	tests: port to Solaris 10 'diff -u'
	* tests/regression.at (parse-gram.y: LALR = IELR): Port to Solaris 10,
	where "diff -u X X" outputs "No differences encountered"
	instead of outputting nothing.  Reported by Tomohiro Suzuki in
	<http://lists.gnu.org/archive/html/bug-bison/2012-01/msg00101.html>.

2012-01-25  Jim Meyering  <meyering@redhat.com>

	build: avoid possibly-replaced fprintf in liby-source, yyerror.c
	* lib/yyerror.c (yyerror): Use fputs and fputc rather than fprintf
	with a mere "%s\n" format.  Always return 0 now, on the assumption
	that the return value was never used anyway.
	Don't include <config.h> after all.  This avoids a problem
	reported by Thiru Ramakrishnan in
	http://lists.gnu.org/archive/html/help-bison/2011-11/msg00000.html
	* cfg.mk: Exempt lib/yyerror.c from the sc_require_config_h_first test.
	* THANKS: Update.

2012-01-24  Paul Eggert  <eggert@cs.ucla.edu>

	tests: port to Solaris 10 'diff -u'
	* tests/regression.at (parse-gram.y: LALR = IELR): Port to Solaris 10,
	where "diff -u X X" outputs "No differences encountered"
	instead of outputting nothing.  Reported by Tomohiro Suzuki in
	<http://lists.gnu.org/archive/html/bug-bison/2012-01/msg00101.html>.

2012-01-24  Jim Meyering  <meyering@redhat.com>

	maint: generate ChangeLog from git log
	* Makefile.am (gen-ChangeLog): New rule.
	(dist-hook): Depend on it.
	(EXTRA_DIST): Distribute the two ChangeLog-* files.
	* bootstrap.conf (gnulib_modules): Add gitlog-to-changelog.
	(bootstrap_post_import_hook): Ensure that ChangeLog exists.
	* build-aux/git-log-fix: New file.
	* ChangeLog-2012: Renamed ...
	* ChangeLog: ... from this.
	* ChangeLog-1998: Renamed ...
	* OChangeLog: ...from this
	* .gitignore: Add ChangeLog.

2012-01-24  Jim Meyering  <meyering@redhat.com>

	change more quotes in source, and adjust tests to match
	Run this command to change each `%s' to '%s' in source directories:
	  git grep -l '`%s'\' src djgpp data \
	    |xargs perl -pi -e '$q="'\''";s/`%s$q/$q%s$q/g'
	* data/bison.m4: Affected per the above.
	* djgpp/subpipe.c: Likewise.
	* src/files.c: Likewise.
	* src/getargs.c: Likewise.
	* src/muscle-tab.c: Likewise.
	* src/reader.c: Likewise.
	* tests/glr-regression.at: Adjust to match.
	* tests/input.at: Likewise.
	* tests/push.at: Likewise.
	* tests/skeletons.at: Likewise.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	quote consistently and make tests pass with new quoting from gnulib
	Updating to gnulib pulled in new quote and quotarg modules,
	by which quoting is now done like 'this' rather than `this'.
	That change induces many "make check" test failures.  This change
	adapts code and tests so that "make check" passes once again.
	* src/scan-code.l: Quote like 'this', not like `this'.
	* src/scan-gram.l: Likewise.
	* src/symtab.c: Likewise.
	* tests/actions.at: Adjust tests to match.
	* tests/input.at: Likewise.
	* tests/named-refs.at: Likewise.
	* tests/output.at: Likewise.
	* tests/regression.at: Likewise.
	* lib/.gitignore: Regenerate.
	* m4/.gitignore: Likewise.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	build: avoid possibly-replaced fprintf in liby-source, yyerror.c
	* lib/yyerror.c (yyerror): Use fputs and fputc rather than fprintf
	with a mere "%s\n" format.  Always return 0 now, on the assumption
	that the return value was never used anyway.
	Don't include <config.h> after all.  This avoids a problem
	reported by Thiru Ramakrishnan in
	http://lists.gnu.org/archive/html/help-bison/2011-11/msg00000.html
	* cfg.mk: Exempt lib/yyerror.c from the sc_require_config_h_first test.
	* THANKS: Update.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	build: update gnulib and autoconf submodules to latest (cherry picked from commit 728415f885e5cb8e518c8576fa6e1f541e384130)

2012-01-23  Jim Meyering  <meyering@redhat.com>

	build: manually update bootstrap from gnulib, and adapt
	Updating to the latest bootstrap from gnulib involves more of a
	change than usual, and updating to the latest gnulib would involve
	its own set of challenges with the upcoming quoting changes, so
	we update bootstrap manually and separately.
	* bootstrap: Update from gnulib.
	* lib/Makefile.am: Initialize more variables to empty, so that gnulib.mk
	can append to them with "+=".
	* bootstrap.conf (gnulib_mk_hook): Remove.  No longer honored.
	(gnulib_tool_option_extras): Generate gnulib.mk.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	maint: include <config.h> first
	* cfg.mk (exclude_file_name_regexp--sc_require_config_h_first):
	Exempt data/glr.c and data/yacc.c from the include-config.h-first
	requirement.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	build: include <config.h> from lib/yyerror.c
	* lib/yyerror.c: Include <config.h>.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	maint: list djgpp/subpipe.c in po/POTFILES.in
	* po/POTFILES.in: Add djgpp/subpipe.c.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	maint: placate the space-TAB syntax-check
	* cfg.mk (exclude_file_name_regexp--sc_space_tab): Exempt
	tests/input.at and tests/c++.at, since they appear to use
	SP-TAB sequences deliberately.
	* OChangeLog: Remove space-before-TAB.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	doc: correct typo: s/can not/cannot/
	* doc/bison.texinfo (Bug Reports): s/can not/cannot/
	And remove trailing blanks.

2012-01-23  Jim Meyering  <meyering@redhat.com>

	build: generalize etc/prefix-gnulib-mk
	This script hard-coded "libbison" and lib/gnulib.mk.
	Adjust the script to require a --lib-name=$gnulib_name option
	and a FILE argument like lib/$gnulib_mk.
	Also add support for --help and --version.
	* etc/prefix-gnulib-mk: Generalize.
	* bootstrap.conf (bootstrap_post_import_hook): Update its invocation.

2012-01-22  Jim Meyering  <meyering@redhat.com>

	maint: get gpl-3.0 from gnulib
	* bootstrap.conf (gnulib_modules): Add gpl-3.0.
	* doc/gpl-3.0.texi: Remove from version control, now that
	we get it via gnulib.
	* doc/.gitignore: Ignore it.

2012-01-20  Akim Demaille  <demaille@gostai.com>

	maint: be more robust to gnulib's FOO_H variables.
	* configure.ac: Instead of listing gnulib's variables, look for
	them among AC_SUBST variables.

2012-01-20  Jim Meyering  <meyering@redhat.com>

	maint: generate ChangeLog from git log
	* Makefile.am (gen-ChangeLog): New rule.
	(dist-hook): Depend on it.
	(EXTRA_DIST): Distribute the two ChangeLog-* files.
	* bootstrap.conf (gnulib_modules): Add gitlog-to-changelog.
	(bootstrap_post_import_hook): Ensure that ChangeLog exists.
	* build-aux/git-log-fix: New file.
	* ChangeLog-2012: Renamed ...
	* ChangeLog: ... from this.
	* ChangeLog-1998: Renamed ...
	* OChangeLog: ...from this
	* .gitignore: Add ChangeLog.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	change more quotes in source, and adjust tests to match
	Run this command to change each `%s' to '%s' in source directories:
	  git grep -l '`%s'\' src djgpp data \
	    |xargs perl -pi -e '$q="'\''";s/`%s$q/$q%s$q/g'
	* data/bison.m4: Affected per the above.
	* djgpp/subpipe.c: Likewise.
	* src/files.c: Likewise.
	* src/getargs.c: Likewise.
	* src/muscle-tab.c: Likewise.
	* src/reader.c: Likewise.
	* tests/glr-regression.at: Adjust to match.
	* tests/input.at: Likewise.
	* tests/push.at: Likewise.
	* tests/skeletons.at: Likewise.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	quote consistently and make tests pass with new quoting from gnulib
	Updating to gnulib pulled in new quote and quotarg modules,
	by which quoting is now done like 'this' rather than `this'.
	That change induces many "make check" test failures.  This change
	adapts code and tests so that "make check" passes once again.
	* src/scan-code.l: Quote like 'this', not like `this'.
	* src/scan-gram.l: Likewise.
	* src/symtab.c: Likewise.
	* tests/actions.at: Adjust tests to match.
	* tests/input.at: Likewise.
	* tests/named-refs.at: Likewise.
	* tests/output.at: Likewise.
	* tests/regression.at: Likewise.
	* lib/.gitignore: Regenerate.
	* m4/.gitignore: Likewise.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	build: update gnulib and autoconf submodules to latest

2012-01-19  Jim Meyering  <meyering@redhat.com>

	build: manually update bootstrap from gnulib, and adapt
	Updating to the latest bootstrap from gnulib involves more of a
	change than usual, and updating to the latest gnulib would involve
	its own set of challenges with the upcoming quoting changes, so
	we update bootstrap manually and separately.
	* bootstrap: Update from gnulib.
	* Makefile.am: Initialize more variables to empty, so that gnulib.mk
	can append to them with "+=".
	* bootstrap.conf (gnulib_mk_hook): Remove.  No longer honored.
	(bootstrap_post_import_hook): Instead, run the same command,
	etc/prefix-gnulib-mk lib/$gnulib_mk, via slightly different API.
	Temporarily disable "bootstrap_sync=true".
	* etc/prefix-gnulib-mk: Don't prepend "lib/" to tokens like -I$(...
	or "\".

2012-01-19  Jim Meyering  <meyering@redhat.com>

	maint: include <config.h> first
	* cfg.mk (exclude_file_name_regexp--sc_require_config_h_first):
	Exempt data/glr.c and data/yacc.c from the include-config.h-first
	requirement.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	build: include <config.h> from lib/yyerror.c
	* lib/yyerror.c: Include <config.h>.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	maint: list djgpp/subpipe.c in po/POTFILES.in
	* po/POTFILES.in: Add djgpp/subpipe.c.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	maint: placate the space-TAB syntax-check
	* cfg.mk (exclude_file_name_regexp--sc_space_tab): Exempt
	tests/input.at and tests/c++.at, since they appear to use
	SP-TAB sequences deliberately.
	* OChangeLog: Remove space-before-TAB.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	maint: remove final trailing space
	* src/scan-gram.l (%): Remove single space at end of line.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	maint: get gpl-3.0 from gnulib
	* bootstrap.conf (gnulib_modules): Add gpl-3.0.
	* doc/gpl-3.0.texi: Remove from version control, now that
	we get it via gnulib.
	* doc/.gitignore: Ignore it.

2012-01-19  Jim Meyering  <meyering@redhat.com>

	doc: correct typo: s/can not/cannot/
	* doc/bison.texinfo (Bug Reports): s/can not/cannot/
	And remove trailing blanks.
