# lalib-syntax.at -- parsing .la files robustly  -*- Autotest -*-
#
#   Copyright (C) 2009, 2010 Free Software Foundation, Inc.
#
#   This file is part of GNU Libtool.
#
# GNU Libtool is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# GNU Libtool is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Libtool; see the file COPYING.  If not, a copy
# can be downloaded from  http://www.gnu.org/licenses/gpl.html,
# or obtained by writing to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
####

AT_SETUP([syntax of .la files])
AT_KEYWORDS([libtool])
AT_KEYWORDS([libltdl])

AT_XFAIL_IF([:]) dnl libltdl does not consistently return non-NULL lt_dlerror

AT_DATA([main.c],
[[#include <ltdl.h>
#include <stdio.h>
#include <assert.h>

int
main (int argc, char* argv[])
{
  int err = 0;
  lt_dlhandle plugin_handle;

  if (argc < 2)
    {
      fprintf (stderr, "usage: %s plugin\n", argv[0]);
      return 1;
    }

  lt_dlinit ();
  plugin_handle = lt_dlopenext (argv[1]);
  if (NULL != plugin_handle)
    {
      printf ("plugin opened successfully!\n");
      lt_dlclose (plugin_handle);
    }
  else
    {
      const char *error = lt_dlerror ();
      assert (error != NULL);
      printf ("plugin failed to open: %s\n", error);
      err = 1;
    }
  lt_dlexit ();
  return err;
}
]])

AT_DATA([module.c],
[[int foo (void) { return 0; }
]])

: ${LTDLINCL="-I$abs_top_srcdir/libltdl"}
: ${LIBLTDL="$abs_builddir/../libltdl/libltdlc.la"}

# Skip this test when called from:
#    make distcheck DISTCHECK_CONFIGURE_FLAGS=--disable-ltdl-install
AT_CHECK([case $LIBLTDL in #(
 */_inst/lib/*) test -f $LIBLTDL || (exit 77) ;;
esac], [], [ignore])

CPPFLAGS="$CPPFLAGS $LTDLINCL"

AT_CHECK([$CC $CPPFLAGS $CFLAGS -c main.c], [], [ignore], [ignore])
AT_CHECK([$LIBTOOL --mode=compile $CC $CPPFLAGS $CFLAGS -c module.c],
	 [], [ignore], [ignore])
AT_CHECK([$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o module.la module.lo ]dnl
	 [-module -avoid-version -rpath /somewhere], [], [ignore], [ignore])
AT_CHECK([$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o main main.$OBJEXT $LIBLTDL],
	 [], [ignore], [ignore])


# Several bogus test cases.

AT_DATA([missing-closing-quote.la],
[[# missing-closing-quote.la - a libtool library file
# Generated by libtool
dlname='module.so
library_names='module.so module.so module.so'
old_library='module.a'
installed=no
shouldnotlink=yes
libdir='/somewhere'
]])

AT_DATA([wrong-quotes.la],
[[# wrong-quotes.la - a libtool library file
# Generated by libtool
dlname="module.so"
library_names='module.so module.so module.so'
old_library='module.a'
installed=no
shouldnotlink=yes
libdir='/somewhere'
]])

AT_DATA([no-dlname.la],
[[# no-dlname.la - a libtool library file
# Generated by libtool
installed=no
shouldnotlink=yes
libdir='/somewhere'
]])

AT_DATA([nonexistent-dlname.la],
[[# nonexistent-dlname.la - a libtool library file
# Generated by libtool
dlname='does-not-exist.so'
installed=no
shouldnotlink=yes
libdir='/somewhere'
]])

for file in ./missing-closing-quote.la ./wrong-quotes.la \
	    ./no-dlname.la ./nonexistent-dlname.la; do
  LT_AT_EXEC_CHECK([./main], [1], [stdout], [ignore], [$file])
  AT_CHECK([grep 'plugin failed to open' stdout], [], [ignore])
done

AT_CLEANUP
