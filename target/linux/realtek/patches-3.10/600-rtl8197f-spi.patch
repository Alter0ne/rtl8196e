Index: linux-3.10.49/drivers/spi/Kconfig
===================================================================
--- linux-3.10.49.orig/drivers/spi/Kconfig
+++ linux-3.10.49/drivers/spi/Kconfig
@@ -348,6 +348,12 @@ config SPI_PXA2XX
 config SPI_PXA2XX_PCI
 	def_tristate SPI_PXA2XX && PCI
 
+config SPI_SHEIPA
+	bool "Realtek SHEIPA SPI Controller"
+	help
+	  This is the driver for the SHEIPA SPI Controller.
+	  
+
 config SPI_RSPI
 	tristate "Renesas RSPI controller"
 	depends on SUPERH
Index: linux-3.10.49/drivers/spi/Makefile
===================================================================
--- linux-3.10.49.orig/drivers/spi/Makefile
+++ linux-3.10.49/drivers/spi/Makefile
@@ -55,6 +55,7 @@ spi-pxa2xx-platform-$(CONFIG_SPI_PXA2XX_
 spi-pxa2xx-platform-$(CONFIG_SPI_PXA2XX_DMA)	+= spi-pxa2xx-dma.o
 obj-$(CONFIG_SPI_PXA2XX)		+= spi-pxa2xx-platform.o
 obj-$(CONFIG_SPI_PXA2XX_PCI)		+= spi-pxa2xx-pci.o
+obj-$(CONFIG_SPI_SHEIPA)		+= sheipa/
 obj-$(CONFIG_SPI_RSPI)			+= spi-rspi.o
 obj-$(CONFIG_SPI_S3C24XX)		+= spi-s3c24xx-hw.o
 spi-s3c24xx-hw-y			:= spi-s3c24xx.o
Index: linux-3.10.49/drivers/mtd/devices/Kconfig
===================================================================
--- linux-3.10.49.orig/drivers/mtd/devices/Kconfig
+++ linux-3.10.49/drivers/mtd/devices/Kconfig
@@ -95,13 +95,55 @@ config MTD_M25P80
 	  if you want to specify device partitioning or to use a device which
 	  doesn't support the JEDEC ID instruction.
 
+config M25PXX_USE_USER_MODE
+	bool "Support SPI User Mode for sheipa"
+	depends on MTD_M25P80
+	default y
+	help
+	  This option enables user mode to do write/read operation by ST M25Pxx.
+
 config M25PXX_USE_FAST_READ
 	bool "Use FAST_READ OPCode allowing SPI CLK >= 50MHz"
 	depends on MTD_M25P80
-	default y
+	depends on M25PXX_USE_USER_MODE
+	default n
 	help
 	  This option enables FAST_READ access supported by ST M25Pxx.
 
+config M25PXX_USE_MULTI_CHANNEL
+	bool "Support Multi-channel write/read"
+	depends on MTD_M25P80
+	depends on M25PXX_USE_USER_MODE
+	default n
+	help
+	  This option enables Multi-channel write/read access supported by ST M25Pxx.
+
+config M25PXX_USE_QUAD
+	bool "Use QUAD OPCode allowing SPI do quad-channel write/read"
+	depends on !RTL_8197F
+	depends on MTD_M25P80
+	depends on M25PXX_USE_USER_MODE
+	depends on M25PXX_USE_MULTI_CHANNEL
+	default n
+	help
+	  This option enables quad-channel access supported by ST M25Pxx.
+
+config M25PXX_USE_DUAL
+	bool "Use DUAL OPCode allowing SPI do dual-channel write/read"
+	depends on MTD_M25P80
+	depends on M25PXX_USE_USER_MODE
+	depends on M25PXX_USE_MULTI_CHANNEL
+	default n
+	help
+	  This option enables dual-channel access supported by ST M25Pxx.
+
+config M25PXX_USE_AUTO_MODE
+	bool "Support SPI Auto Mode for sheipa"
+	depends on MTD_M25P80
+	default n
+	help
+	  This option enables auto mode to do auto write/read operation by ST M25Pxx.
+
 config MTD_SPEAR_SMI
 	tristate "SPEAR MTD NOR Support through SMI controller"
 	depends on PLAT_SPEAR
Index: linux-3.10.49/drivers/mtd/devices/m25p80.c
===================================================================
--- linux-3.10.49.orig/drivers/mtd/devices/m25p80.c
+++ linux-3.10.49/drivers/mtd/devices/m25p80.c
@@ -41,6 +41,7 @@
 #define	OPCODE_WRSR		0x01	/* Write status register 1 byte */
 #define	OPCODE_NORM_READ	0x03	/* Read data bytes (low frequency) */
 #define	OPCODE_FAST_READ	0x0b	/* Read data bytes (high frequency) */
+#define	OPCODE_QUAD_READ        0x6b    /* Read data bytes */
 #define	OPCODE_PP		0x02	/* Page program (up to 256 bytes) */
 #define	OPCODE_BE_4K		0x20	/* Erase 4KiB block */
 #define	OPCODE_BE_4K_PMC	0xd7	/* Erase 4KiB block on PMC chips */
@@ -48,6 +49,57 @@
 #define	OPCODE_CHIP_ERASE	0xc7	/* Erase whole flash chip */
 #define	OPCODE_SE		0xd8	/* Sector erase (usually 64KiB) */
 #define	OPCODE_RDID		0x9f	/* Read JEDEC ID */
+#define	OPCODE_RDCR             0x35    /* Read configuration register */
+
+/* 4-byte address opcodes - used on Spansion and some Macronix flashes. */
+#define	OPCODE_NORM_READ_4B	0x13	/* Read data bytes (low frequency) */
+#define	OPCODE_FAST_READ_4B	0x0c	/* Read data bytes (high frequency) */
+#define	OPCODE_QUAD_READ_4B	0x6c    /* Read data bytes */
+#define	OPCODE_PP_4B		0x12	/* Page program (up to 256 bytes) */
+#define	OPCODE_SE_4B		0xdc	/* Sector erase (usually 64KiB) */
+
+/* Support auto mode for sheipa only. */
+#define	OPCODE_AUTO		0xf5
+
+/* Extend flash opcode and used for Macronix */
+#define PPX2_I		0x02		/* 1|2O dual program */
+#define PPX2_II		0x02		/* 2 x I/O dual program */
+#define PPX4_I		0x02		/* 1|4O quad program */
+#define PPX4_II		0x38		/* 4 x I/O quad program */
+#define READX2_I	0x03		/* 1|2O dual dual read*/
+#define READX2_IO	0xbb		/* 2 x I/O dual read */
+#define READX4_I	0x03		/* 1|4O quad read */
+#define READX4_IO	0xeb		/* 4 x I/O quad read */
+
+/* Extend flash read dummy cycles and used for Macronix only */
+#define MXIC_DUAL_DUMMY_CYCLE    0x4
+#define MXIC_QUAD_DUMMY_CYCLE    0x6
+#define MXIC_FAST_DUMMY_CYCLE    0x8
+
+/* ESMT */
+#define ESMT_DUAL_DUMMY_CYCLE    0x4
+#define ESMT_QUAD_DUMMY_CYCLE    0x6
+#define ESMT_FAST_DUMMY_CYCLE    0x8
+
+/* Winbond */
+#define WINBOND_DUAL_DUMMY_CYCLE    0x4
+#define WINBOND_QUAD_DUMMY_CYCLE    0x6
+#define WINBOND_FAST_DUMMY_CYCLE    0x8
+
+/* Spansion */
+#define SPANSION_DUAL_DUMMY_CYCLE    0x4
+#define SPANSION_QUAD_DUMMY_CYCLE    0x6
+#define SPANSION_FAST_DUMMY_CYCLE    0x8
+
+/* GigaDevice */
+#define GIGADEVICE_DUAL_DUMMY_CYCLE    0x4
+#define GIGADEVICE_QUAD_DUMMY_CYCLE    0x6
+#define GIGADEVICE_FAST_DUMMY_CYCLE    0x8
+
+/* EON */
+#define EON_DUAL_DUMMY_CYCLE    0x4
+#define EON_QUAD_DUMMY_CYCLE    0x6
+#define EON_FAST_DUMMY_CYCLE    0x8
 
 /* Used for SST flashes only. */
 #define	OPCODE_BP		0x02	/* Byte program */
@@ -70,9 +122,14 @@
 #define	SR_BP2			0x10	/* Block protect 2 */
 #define	SR_SRWD			0x80	/* SR write protect */
 
+#define SR_QUAD_EN_MX           0x40    /* Macronix Quad I/O */
+
+/* Configuration Register bits. */
+#define CR_QUAD_EN_SPAN		0x2     /* Spansion Quad I/O */
+
 /* Define max times to check status register before we give up. */
 #define	MAX_READY_WAIT_JIFFIES	(40 * HZ)	/* M25P16 specs 40s max chip erase */
-#define	MAX_CMD_SIZE		5
+#define	MAX_CMD_SIZE		6
 
 #define JEDEC_MFR(_jedec_id)	((_jedec_id) >> 16)
 
@@ -83,6 +140,296 @@
 #endif
 
 /****************************************************************************/
+/* Extend flash multi-channel read/write type */
+enum m25p80_rd_multi_type {
+	RD_MULTI_NONE = 0x00,
+	RD_DUAL_O     = 0x01,
+	RD_DUAL_IO    = 0x02,
+	RD_QUAD_O     = 0x03,
+	RD_QUAD_IO    = 0x04
+};
+
+enum m25p80_wr_multi_type {
+	WR_MULTI_NONE = 0x00,
+	WR_DUAL_I     = 0x01,
+	WR_DUAL_II    = 0x02,
+	WR_QUAD_I     = 0x03,
+	WR_QUAD_II    = 0x04
+};
+
+struct flash_cmd {
+	volatile uint8_t ppx2_i;	/* flash_cmd; write dual channels */
+	volatile uint8_t ppx2_ii;	/* flash_cmd; write dual channels */
+	volatile uint8_t ppx4_i;	/* flash_cmd; wirte quad channels */
+	volatile uint8_t ppx4_ii;	/* flash_cmd; wirte quad channels */
+	volatile uint8_t readx2_o;	/* flash_cmd; read  dual channels */
+	volatile uint8_t readx2_io;	/* flash_cmd; read  dual channels */
+	volatile uint8_t readx4_o;	/* flash_cmd; read  quad channels */
+	volatile uint8_t readx4_io;	/* flash_cmd; read  quad channels */
+};
+
+struct flash_dummy_cycles_info {
+	uint32_t  rd_dual_dummy;
+	uint32_t  rd_quad_dummy;
+	uint32_t  fast_rd_dummy;
+};
+
+struct flash_rw_multi_type_info {
+	enum m25p80_rd_multi_type rd_dual_type;
+	enum m25p80_rd_multi_type rd_quad_type;
+	enum m25p80_wr_multi_type wr_dual_type;
+	enum m25p80_wr_multi_type wr_quad_type;
+};
+
+struct flash_vendor_info {
+	uint8_t	flash_id;
+	char	vendor_name[16];
+	struct	flash_cmd *cmd;
+	struct	flash_dummy_cycles_info *dummy;
+	struct	flash_rw_multi_type_info *type;
+};
+/* Flash device cmd,
+ * If you want to add new flash vendor
+ * Please add new flash vendor command
+ */
+struct flash_cmd mxic_cmd = {
+	PPX2_I,
+	PPX2_II,
+	PPX4_I,
+	PPX4_II,
+	READX2_I,
+	READX2_IO,
+	READX4_I,
+	READX4_IO,
+};
+
+struct flash_cmd esmt_cmd = {
+	PPX2_I,
+	PPX2_II,
+	PPX4_I,
+	PPX4_II,
+	READX2_I,
+	READX2_IO,
+	READX4_I,
+	READX4_IO,
+};
+
+struct flash_cmd winbond_cmd = {
+	PPX2_I,
+	PPX2_II,
+	PPX4_I,
+	PPX4_II,
+	READX2_I,
+	READX2_IO,
+	READX4_I,
+	READX4_IO,
+};
+
+struct flash_cmd spansion_cmd = {
+	PPX2_I,
+	PPX2_II,
+	PPX4_I,
+	PPX4_II,
+	READX2_I,
+	READX2_IO,
+	READX4_I,
+	READX4_IO,
+};
+
+struct flash_cmd gigadevice_cmd = {
+	PPX2_I,
+	PPX2_II,
+	PPX4_I,
+	PPX4_II,
+	READX2_I,
+	READX2_IO,
+	READX4_I,
+	READX4_IO,
+};
+
+struct flash_cmd eon_cmd = {
+	PPX2_I,
+	PPX2_II,
+	PPX4_I,
+	PPX4_II,
+	READX2_I,
+	READX2_IO,
+	READX4_I,
+	READX4_IO,
+};
+
+/* Flash device dummy info,
+ * If you want to add new flash vendor
+ * Please add new flash vendor dummy
+ */
+struct flash_dummy_cycles_info	mxic_dummy_cycles_info = {
+	MXIC_DUAL_DUMMY_CYCLE,
+	MXIC_QUAD_DUMMY_CYCLE,
+	MXIC_FAST_DUMMY_CYCLE,
+};
+
+struct flash_dummy_cycles_info	esmt_dummy_cycles_info = {
+	ESMT_DUAL_DUMMY_CYCLE,
+	ESMT_QUAD_DUMMY_CYCLE,
+	ESMT_FAST_DUMMY_CYCLE,
+};
+
+struct flash_dummy_cycles_info	winbond_dummy_cycles_info = {
+	WINBOND_DUAL_DUMMY_CYCLE,
+	WINBOND_QUAD_DUMMY_CYCLE,
+	WINBOND_FAST_DUMMY_CYCLE,
+};
+
+struct flash_dummy_cycles_info	spansion_dummy_cycles_info = {
+	SPANSION_DUAL_DUMMY_CYCLE,
+	SPANSION_QUAD_DUMMY_CYCLE,
+	SPANSION_FAST_DUMMY_CYCLE,
+};
+
+struct flash_dummy_cycles_info	gigadevice_dummy_cycles_info = {
+	GIGADEVICE_DUAL_DUMMY_CYCLE,
+	GIGADEVICE_QUAD_DUMMY_CYCLE,
+	GIGADEVICE_FAST_DUMMY_CYCLE,
+};
+
+struct flash_dummy_cycles_info	eon_dummy_cycles_info = {
+	EON_DUAL_DUMMY_CYCLE,
+	EON_QUAD_DUMMY_CYCLE,
+	EON_FAST_DUMMY_CYCLE,
+};
+
+/* Flash device read/write multi type,
+ * If you want to add new flash vendor
+ * Please add new flash vendor dummy
+ */
+struct flash_rw_multi_type_info mxic_rw_multi_type_info = {
+	RD_DUAL_IO,
+	RD_QUAD_IO,
+	WR_MULTI_NONE,
+	WR_QUAD_II
+};
+
+struct flash_rw_multi_type_info esmt_rw_multi_type_info = {
+	RD_DUAL_IO,
+	RD_QUAD_IO,
+	WR_MULTI_NONE,
+	WR_QUAD_II
+};
+
+struct flash_rw_multi_type_info winbond_rw_multi_type_info = {
+	RD_DUAL_IO,
+	RD_QUAD_IO,
+	WR_MULTI_NONE,
+	WR_QUAD_II
+};
+
+struct flash_rw_multi_type_info spansion_rw_multi_type_info = {
+	RD_DUAL_IO,
+	RD_QUAD_IO,
+	WR_MULTI_NONE,
+	WR_QUAD_II
+};
+
+struct flash_rw_multi_type_info gigadevice_rw_multi_type_info = {
+	RD_DUAL_IO,
+	RD_QUAD_IO,
+	WR_MULTI_NONE,
+	WR_QUAD_II
+};
+
+struct flash_rw_multi_type_info eon_rw_multi_type_info = {
+	RD_DUAL_IO,
+	RD_QUAD_IO,
+	WR_MULTI_NONE,
+	WR_QUAD_II
+};
+
+/*-----------------------------------------------------------------*/
+
+struct device_info {
+	uint32_t device_id;
+	struct flash_cmd    *cmd;
+	struct flash_dummy_cycles_info *dummy;
+	struct flash_rw_multi_type_info *type;
+};
+
+/* Add new flash vendor
+ * format (FlashID, vendor name, flash cmd,
+ * flash dummy cycle and read/write multi type),
+ * if you want to add new flash
+ * vendor, please add here.
+ */
+struct flash_vendor_info info_mxic = {
+	0xC2,
+	"MXIC",
+	&mxic_cmd,
+	&mxic_dummy_cycles_info,
+	&mxic_rw_multi_type_info
+};
+
+struct flash_vendor_info info_esmt = {
+	0x8C,
+	"ESMT",
+	&esmt_cmd,
+	&esmt_dummy_cycles_info,
+	&esmt_rw_multi_type_info
+};
+
+struct flash_vendor_info info_winbond = {
+	0xEF,
+	"Winbond",
+	&winbond_cmd,
+	&winbond_dummy_cycles_info,
+	&winbond_rw_multi_type_info
+};
+
+struct flash_vendor_info info_spansion = {
+	0x01,
+	"Spansion",
+	&spansion_cmd,
+	&spansion_dummy_cycles_info,
+	&spansion_rw_multi_type_info
+};
+
+struct flash_vendor_info info_gigadevice = {
+	0xC8,
+	"GigaDevice",
+	&gigadevice_cmd,
+	&gigadevice_dummy_cycles_info,
+	&gigadevice_rw_multi_type_info
+};
+
+struct flash_vendor_info info_eon = {
+	0x1C,
+	"EON",
+	&eon_cmd,
+	&eon_dummy_cycles_info,
+	&eon_rw_multi_type_info
+};
+
+/* Flash vendors eg: MXIC.... */
+struct flash_device {
+	struct flash_vendor_info *vendors[6];
+};
+
+struct flash_device device = {
+	{ &info_mxic, &info_esmt, &info_winbond, &info_spansion, &info_gigadevice, &info_eon }
+};
+
+enum read_type {
+	M25P80_NORMAL = 0,
+	M25P80_FAST,
+	M25P80_QUAD,
+	M25P80_DUAL,
+	M25P80_AUTO
+};
+
+enum write_type {
+	M25P80_QUAD_WRITE = 5,
+	M25P80_DUAL_WRITE,
+	M25P80_NORMAL_WRITE,
+	M25P80_AUTO_WRITE
+};
 
 struct m25p {
 	struct spi_device	*spi;
@@ -91,8 +438,25 @@ struct m25p {
 	u16			page_size;
 	u16			addr_width;
 	u8			erase_opcode;
+	u8			read_opcode;
+	u8			program_opcode;
 	u8			*command;
+	enum read_type		flash_read;
+	/* support special flash write mode */
+	enum write_type		flash_write;
 	bool			fast_read;
+	/* support multi-channel write and read */
+	bool			quad;
+	bool			dual;
+	/* support auto mode */
+	bool			auto_mode;
+	/* support flash vendor information */
+	struct	device_info	dev_info;
+	/* flash read dummy cycles */
+	unsigned int	dummy;
+	/* support flash read/write multi-channel type */
+	unsigned int	write_type;
+	unsigned int	read_type;
 };
 
 static inline struct m25p *mtd_to_m25p(struct mtd_info *mtd)
@@ -129,6 +493,26 @@ static int read_sr(struct m25p *flash)
 }
 
 /*
+ * Read configuration register, returning its value in the
+ * location. Return the configuration register value.
+ * Returns negative if error occured.
+ */
+static int read_cr(struct m25p *flash)
+{
+	u8 code = OPCODE_RDCR;
+	int ret;
+	u8 val;
+
+	ret = spi_write_then_read(flash->spi, &code, 1, &val, 1);
+	if (ret < 0) {
+		dev_err(&flash->spi->dev, "error %d reading CR\n", ret);
+		return ret;
+	}
+
+	return val;
+}
+
+/*
  * Write status register 1 byte
  * Returns negative if error occurred.
  */
@@ -166,11 +550,25 @@ static inline int write_disable(struct m
  */
 static inline int set_4byte(struct m25p *flash, u32 jedec_id, int enable)
 {
+	int status;
+	bool need_wren = false;
+
 	switch (JEDEC_MFR(jedec_id)) {
+	case CFI_MFR_ST: /* Micron, actually */
+		/* Some Micron need WREN command; all will accept it */
+		need_wren = true;
 	case CFI_MFR_MACRONIX:
 	case 0xEF /* winbond */:
+		if (need_wren)
+			write_enable(flash);
+
 		flash->command[0] = enable ? OPCODE_EN4B : OPCODE_EX4B;
-		return spi_write(flash->spi, flash->command, 1);
+		status = spi_write(flash->spi, flash->command, 1);
+
+		if (need_wren)
+			write_disable(flash);
+
+		return status;
 	default:
 		/* Spansion style */
 		flash->command[0] = OPCODE_BRWR;
@@ -204,6 +602,121 @@ static int wait_till_ready(struct m25p *
 }
 
 /*
+ * Write status Register and configuration register with 2 bytes
+ * The first byte will be written to the status register, while the
+ * second byte will be written to the configuration register.
+ * Return negative if error occured.
+ */
+static int write_sr_cr(struct m25p *flash, u16 val)
+{
+	flash->command[0] = OPCODE_WRSR;
+	flash->command[1] = val & 0xff;
+	flash->command[2] = (val >> 8);
+
+	return spi_write(flash->spi, flash->command, 3);
+}
+
+static int macronix_quad_enable(struct m25p *flash)
+{
+	int ret, val;
+	u8 cmd[2];
+	cmd[0] = OPCODE_WRSR;
+
+	val = read_sr(flash);
+	cmd[1] = val | SR_QUAD_EN_MX;
+	write_enable(flash);
+
+	spi_write(flash->spi, &cmd, 2);
+
+	if (wait_till_ready(flash))
+		return 1;
+
+	ret = read_sr(flash);
+	if (!(ret > 0 && (ret & SR_QUAD_EN_MX))) {
+		dev_err(&flash->spi->dev, "Macronix Quad bit not set\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int spansion_quad_enable(struct m25p *flash)
+{
+	int ret;
+	int quad_en = CR_QUAD_EN_SPAN << 8;
+
+	write_enable(flash);
+
+	ret = write_sr_cr(flash, quad_en);
+	if (ret < 0) {
+		dev_err(&flash->spi->dev,
+			"error while writing configuration register\n");
+		return -EINVAL;
+	}
+
+	/* read back and check it */
+	ret = read_cr(flash);
+	if (!(ret > 0 && (ret & CR_QUAD_EN_SPAN))) {
+		dev_err(&flash->spi->dev, "Spansion Quad bit not set\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int set_quad_mode(struct m25p *flash, u32 jedec_id)
+{
+	int status;
+
+	switch (JEDEC_MFR(jedec_id)) {
+	case CFI_MFR_MACRONIX:
+		status = macronix_quad_enable(flash);
+		if (status) {
+			dev_err(&flash->spi->dev,
+				"Macronix quad-read not enabled\n");
+			return -EINVAL;
+		}
+		return status;
+	default:
+		status = spansion_quad_enable(flash);
+		if (status) {
+			dev_err(&flash->spi->dev,
+				"Spansion quad-read not enabled\n");
+			return -EINVAL;
+		}
+		return status;
+	}
+}
+
+/* Get flash device information such as command, dummy cycle and type */
+static int get_flash_device(struct m25p *flash, u32 jedec_id)
+{
+	uint32_t i;
+	uint32_t size;
+
+	flash->dev_info.device_id = JEDEC_MFR(jedec_id);
+	size = sizeof(struct flash_device)/sizeof(struct flash_vendor_info *);
+	for (i = 0; i < size; i++) {
+		if (flash->dev_info.device_id == device.vendors[i]->flash_id) {
+			flash->dev_info.cmd = device.vendors[i]->cmd;
+			flash->dev_info.dummy = device.vendors[i]->dummy;
+			flash->dev_info.type = device.vendors[i]->type;
+			printk(KERN_INFO "flash vendor: %s\n", device.vendors[i]->vendor_name);
+			return 0;
+		}
+	}
+	printk(KERN_INFO "\n>>>>>No Flash Vendor support (0x%x)<<<<<\n\n", jedec_id);
+#if 1
+	printk("use MXIC as flash vendor instead\n");
+	flash->dev_info.cmd = device.vendors[0]->cmd;
+	flash->dev_info.dummy = device.vendors[0]->dummy;
+	flash->dev_info.type = device.vendors[0]->type;
+	return 0;
+#else
+	return -EINVAL;
+#endif
+}
+/*
  * Erase the whole flash memory
  *
  * Returns 0 if successful, non-zero otherwise.
@@ -334,6 +847,37 @@ static int m25p80_erase(struct mtd_info 
 }
 
 /*
+ * Dummy Cycle calculation for different type of read.
+ * It can be used to support more commands with
+ * different dummy cycle requirements.
+ */
+static inline int m25p80_dummy_cycles_read(struct m25p *flash)
+{
+	switch (flash->flash_read) {
+	case M25P80_FAST:
+	case M25P80_DUAL:
+	case M25P80_QUAD:
+		return 1;
+	case M25P80_NORMAL:
+	case M25P80_AUTO:
+		return 0;
+	default:
+		dev_err(&flash->spi->dev, "No valid read type supported\n");
+		return -1;
+	}
+}
+
+static inline unsigned int m25p80_rx_nbits(const struct m25p *flash)
+{
+	switch (flash->flash_read) {
+	case M25P80_QUAD:
+		return 4;
+	default:
+		return 0;
+	}
+}
+
+/*
  * Read an address range from the flash chip.  The address range
  * may be any size provided it is within the physical boundaries.
  */
@@ -344,6 +888,9 @@ static int m25p80_read(struct mtd_info *
 	struct spi_transfer t[2];
 	struct spi_message m;
 	uint8_t opcode;
+	int dummy;
+	unsigned int type;
+	uint8_t	mode;
 
 	pr_debug("%s: %s from 0x%08x, len %zd\n", dev_name(&flash->spi->dev),
 			__func__, (u32)from, len);
@@ -355,11 +902,18 @@ static int m25p80_read(struct mtd_info *
 	 * OPCODE_FAST_READ (if available) is faster.
 	 * Should add 1 byte DUMMY_BYTE.
 	 */
+
+	dummy =  m25p80_dummy_cycles_read(flash);
+	if (dummy < 0) {
+		dev_err(&flash->spi->dev, "No valid read command supported\n");
+		return -EINVAL;
+	}
 	t[0].tx_buf = flash->command;
-	t[0].len = m25p_cmdsz(flash) + (flash->fast_read ? 1 : 0);
+	t[0].len = m25p_cmdsz(flash) + dummy;
 	spi_message_add_tail(&t[0], &m);
 
 	t[1].rx_buf = buf;
+	t[1].rx_nbits = m25p80_rx_nbits(flash);
 	t[1].len = len;
 	spi_message_add_tail(&t[1], &m);
 
@@ -378,14 +932,18 @@ static int m25p80_read(struct mtd_info *
 	 */
 
 	/* Set up the write data buffer. */
-	opcode = flash->fast_read ? OPCODE_FAST_READ : OPCODE_NORM_READ;
+	opcode = flash->read_opcode;
+	mode = flash->flash_read;
+	type = flash->read_type;
 	flash->command[0] = opcode;
 	m25p_addr2cmd(flash, from, flash->command);
+	flash->command[5] = mode;
+	flash->command[6] = flash->dummy;
+	flash->command[7] = type;
 
 	spi_sync(flash->spi, &m);
 
-	*retlen = m.actual_length - m25p_cmdsz(flash) -
-			(flash->fast_read ? 1 : 0);
+	*retlen = m.actual_length - m25p_cmdsz(flash) - dummy;
 
 	mutex_unlock(&flash->lock);
 
@@ -404,6 +962,8 @@ static int m25p80_write(struct mtd_info 
 	u32 page_offset, page_size;
 	struct spi_transfer t[2];
 	struct spi_message m;
+	unsigned int type;
+	uint8_t mode;
 
 	pr_debug("%s: %s to 0x%08x, len %zd\n", dev_name(&flash->spi->dev),
 			__func__, (u32)to, len);
@@ -429,9 +989,12 @@ static int m25p80_write(struct mtd_info 
 	write_enable(flash);
 
 	/* Set up the opcode in the write buffer. */
-	flash->command[0] = OPCODE_PP;
+	mode = flash->flash_write;
+	type = flash->write_type;
+	flash->command[0] = flash->program_opcode;
 	m25p_addr2cmd(flash, to, flash->command);
-
+	flash->command[5] = mode;
+	flash->command[7] = type;
 	page_offset = to & (flash->page_size - 1);
 
 	/* do all the bytes fit onto one page? */
@@ -689,7 +1252,9 @@ struct flash_info {
 #define	SECT_4K		0x01		/* OPCODE_BE_4K works uniformly */
 #define	M25P_NO_ERASE	0x02		/* No erase command needed */
 #define	SST_WRITE	0x04		/* use SST byte programming */
+#define	M25P_NO_FR	0x08		/* Can't do fastread */
 #define	SECT_4K_PMC	0x10		/* OPCODE_BE_4K_PMC works uniformly */
+#define	M25P80_QUAD_READ	0x20    /* Flash supports Quad Read */
 };
 
 #define INFO(_jedec_id, _ext_id, _sector_size, _n_sectors, _flags)	\
@@ -702,13 +1267,13 @@ struct flash_info {
 		.flags = (_flags),					\
 	})
 
-#define CAT25_INFO(_sector_size, _n_sectors, _page_size, _addr_width)	\
+#define CAT25_INFO(_sector_size, _n_sectors, _page_size, _addr_width, _flags)	\
 	((kernel_ulong_t)&(struct flash_info) {				\
 		.sector_size = (_sector_size),				\
 		.n_sectors = (_n_sectors),				\
 		.page_size = (_page_size),				\
 		.addr_width = (_addr_width),				\
-		.flags = M25P_NO_ERASE,					\
+		.flags = (_flags),					\
 	})
 
 /* NOTE: double check command sets and memory organization when you add
@@ -732,8 +1297,10 @@ static const struct spi_device_id m25p_i
 	{ "at45db081d", INFO(0x1f2500, 0, 64 * 1024, 16, SECT_4K) },
 
 	/* EON -- en25xxx */
+	{ "en25f16",    INFO(0x1c3115, 0, 64 * 1024,   32, SECT_4K) },
 	{ "en25f32", INFO(0x1c3116, 0, 64 * 1024,  64, SECT_4K) },
 	{ "en25p32", INFO(0x1c2016, 0, 64 * 1024,  64, 0) },
+	{ "en25q16",   INFO(0x1c3015, 0, 64 * 1024,   32, 0) },
 	{ "en25q32b", INFO(0x1c3016, 0, 64 * 1024,  64, 0) },
 	{ "en25p64", INFO(0x1c2017, 0, 64 * 1024, 128, 0) },
 	{ "en25q64", INFO(0x1c3017, 0, 64 * 1024, 128, SECT_4K) },
@@ -741,14 +1308,25 @@ static const struct spi_device_id m25p_i
 	{ "en25qh256", INFO(0x1c7019, 0, 64 * 1024, 512, 0) },
 
 	/* ESMT */
+	{ "f25l08qa(2s)", INFO(0x8c4014, 0, 64 * 1024, 16, SECT_4K) },
+	{ "f25l16pa(2s)", INFO(0x8c2115, 0, 64 * 1024, 32, SECT_4K) },
+	{ "f25l16qa(2s)", INFO(0x8c4015, 0, 64 * 1024, 32, SECT_4K) },
 	{ "f25l32pa", INFO(0x8c2016, 0, 64 * 1024, 64, SECT_4K) },
+	{ "f25l32qa", INFO(0x8c4016, 0, 64 * 1024, 64, SECT_4K) },
+	{ "f25l32qa(2s)", INFO(0x8c4116, 0, 64 * 1024, 64, SECT_4K) },
+	{ "f25l64qa", INFO(0x8c4117, 0, 64 * 1024, 128, SECT_4K) },
+	{ "f25l128qa", INFO(0x8c4118, 0, 64 * 1024, 256, SECT_4K) },
 
 	/* Everspin */
-	{ "mr25h256", CAT25_INFO(  32 * 1024, 1, 256, 2) },
+	{ "mr25h256", CAT25_INFO( 32 * 1024, 1, 256, 2, M25P_NO_ERASE | M25P_NO_FR) },
+	{ "mr25h10",  CAT25_INFO(128 * 1024, 1, 256, 3, M25P_NO_ERASE | M25P_NO_FR) },
 
 	/* GigaDevice */
+	{ "gd25q80", INFO(0xc84014, 0, 64 * 1024,  16, SECT_4K) },
+	{ "gd25q16", INFO(0xc84015, 0, 64 * 1024,  32, SECT_4K) },
 	{ "gd25q32", INFO(0xc84016, 0, 64 * 1024,  64, SECT_4K) },
 	{ "gd25q64", INFO(0xc84017, 0, 64 * 1024, 128, SECT_4K) },
+	{ "gd25q128", INFO(0xc84018, 0, 64 * 1024, 256, SECT_4K) },
 
 	/* Intel/Numonyx -- xxxs33b */
 	{ "160s33b",  INFO(0x898911, 0, 64 * 1024,  32, 0) },
@@ -760,19 +1338,25 @@ static const struct spi_device_id m25p_i
 	{ "mx25l4005a",  INFO(0xc22013, 0, 64 * 1024,   8, SECT_4K) },
 	{ "mx25l8005",   INFO(0xc22014, 0, 64 * 1024,  16, 0) },
 	{ "mx25l1606e",  INFO(0xc22015, 0, 64 * 1024,  32, SECT_4K) },
+	{ "mx25l1633e",  INFO(0xc22415, 0, 64 * 1024,  32, SECT_4K) },
+	{ "mx25l1635e",  INFO(0xc22515, 0, 64 * 1024,  32, SECT_4K) },
 	{ "mx25l3205d",  INFO(0xc22016, 0, 64 * 1024,  64, 0) },
+	{ "mx25l3235d",  INFO(0xc25e16, 0, 64 * 1024,  64, SECT_4K) },
+	{ "mx25l3255e",  INFO(0xc29e16, 0, 64 * 1024,  64, SECT_4K) },
 	{ "mx25l6405d",  INFO(0xc22017, 0, 64 * 1024, 128, 0) },
 	{ "mx25l12805d", INFO(0xc22018, 0, 64 * 1024, 256, 0) },
 	{ "mx25l12855e", INFO(0xc22618, 0, 64 * 1024, 256, 0) },
 	{ "mx25l25635e", INFO(0xc22019, 0, 64 * 1024, 512, 0) },
 	{ "mx25l25655e", INFO(0xc22619, 0, 64 * 1024, 512, 0) },
-	{ "mx66l51235l", INFO(0xc2201a, 0, 64 * 1024, 1024, 0) },
+	{ "mx66l51235l", INFO(0xc2201a, 0, 64 * 1024, 1024, M25P80_QUAD_READ) },
+	{ "mx66l1g45g", INFO(0xc2201b, 0, 64 * 1024, 2048, 0) },
 
 	/* Micron */
 	{ "n25q064",  INFO(0x20ba17, 0, 64 * 1024, 128, 0) },
 	{ "n25q128a11",  INFO(0x20bb18, 0, 64 * 1024, 256, 0) },
 	{ "n25q128a13",  INFO(0x20ba18, 0, 64 * 1024, 256, 0) },
 	{ "n25q256a", INFO(0x20ba19, 0, 64 * 1024, 512, SECT_4K) },
+	{ "n25q512a",    INFO(0x20bb20, 0, 64 * 1024, 1024, SECT_4K) },
 
 	/* PMC */
 	{ "pm25lv512", INFO(0, 0, 32 * 1024, 2, SECT_4K_PMC) },
@@ -785,8 +1369,8 @@ static const struct spi_device_id m25p_i
 	{ "s25sl032p",  INFO(0x010215, 0x4d00,  64 * 1024,  64, 0) },
 	{ "s25sl064p",  INFO(0x010216, 0x4d00,  64 * 1024, 128, 0) },
 	{ "s25fl256s0", INFO(0x010219, 0x4d00, 256 * 1024, 128, 0) },
-	{ "s25fl256s1", INFO(0x010219, 0x4d01,  64 * 1024, 512, 0) },
-	{ "s25fl512s",  INFO(0x010220, 0x4d00, 256 * 1024, 256, 0) },
+	{ "s25fl256s1", INFO(0x010219, 0x4d01,  64 * 1024, 512, M25P80_QUAD_READ) },
+	{ "s25fl512s",  INFO(0x010220, 0x4d00, 256 * 1024, 256, M25P80_QUAD_READ) },
 	{ "s70fl01gs",  INFO(0x010221, 0x4d00, 256 * 1024, 256, 0) },
 	{ "s25sl12800", INFO(0x012018, 0x0300, 256 * 1024,  64, 0) },
 	{ "s25sl12801", INFO(0x012018, 0x0301,  64 * 1024, 256, 0) },
@@ -841,6 +1425,7 @@ static const struct spi_device_id m25p_i
 	{ "m25pe80", INFO(0x208014,  0, 64 * 1024, 16,       0) },
 	{ "m25pe16", INFO(0x208015,  0, 64 * 1024, 32, SECT_4K) },
 
+	{ "m25px16",    INFO(0x207115,  0, 64 * 1024, 32, SECT_4K) },
 	{ "m25px32",    INFO(0x207116,  0, 64 * 1024, 64, SECT_4K) },
 	{ "m25px32-s0", INFO(0x207316,  0, 64 * 1024, 64, SECT_4K) },
 	{ "m25px32-s1", INFO(0x206316,  0, 64 * 1024, 64, SECT_4K) },
@@ -854,21 +1439,23 @@ static const struct spi_device_id m25p_i
 	{ "w25x80", INFO(0xef3014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "w25x16", INFO(0xef3015, 0, 64 * 1024,  32, SECT_4K) },
 	{ "w25x32", INFO(0xef3016, 0, 64 * 1024,  64, SECT_4K) },
+	{ "w25q16", INFO(0xef4015, 0, 64 * 1024,  32, SECT_4K) },
 	{ "w25q32", INFO(0xef4016, 0, 64 * 1024,  64, SECT_4K) },
 	{ "w25q32dw", INFO(0xef6016, 0, 64 * 1024,  64, SECT_4K) },
 	{ "w25x64", INFO(0xef3017, 0, 64 * 1024, 128, SECT_4K) },
 	{ "w25q64", INFO(0xef4017, 0, 64 * 1024, 128, SECT_4K) },
+	{ "w25q128", INFO(0xef4018, 0, 64 * 1024, 256, SECT_4K) },
 	{ "w25q80", INFO(0xef5014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "w25q80bl", INFO(0xef4014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "w25q128", INFO(0xef4018, 0, 64 * 1024, 256, SECT_4K) },
 	{ "w25q256", INFO(0xef4019, 0, 64 * 1024, 512, SECT_4K) },
 
 	/* Catalyst / On Semiconductor -- non-JEDEC */
-	{ "cat25c11", CAT25_INFO(  16, 8, 16, 1) },
-	{ "cat25c03", CAT25_INFO(  32, 8, 16, 2) },
-	{ "cat25c09", CAT25_INFO( 128, 8, 32, 2) },
-	{ "cat25c17", CAT25_INFO( 256, 8, 32, 2) },
-	{ "cat25128", CAT25_INFO(2048, 8, 64, 2) },
+	{ "cat25c11", CAT25_INFO(  16, 8, 16, 1, M25P_NO_ERASE | M25P_NO_FR) },
+	{ "cat25c03", CAT25_INFO(  32, 8, 16, 2, M25P_NO_ERASE | M25P_NO_FR) },
+	{ "cat25c09", CAT25_INFO( 128, 8, 32, 2, M25P_NO_ERASE | M25P_NO_FR) },
+	{ "cat25c17", CAT25_INFO( 256, 8, 32, 2, M25P_NO_ERASE | M25P_NO_FR) },
+	{ "cat25128", CAT25_INFO(2048, 8, 64, 2, M25P_NO_ERASE | M25P_NO_FR) },
 	{ },
 };
 MODULE_DEVICE_TABLE(spi, m25p_ids);
@@ -878,7 +1465,7 @@ static const struct spi_device_id *jedec
 	int			tmp;
 	u8			code = OPCODE_RDID;
 	u8			id[5];
-	u32			jedec;
+	u32			jedec, default_jedec;
 	u16                     ext_jedec;
 	struct flash_info	*info;
 
@@ -888,7 +1475,7 @@ static const struct spi_device_id *jedec
 	 */
 	tmp = spi_write_then_read(spi, &code, 1, id, 5);
 	if (tmp < 0) {
-		pr_debug("%s: error %d reading JEDEC ID\n",
+		pr_debug("\n>>>>>%s: error %d reading JEDEC ID<<<<<\n\n",
 				dev_name(&spi->dev), tmp);
 		return ERR_PTR(tmp);
 	}
@@ -899,7 +1486,7 @@ static const struct spi_device_id *jedec
 	jedec |= id[2];
 
 	ext_jedec = id[3] << 8 | id[4];
-
+	printk("JEDEC id %06X\n", jedec);
 	for (tmp = 0; tmp < ARRAY_SIZE(m25p_ids) - 1; tmp++) {
 		info = (void *)m25p_ids[tmp].driver_data;
 		if (info->jedec_id == jedec) {
@@ -908,7 +1495,15 @@ static const struct spi_device_id *jedec
 			return &m25p_ids[tmp];
 		}
 	}
-	dev_err(&spi->dev, "unrecognized JEDEC id %06x\n", jedec);
+	dev_err(&spi->dev, "\n>>>>>unrecognized JEDEC id %06x<<<<<\n\n", jedec);
+	// if unrecognized, use mx25l3205d as default
+	printk("use JEDEC id 0xc22016 (mx25l3205d) instead\n");
+	default_jedec = 0xc22016;
+	for (tmp = 0; tmp < ARRAY_SIZE(m25p_ids) - 1; tmp++) {
+		info = (void *)m25p_ids[tmp].driver_data;
+		if (info->jedec_id == default_jedec)
+			return &m25p_ids[tmp];
+	}
 	return ERR_PTR(-ENODEV);
 }
 
@@ -926,19 +1521,17 @@ static int m25p_probe(struct spi_device 
 	struct flash_info		*info;
 	unsigned			i;
 	struct mtd_part_parser_data	ppdata;
-	struct device_node __maybe_unused *np = spi->dev.of_node;
-
-#ifdef CONFIG_MTD_OF_PARTS
-	if (!of_device_is_available(np))
-		return -ENODEV;
+#ifdef CONFIG_OF
+	struct device_node *np = spi->dev.of_node;
 #endif
+	int ret;
 
 	/* Platform data helps sort out which chip type we have, as
 	 * well as how this board partitions it.  If we don't have
 	 * a chip ID, try the JEDEC id commands; they'll work for most
 	 * newer chips, even if we don't recognize the particular chip.
 	 */
-	data = spi->dev.platform_data;
+	data = dev_get_platdata(&spi->dev);
 	if (data && data->type) {
 		const struct spi_device_id *plat_id;
 
@@ -978,19 +1571,17 @@ static int m25p_probe(struct spi_device 
 		}
 	}
 
-	flash = kzalloc(sizeof *flash, GFP_KERNEL);
+	flash = devm_kzalloc(&spi->dev, sizeof(*flash), GFP_KERNEL);
 	if (!flash)
 		return -ENOMEM;
-	flash->command = kmalloc(MAX_CMD_SIZE + (flash->fast_read ? 1 : 0),
-					GFP_KERNEL);
-	if (!flash->command) {
-		kfree(flash);
+
+	flash->command = devm_kzalloc(&spi->dev, MAX_CMD_SIZE, GFP_KERNEL);
+	if (!flash->command)
 		return -ENOMEM;
-	}
 
 	flash->spi = spi;
 	mutex_init(&flash->lock);
-	dev_set_drvdata(&spi->dev, flash);
+	spi_set_drvdata(spi, flash);
 
 	/*
 	 * Atmel, SST and Intel/Numonyx serial flash tend to power
@@ -1029,7 +1620,7 @@ static int m25p_probe(struct spi_device 
 		flash->mtd._write = m25p80_write;
 
 	/* prefer "small sector" erase if possible */
-	if (PREFER_SMALL_SECTOR_ERASE && (info->flags & SECT_4K)) {
+	if (info->flags & SECT_4K) {
 		flash->erase_opcode = OPCODE_BE_4K;
 		flash->mtd.erasesize = 4096;
 	} else if (info->flags & SECT_4K_PMC) {
@@ -1049,23 +1640,149 @@ static int m25p_probe(struct spi_device 
 	flash->mtd.writebufsize = flash->page_size;
 
 	flash->fast_read = false;
+	flash->quad = false;
+	flash->dual = false;
+	flash->auto_mode = false;
 #ifdef CONFIG_OF
-	if (np && of_property_read_bool(np, "m25p,fast-read"))
-		flash->fast_read = true;
+	if (np) {
+		/* If we were instantiated by DT, use it */
+		if (of_property_read_bool(np, "m25p,fast-read"))
+			flash->flash_read = M25P80_FAST;
+		else
+			flash->flash_read = M25P80_NORMAL;
+	} else {
+		/* If we weren't instantiated by DT, default to fast-read */
+		flash->flash_read = M25P80_FAST;
+	}
 #endif
 
+#ifdef CONFIG_M25PXX_USE_MULTI_CHANNEL
+#ifdef CONFIG_M25PXX_USE_QUAD
+	flash->quad = true;
+#endif
+#ifdef CONFIG_M25PXX_USE_DUAL
+	flash->dual = true;
+#endif
+#else
 #ifdef CONFIG_M25PXX_USE_FAST_READ
 	flash->fast_read = true;
 #endif
+#endif
+#ifdef CONFIG_M25PXX_USE_AUTO_MODE
+	flash->auto_mode = true;
+#endif
+	/* Some devices cannot do fast-read, no matter what DT tells us */
+	if (info->flags & M25P_NO_FR)
+		flash->flash_read = M25P80_NORMAL;
+
+	/* Quad-read mode takes precedence over fast/normal */
+	if (spi->mode & SPI_RX_QUAD && info->flags & M25P80_QUAD_READ) {
+		ret = set_quad_mode(flash, info->jedec_id);
+		if (ret) {
+			dev_err(&flash->spi->dev, "quad mode not supported\n");
+			return ret;
+		}
+		flash->flash_read = M25P80_QUAD;
+	}
+
+	/* flash-specific code  */
+	ret = get_flash_device(flash, info->jedec_id);
+	if (ret) {
+		dev_err(&flash->spi->dev, "no flash device supported\n");
+		return ret;
+	}
+
+	if (flash->auto_mode) {
+		flash->flash_read = M25P80_AUTO;
+		flash->flash_write = M25P80_AUTO_WRITE;
+	} else if (flash->quad) {
+		flash->flash_read = M25P80_QUAD;
+		flash->flash_write = M25P80_QUAD_WRITE;
+	} else if (flash->dual) {
+		flash->flash_read = M25P80_DUAL;
+		flash->flash_write = M25P80_DUAL_WRITE;
+	} else if (flash->fast_read) {
+		flash->flash_read = M25P80_FAST;
+		flash->flash_write = M25P80_NORMAL_WRITE;
+	} else {
+		flash->flash_read = M25P80_NORMAL;
+		flash->flash_write = M25P80_NORMAL_WRITE;
+	}
+
+	/* Default commands */
+	switch (flash->flash_read) {
+	case M25P80_QUAD:
+		flash->read_opcode = flash->dev_info.cmd->readx4_io;
+		flash->dummy = flash->dev_info.dummy->rd_quad_dummy;
+		flash->read_type = flash->dev_info.type->rd_quad_type;
+		break;
+	case M25P80_DUAL:
+		flash->read_opcode = flash->dev_info.cmd->readx2_io;
+		flash->dummy = flash->dev_info.dummy->rd_dual_dummy;
+		flash->read_type = flash->dev_info.type->rd_dual_type;
+		break;
+	case M25P80_FAST:
+		flash->read_opcode = OPCODE_FAST_READ;
+		flash->dummy = flash->dev_info.dummy->fast_rd_dummy;
+		break;
+	case M25P80_NORMAL:
+		flash->read_opcode = OPCODE_NORM_READ;
+		break;
+	case M25P80_AUTO:
+		flash->read_opcode = OPCODE_AUTO;
+		break;
+	default:
+		dev_err(&flash->spi->dev, "No Read opcode defined\n");
+		return -EINVAL;
+	}
+
+	switch (flash->flash_write) {
+	case M25P80_QUAD_WRITE:
+		flash->program_opcode = flash->dev_info.cmd->ppx4_ii;
+		flash->write_type = flash->dev_info.type->wr_quad_type;
+		break;
+	case M25P80_DUAL_WRITE:
+		flash->program_opcode = flash->dev_info.cmd->ppx2_ii;
+		flash->write_type = flash->dev_info.type->wr_dual_type;
+		break;
+	case M25P80_NORMAL_WRITE:
+		flash->program_opcode = OPCODE_PP;
+		break;
+	case M25P80_AUTO_WRITE:
+		flash->program_opcode = OPCODE_AUTO;
+		break;
+	default:
+		dev_err(&flash->spi->dev, "No write opcode defined\n");
+		return -EINVAL;
+	}
 
 	if (info->addr_width)
 		flash->addr_width = info->addr_width;
-	else {
+	else if (flash->mtd.size > 0x1000000) {
 		/* enable 4-byte addressing if the device exceeds 16MiB */
-		if (flash->mtd.size > 0x1000000) {
 			flash->addr_width = 4;
-			set_4byte(flash, info->jedec_id, 1);
+		if (JEDEC_MFR(info->jedec_id) == CFI_MFR_AMD) {
+			/* Dedicated 4-byte command set */
+			switch (flash->flash_read) {
+			case M25P80_QUAD:
+				flash->read_opcode = OPCODE_QUAD_READ_4B;
+				break;
+			case M25P80_FAST:
+				flash->read_opcode = OPCODE_FAST_READ_4B;
+				break;
+			case M25P80_NORMAL:
+			case M25P80_DUAL:
+			case M25P80_AUTO:
+				flash->read_opcode = OPCODE_NORM_READ_4B;
+				break;
+			}
+			flash->program_opcode = OPCODE_PP_4B;
+			/* No small sector erase for 4-byte command set */
+			flash->erase_opcode = OPCODE_SE_4B;
+			flash->mtd.erasesize = info->sector_size;
 		} else
+			set_4byte(flash, info->jedec_id, 1);
+	} else {
 			flash->addr_width = 3;
 	}
 
@@ -1101,16 +1818,10 @@ static int m25p_probe(struct spi_device 
 
 static int m25p_remove(struct spi_device *spi)
 {
-	struct m25p	*flash = dev_get_drvdata(&spi->dev);
-	int		status;
+	struct m25p	*flash = spi_get_drvdata(spi);
 
 	/* Clean up MTD stuff. */
-	status = mtd_device_unregister(&flash->mtd);
-	if (status == 0) {
-		kfree(flash->command);
-		kfree(flash);
-	}
-	return 0;
+	return mtd_device_unregister(&flash->mtd);
 }
 
 
Index: linux-3.10.49/include/linux/spi/spi.h
===================================================================
--- linux-3.10.49.orig/include/linux/spi/spi.h
+++ linux-3.10.49/include/linux/spi/spi.h
@@ -87,6 +87,10 @@ struct spi_device {
 #define	SPI_LOOP	0x20			/* loopback mode */
 #define	SPI_NO_CS	0x40			/* 1 dev/bus, no chipselect */
 #define	SPI_READY	0x80			/* slave pulls low to pause */
+#define	SPI_TX_DUAL	0x100			/* transmit with 2 wires */
+#define	SPI_TX_QUAD	0x200			/* transmit with 4 wires */
+#define	SPI_RX_DUAL	0x400			/* receive with 2 wires */
+#define	SPI_RX_QUAD	0x800			/* receive with 4 wires */
 	u8			bits_per_word;
 	int			irq;
 	void			*controller_state;
@@ -519,6 +523,11 @@ struct spi_transfer {
 	dma_addr_t	rx_dma;
 
 	unsigned	cs_change:1;
+	unsigned	tx_nbits:3;
+	unsigned	rx_nbits:3;
+#define	SPI_NBITS_SINGLE	0x01 /* 1bit transfer */
+#define	SPI_NBITS_DUAL		0x02 /* 2bits transfer */
+#define	SPI_NBITS_QUAD		0x04 /* 4bits transfer */
 	u8		bits_per_word;
 	u16		delay_usecs;
 	u32		speed_hz;
